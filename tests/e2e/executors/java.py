import os
import tempfile
import subprocess
import shutil

from m2cgen import exporters


class JavaExecutor:

    def __init__(self, model):
        self.model = model
        self.exporter = exporters.JavaExporter(model)

    def predict(self, X):
        dirpath = tempfile.mkdtemp()

        # Create files generated by exporter in the temp dir.
        files_to_compile = []
        for model_name, code in self.exporter.export():
            file_name = os.path.join(dirpath, "{}.java".format(model_name))

            with open(file_name, "w") as f:
                f.write(code)

            files_to_compile.append(file_name)

        # Move Executor.java to the same temp dir.
        module_path = os.path.dirname(__file__)
        shutil.copy(os.path.join(module_path, "Executor.java"), dirpath)

        # Compile all files together.
        subprocess.run(["javac"] + files_to_compile + (
            [os.path.join(dirpath, "Executor.java")]))

        # Get result from the generated model.
        exec_args = ["java", "-cp", dirpath, "Executor", "Model", "score"] + (
            list(map(str, X)))
        result = subprocess.run(exec_args, stdout=subprocess.PIPE)

        return float(result.stdout)
