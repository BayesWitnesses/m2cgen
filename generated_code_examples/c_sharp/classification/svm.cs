using static System.Math;
namespace ML {
    public static class Model {
        public static double[] Score(double[] input) {
            double var0;
            var0 = (0) - (scale);
            double var1;
            var1 = Exp((var0) * ((((Pow((5.6) - (input[0]), 2)) + (Pow((2.9) - (input[1]), 2))) + (Pow((3.6) - (input[2]), 2))) + (Pow((1.3) - (input[3]), 2))));
            double var2;
            var2 = Exp((var0) * ((((Pow((5.4) - (input[0]), 2)) + (Pow((3.0) - (input[1]), 2))) + (Pow((4.5) - (input[2]), 2))) + (Pow((1.5) - (input[3]), 2))));
            double var3;
            var3 = Exp((var0) * ((((Pow((6.2) - (input[0]), 2)) + (Pow((2.2) - (input[1]), 2))) + (Pow((4.5) - (input[2]), 2))) + (Pow((1.5) - (input[3]), 2))));
            double var4;
            var4 = Exp((var0) * ((((Pow((5.0) - (input[0]), 2)) + (Pow((2.3) - (input[1]), 2))) + (Pow((3.3) - (input[2]), 2))) + (Pow((1.0) - (input[3]), 2))));
            double var5;
            var5 = Exp((var0) * ((((Pow((5.9) - (input[0]), 2)) + (Pow((3.2) - (input[1]), 2))) + (Pow((4.8) - (input[2]), 2))) + (Pow((1.8) - (input[3]), 2))));
            double var6;
            var6 = Exp((var0) * ((((Pow((6.7) - (input[0]), 2)) + (Pow((3.0) - (input[1]), 2))) + (Pow((5.0) - (input[2]), 2))) + (Pow((1.7) - (input[3]), 2))));
            double var7;
            var7 = Exp((var0) * ((((Pow((4.9) - (input[0]), 2)) + (Pow((2.4) - (input[1]), 2))) + (Pow((3.3) - (input[2]), 2))) + (Pow((1.0) - (input[3]), 2))));
            double var8;
            var8 = Exp((var0) * ((((Pow((6.3) - (input[0]), 2)) + (Pow((2.5) - (input[1]), 2))) + (Pow((4.9) - (input[2]), 2))) + (Pow((1.5) - (input[3]), 2))));
            double var9;
            var9 = Exp((var0) * ((((Pow((6.0) - (input[0]), 2)) + (Pow((2.7) - (input[1]), 2))) + (Pow((5.1) - (input[2]), 2))) + (Pow((1.6) - (input[3]), 2))));
            double var10;
            var10 = Exp((var0) * ((((Pow((5.7) - (input[0]), 2)) + (Pow((2.6) - (input[1]), 2))) + (Pow((3.5) - (input[2]), 2))) + (Pow((1.0) - (input[3]), 2))));
            double var11;
            var11 = Exp((var0) * ((((Pow((5.1) - (input[0]), 2)) + (Pow((2.5) - (input[1]), 2))) + (Pow((3.0) - (input[2]), 2))) + (Pow((1.1) - (input[3]), 2))));
            double var12;
            var12 = Exp((var0) * ((((Pow((5.1) - (input[0]), 2)) + (Pow((3.8) - (input[1]), 2))) + (Pow((1.9) - (input[2]), 2))) + (Pow((0.4) - (input[3]), 2))));
            double var13;
            var13 = Exp((var0) * ((((Pow((5.7) - (input[0]), 2)) + (Pow((4.4) - (input[1]), 2))) + (Pow((1.5) - (input[2]), 2))) + (Pow((0.4) - (input[3]), 2))));
            double var14;
            var14 = Exp((var0) * ((((Pow((5.1) - (input[0]), 2)) + (Pow((3.3) - (input[1]), 2))) + (Pow((1.7) - (input[2]), 2))) + (Pow((0.5) - (input[3]), 2))));
            double var15;
            var15 = Exp((var0) * ((((Pow((5.7) - (input[0]), 2)) + (Pow((3.8) - (input[1]), 2))) + (Pow((1.7) - (input[2]), 2))) + (Pow((0.3) - (input[3]), 2))));
            double var16;
            var16 = Exp((var0) * ((((Pow((5.4) - (input[0]), 2)) + (Pow((3.4) - (input[1]), 2))) + (Pow((1.7) - (input[2]), 2))) + (Pow((0.2) - (input[3]), 2))));
            double var17;
            var17 = Exp((var0) * ((((Pow((5.0) - (input[0]), 2)) + (Pow((3.0) - (input[1]), 2))) + (Pow((1.6) - (input[2]), 2))) + (Pow((0.2) - (input[3]), 2))));
            double var18;
            var18 = Exp((var0) * ((((Pow((4.5) - (input[0]), 2)) + (Pow((2.3) - (input[1]), 2))) + (Pow((1.3) - (input[2]), 2))) + (Pow((0.3) - (input[3]), 2))));
            double var19;
            var19 = Exp((var0) * ((((Pow((4.8) - (input[0]), 2)) + (Pow((3.4) - (input[1]), 2))) + (Pow((1.9) - (input[2]), 2))) + (Pow((0.2) - (input[3]), 2))));
            double var20;
            var20 = Exp((var0) * ((((Pow((6.0) - (input[0]), 2)) + (Pow((3.0) - (input[1]), 2))) + (Pow((4.8) - (input[2]), 2))) + (Pow((1.8) - (input[3]), 2))));
            double var21;
            var21 = Exp((var0) * ((((Pow((6.3) - (input[0]), 2)) + (Pow((2.8) - (input[1]), 2))) + (Pow((5.1) - (input[2]), 2))) + (Pow((1.5) - (input[3]), 2))));
            double var22;
            var22 = Exp((var0) * ((((Pow((6.1) - (input[0]), 2)) + (Pow((3.0) - (input[1]), 2))) + (Pow((4.9) - (input[2]), 2))) + (Pow((1.8) - (input[3]), 2))));
            double var23;
            var23 = Exp((var0) * ((((Pow((4.9) - (input[0]), 2)) + (Pow((2.5) - (input[1]), 2))) + (Pow((4.5) - (input[2]), 2))) + (Pow((1.7) - (input[3]), 2))));
            double var24;
            var24 = Exp((var0) * ((((Pow((5.6) - (input[0]), 2)) + (Pow((2.8) - (input[1]), 2))) + (Pow((4.9) - (input[2]), 2))) + (Pow((2.0) - (input[3]), 2))));
            double var25;
            var25 = Exp((var0) * ((((Pow((6.0) - (input[0]), 2)) + (Pow((2.2) - (input[1]), 2))) + (Pow((5.0) - (input[2]), 2))) + (Pow((1.5) - (input[3]), 2))));
            double var26;
            var26 = Exp((var0) * ((((Pow((7.9) - (input[0]), 2)) + (Pow((3.8) - (input[1]), 2))) + (Pow((6.4) - (input[2]), 2))) + (Pow((2.0) - (input[3]), 2))));
            double var27;
            var27 = Exp((var0) * ((((Pow((7.2) - (input[0]), 2)) + (Pow((3.0) - (input[1]), 2))) + (Pow((5.8) - (input[2]), 2))) + (Pow((1.6) - (input[3]), 2))));
            double var28;
            var28 = Exp((var0) * ((((Pow((6.2) - (input[0]), 2)) + (Pow((2.8) - (input[1]), 2))) + (Pow((4.8) - (input[2]), 2))) + (Pow((1.8) - (input[3]), 2))));
            return new double[3] {(((((((((((((((((((0.11166728251449935) + ((var1) * (-0.7546041223284677))) + ((var2) * (-0.0))) + ((var3) * (-0.0))) + ((var4) * (-0.8877695556805599))) + ((var5) * (-0.0))) + ((var6) * (-0.0))) + ((var7) * (-0.8877695556805599))) + ((var8) * (-0.0))) + ((var9) * (-0.0))) + ((var10) * (-0.8877695556805599))) + ((var11) * (-0.8877695556805599))) + ((var12) * (0.8877695556805599))) + ((var13) * (0.0))) + ((var14) * (0.8877695556805599))) + ((var15) * (0.0))) + ((var16) * (0.7126145313390118))) + ((var17) * (0.04198959098945601))) + ((var18) * (0.8877695556805599))) + ((var19) * (0.8877695556805599)), (((((((((((((((((-0.043064448593694335) + ((var20) * (-0.3790553204589494))) + ((var21) * (-0.0))) + ((var22) * (-0.0))) + ((var23) * (-0.3790553204589494))) + ((var24) * (-0.3730604955455548))) + ((var25) * (-0.09964456068725433))) + ((var26) * (-0.26645281866213855))) + ((var27) * (-0.0))) + ((var28) * (-0.3790553204589494))) + ((var12) * (0.3790553204589494))) + ((var13) * (0.05589866243098008))) + ((var14) * (0.3790553204589494))) + ((var15) * (0.3790553204589494))) + ((var16) * (0.0))) + ((var17) * (0.0))) + ((var18) * (0.30420389200501824))) + ((var19) * (0.3790553204589494)), ((((((((((((((((((((2.1222908467070423) + ((var20) * (-109.16681524774745))) + ((var21) * (-109.16681524774745))) + ((var22) * (-105.17803142414256))) + ((var23) * (-17.487321182626303))) + ((var24) * (-0.0))) + ((var25) * (-71.97838649684462))) + ((var26) * (-0.0))) + ((var27) * (-12.773209867105617))) + ((var28) * (-109.16681524774745))) + ((var1) * (0.0))) + ((var2) * (56.65430288285653))) + ((var3) * (41.59583084011515))) + ((var4) * (0.0))) + ((var5) * (109.16681524774745))) + ((var6) * (109.16681524774745))) + ((var7) * (0.0))) + ((var8) * (109.16681524774745))) + ((var9) * (109.16681524774745))) + ((var10) * (0.0))) + ((var11) * (0.0))};
        }
    }
}
