public class Model {

    public static double score(double[] input) {
        return (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((21.29049184096943) + ((subroutine0(input)) * (-1.0))) + ((subroutine1(input)) * (-1.0))) + ((subroutine2(input)) * (0.13430199431006787))) + ((subroutine3(input)) * (1.0))) + ((subroutine4(input)) * (-1.0))) + ((subroutine5(input)) * (1.0))) + ((subroutine6(input)) * (1.0))) + ((subroutine7(input)) * (-1.0))) + ((subroutine8(input)) * (-0.3911883644281975))) + ((subroutine9(input)) * (-1.0))) + ((subroutine10(input)) * (-1.0))) + ((subroutine11(input)) * (1.0))) + ((subroutine12(input)) * (1.0))) + ((subroutine13(input)) * (-1.0))) + ((subroutine14(input)) * (-1.0))) + ((subroutine15(input)) * (-1.0))) + ((subroutine16(input)) * (-1.0))) + ((subroutine17(input)) * (-1.0))) + ((subroutine18(input)) * (1.0))) + ((subroutine19(input)) * (0.009985934305397848))) + ((subroutine20(input)) * (1.0))) + ((subroutine21(input)) * (1.0))) + ((subroutine22(input)) * (-1.0))) + ((subroutine23(input)) * (-1.0))) + ((subroutine24(input)) * (-1.0))) + ((subroutine25(input)) * (-1.0))) + ((subroutine26(input)) * (1.0))) + ((subroutine27(input)) * (1.0))) + ((subroutine28(input)) * (-1.0))) + ((subroutine29(input)) * (1.0))) + ((subroutine30(input)) * (1.0))) + ((subroutine31(input)) * (-1.0))) + ((subroutine32(input)) * (-1.0))) + ((subroutine33(input)) * (0.6094362384465288))) + ((subroutine34(input)) * (-1.0))) + ((subroutine35(input)) * (-1.0))) + ((subroutine36(input)) * (-1.0))) + ((subroutine37(input)) * (-1.0))) + ((subroutine38(input)) * (1.0))) + ((subroutine39(input)) * (-1.0))) + ((subroutine40(input)) * (-1.0))) + ((subroutine41(input)) * (-0.09110995461085558))) + ((subroutine42(input)) * (1.0))) + ((subroutine43(input)) * (-1.0))) + ((subroutine44(input)) * (-1.0))) + ((subroutine45(input)) * (1.0))) + ((subroutine46(input)) * (-1.0))) + ((subroutine47(input)) * (-1.0))) + ((subroutine48(input)) * (1.0))) + ((subroutine49(input)) * (-1.0))) + ((subroutine50(input)) * (1.0))) + ((subroutine51(input)) * (1.0))) + ((subroutine52(input)) * (1.0))) + ((subroutine53(input)) * (-1.0))) + ((subroutine54(input)) * (-1.0))) + ((subroutine55(input)) * (1.0))) + ((subroutine56(input)) * (-0.7462912211314059))) + ((subroutine57(input)) * (1.0))) + ((subroutine58(input)) * (1.0))) + ((subroutine59(input)) * (0.30992834998834695))) + ((subroutine60(input)) * (0.3055040572301017))) + ((subroutine61(input)) * (-1.0))) + ((subroutine62(input)) * (0.3085768481963811))) + ((subroutine63(input)) * (-0.7911073449007588))) + ((subroutine64(input)) * (-1.0))) + ((subroutine65(input)) * (1.0))) + ((subroutine66(input)) * (1.0))) + ((subroutine67(input)) * (-1.0))) + ((subroutine68(input)) * (-1.0))) + ((subroutine69(input)) * (-1.0))) + ((subroutine70(input)) * (-1.0))) + ((subroutine71(input)) * (-1.0))) + ((subroutine72(input)) * (-1.0))) + ((subroutine73(input)) * (-0.14103721419560955))) + ((subroutine74(input)) * (1.0))) + ((subroutine75(input)) * (-1.0))) + ((subroutine76(input)) * (1.0))) + ((subroutine77(input)) * (-1.0))) + ((subroutine78(input)) * (1.0))) + ((subroutine79(input)) * (0.22191198077314134))) + ((subroutine80(input)) * (-1.0))) + ((subroutine81(input)) * (0.013983223363096542))) + ((subroutine82(input)) * (-1.0))) + ((subroutine83(input)) * (-1.0))) + ((subroutine84(input)) * (1.0))) + ((subroutine85(input)) * (1.0))) + ((subroutine86(input)) * (1.0))) + ((subroutine87(input)) * (-1.0))) + ((subroutine88(input)) * (1.0))) + ((subroutine89(input)) * (-1.0))) + ((subroutine90(input)) * (1.0))) + ((subroutine91(input)) * (-1.0))) + ((subroutine92(input)) * (-1.0))) + ((subroutine93(input)) * (-1.0))) + ((subroutine94(input)) * (-1.0))) + ((subroutine95(input)) * (-0.211791145051885))) + ((subroutine96(input)) * (-1.0))) + ((subroutine97(input)) * (-1.0))) + ((subroutine98(input)) * (1.0))) + ((subroutine99(input)) * (1.0))) + ((subroutine100(input)) * (-0.6905526723987361))) + ((subroutine101(input)) * (1.0))) + ((subroutine102(input)) * (-1.0))) + ((subroutine103(input)) * (0.3095582313404144))) + ((subroutine104(input)) * (1.0))) + ((subroutine105(input)) * (1.0))) + ((subroutine106(input)) * (-1.0))) + ((subroutine107(input)) * (-0.9911041137017769))) + ((subroutine108(input)) * (1.0))) + ((subroutine109(input)) * (1.0))) + ((subroutine110(input)) * (0.5573463946794739))) + ((subroutine111(input)) * (1.0))) + ((subroutine112(input)) * (1.0))) + ((subroutine113(input)) * (-1.0))) + ((subroutine114(input)) * (-1.0))) + ((subroutine115(input)) * (-0.890567534257837))) + ((subroutine116(input)) * (-1.0))) + ((subroutine117(input)) * (1.0))) + ((subroutine118(input)) * (1.0))) + ((subroutine119(input)) * (0.4977523538602213))) + ((subroutine120(input)) * (1.0))) + ((subroutine121(input)) * (1.0))) + ((subroutine122(input)) * (-1.0))) + ((subroutine123(input)) * (-1.0))) + ((subroutine124(input)) * (1.0))) + ((subroutine125(input)) * (-1.0))) + ((subroutine126(input)) * (1.0))) + ((subroutine127(input)) * (-0.6990095119156354))) + ((subroutine128(input)) * (1.0))) + ((subroutine129(input)) * (0.30708202495824466))) + ((subroutine130(input)) * (-1.0))) + ((subroutine131(input)) * (-1.0))) + ((subroutine132(input)) * (0.009998620909062339))) + ((subroutine133(input)) * (1.0))) + ((subroutine134(input)) * (-0.244804573642611))) + ((subroutine135(input)) * (-0.7681893344042674))) + ((subroutine136(input)) * (-1.0))) + ((subroutine137(input)) * (1.0))) + ((subroutine138(input)) * (1.0))) + ((subroutine139(input)) * (1.0))) + ((subroutine140(input)) * (-1.0))) + ((subroutine141(input)) * (1.0))) + ((subroutine142(input)) * (-1.0))) + ((subroutine143(input)) * (1.0))) + ((subroutine144(input)) * (-1.0))) + ((subroutine145(input)) * (0.08662417095671313))) + ((subroutine146(input)) * (-1.0))) + ((subroutine147(input)) * (1.0))) + ((subroutine148(input)) * (1.0))) + ((subroutine149(input)) * (0.910042570034804))) + ((subroutine150(input)) * (-1.0))) + ((subroutine151(input)) * (-1.0))) + ((subroutine152(input)) * (1.0))) + ((subroutine153(input)) * (1.0))) + ((subroutine154(input)) * (1.0))) + ((subroutine155(input)) * (-1.0))) + ((subroutine156(input)) * (-0.5783899902201277))) + ((subroutine157(input)) * (1.0))) + ((subroutine158(input)) * (-1.0))) + ((subroutine159(input)) * (-1.0))) + ((subroutine160(input)) * (1.0))) + ((subroutine161(input)) * (1.0))) + ((subroutine162(input)) * (1.0))) + ((subroutine163(input)) * (-1.0))) + ((subroutine164(input)) * (1.0))) + ((subroutine165(input)) * (-1.0))) + ((subroutine166(input)) * (0.6097113437791482))) + ((subroutine167(input)) * (1.0))) + ((subroutine168(input)) * (0.4134790953962314))) + ((subroutine169(input)) * (1.0))) + ((subroutine170(input)) * (1.0))) + ((subroutine171(input)) * (1.0))) + ((subroutine172(input)) * (0.7488194390759126))) + ((subroutine173(input)) * (1.0))) + ((subroutine174(input)) * (1.0))) + ((subroutine175(input)) * (1.0))) + ((subroutine176(input)) * (-1.0))) + ((subroutine177(input)) * (-1.0))) + ((subroutine178(input)) * (-1.0))) + ((subroutine179(input)) * (1.0))) + ((subroutine180(input)) * (1.0))) + ((subroutine181(input)) * (-1.0))) + ((subroutine182(input)) * (-1.0))) + ((subroutine183(input)) * (-1.0))) + ((subroutine184(input)) * (1.0))) + ((subroutine185(input)) * (-1.0))) + ((subroutine186(input)) * (-1.0))) + ((subroutine187(input)) * (-0.8760501770977699))) + ((subroutine188(input)) * (1.0))) + ((subroutine189(input)) * (-0.09021766305150791))) + ((subroutine190(input)) * (1.0))) + ((subroutine191(input)) * (-0.8936353119251166))) + ((subroutine192(input)) * (-1.0))) + ((subroutine193(input)) * (0.8094391432994179))) + ((subroutine194(input)) * (1.0))) + ((subroutine195(input)) * (1.0))) + ((subroutine196(input)) * (0.3037247297579224))) + ((subroutine197(input)) * (1.0))) + ((subroutine198(input)) * (-1.0))) + ((subroutine199(input)) * (-1.0))) + ((subroutine200(input)) * (-1.0))) + ((subroutine201(input)) * (-1.0))) + ((subroutine202(input)) * (1.0))) + ((subroutine203(input)) * (1.0))) + ((subroutine204(input)) * (-0.590456841403034))) + ((subroutine205(input)) * (1.0))) + ((subroutine206(input)) * (-1.0))) + ((subroutine207(input)) * (-0.535947423496836))) + ((subroutine208(input)) * (1.0))) + ((subroutine209(input)) * (-1.0))) + ((subroutine210(input)) * (-1.0))) + ((subroutine211(input)) * (0.7796006323302915))) + ((subroutine212(input)) * (1.0))) + ((subroutine213(input)) * (1.0))) + ((subroutine214(input)) * (1.0))) + ((subroutine215(input)) * (-1.0))) + ((subroutine216(input)) * (-1.0))) + ((subroutine217(input)) * (1.0))) + ((subroutine218(input)) * (1.0))) + ((subroutine219(input)) * (-0.7611253536476497))) + ((subroutine220(input)) * (1.0))) + ((subroutine221(input)) * (1.0))) + ((subroutine222(input)) * (1.0))) + ((subroutine223(input)) * (1.0))) + ((subroutine224(input)) * (-0.5027115088896394))) + ((subroutine225(input)) * (-1.0))) + ((subroutine226(input)) * (-1.0))) + ((subroutine227(input)) * (1.0))) + ((subroutine228(input)) * (-1.0))) + ((subroutine229(input)) * (0.10928576275345314))) + ((subroutine230(input)) * (-1.0))) + ((subroutine231(input)) * (1.0))) + ((subroutine232(input)) * (-1.0))) + ((subroutine233(input)) * (1.0))) + ((subroutine234(input)) * (-1.0))) + ((subroutine235(input)) * (1.0))) + ((subroutine236(input)) * (-1.0))) + ((subroutine237(input)) * (1.0))) + ((subroutine238(input)) * (-1.0))) + ((subroutine239(input)) * (-0.8904457903523003))) + ((subroutine240(input)) * (0.5047218122097092))) + ((subroutine241(input)) * (-1.0))) + ((subroutine242(input)) * (-1.0))) + ((subroutine243(input)) * (1.0))) + ((subroutine244(input)) * (1.0))) + ((subroutine245(input)) * (-1.0))) + ((subroutine246(input)) * (-1.0))) + ((subroutine247(input)) * (1.0))) + ((subroutine248(input)) * (-1.0))) + ((subroutine249(input)) * (1.0))) + ((subroutine250(input)) * (-1.0))) + ((subroutine251(input)) * (-1.0))) + ((subroutine252(input)) * (1.0))) + ((subroutine253(input)) * (1.0))) + ((subroutine254(input)) * (-1.0))) + ((subroutine255(input)) * (1.0))) + ((subroutine256(input)) * (-1.0))) + ((subroutine257(input)) * (1.0))) + ((subroutine258(input)) * (1.0))) + ((subroutine259(input)) * (1.0))) + ((subroutine260(input)) * (-1.0))) + ((subroutine261(input)) * (-1.0))) + ((subroutine262(input)) * (1.0))) + ((subroutine263(input)) * (1.0))) + ((subroutine264(input)) * (-1.0))) + ((subroutine265(input)) * (1.0))) + ((subroutine266(input)) * (-1.0))) + ((subroutine267(input)) * (1.0))) + ((subroutine268(input)) * (-1.0))) + ((subroutine269(input)) * (-1.0))) + ((subroutine270(input)) * (-1.0))) + ((subroutine271(input)) * (-1.0))) + ((subroutine272(input)) * (1.0))) + ((subroutine273(input)) * (1.0))) + ((subroutine274(input)) * (-1.0))) + ((subroutine275(input)) * (-1.0))) + ((subroutine276(input)) * (-1.0))) + ((subroutine277(input)) * (-1.0))) + ((subroutine278(input)) * (0.43693568675791283))) + ((subroutine279(input)) * (1.0))) + ((subroutine280(input)) * (-1.0))) + ((subroutine281(input)) * (1.0))) + ((subroutine282(input)) * (1.0))) + ((subroutine283(input)) * (-1.0))) + ((subroutine284(input)) * (0.8946998321276514))) + ((subroutine285(input)) * (-1.0))) + ((subroutine286(input)) * (1.0))) + ((subroutine287(input)) * (-1.0))) + ((subroutine288(input)) * (0.8960013603736936))) + ((subroutine289(input)) * (-1.0))) + ((subroutine290(input)) * (1.0))) + ((subroutine291(input)) * (1.0))) + ((subroutine292(input)) * (-1.0))) + ((subroutine293(input)) * (1.0))) + ((subroutine294(input)) * (1.0))) + ((subroutine295(input)) * (-1.0))) + ((subroutine296(input)) * (1.0))) + ((subroutine297(input)) * (1.0))) + ((subroutine298(input)) * (-1.0))) + ((subroutine299(input)) * (1.0))) + ((subroutine300(input)) * (1.0))) + ((subroutine301(input)) * (1.0))) + ((subroutine302(input)) * (1.0))) + ((subroutine303(input)) * (1.0))) + ((subroutine304(input)) * (1.0))) + ((subroutine305(input)) * (1.0))) + ((subroutine306(input)) * (-1.0))) + ((subroutine307(input)) * (1.0))) + ((subroutine308(input)) * (-1.0))) + ((subroutine309(input)) * (-1.0))) + ((subroutine310(input)) * (-1.0))) + ((subroutine311(input)) * (1.0))) + ((subroutine312(input)) * (-1.0))) + ((subroutine313(input)) * (-1.0))) + ((subroutine314(input)) * (0.9097979959589821))) + ((subroutine315(input)) * (-1.0))) + ((subroutine316(input)) * (1.0))) + ((subroutine317(input)) * (-1.0))) + ((subroutine318(input)) * (-1.0))) + ((subroutine319(input)) * (1.0))) + ((subroutine320(input)) * (-1.0))) + ((subroutine321(input)) * (1.0))) + ((subroutine322(input)) * (-1.0))) + ((subroutine323(input)) * (1.0))) + ((subroutine324(input)) * (-1.0))) + ((subroutine325(input)) * (-1.0))) + ((subroutine326(input)) * (1.0))) + ((subroutine327(input)) * (-1.0))) + ((subroutine328(input)) * (1.0))) + ((subroutine329(input)) * (-1.0))) + ((subroutine330(input)) * (0.0015579459652599326))) + ((subroutine331(input)) * (-1.0))) + ((subroutine332(input)) * (-1.0))) + ((subroutine333(input)) * (-1.0))) + ((subroutine334(input)) * (1.0))) + ((subroutine335(input)) * (1.0))) + ((subroutine336(input)) * (1.0))) + ((subroutine337(input)) * (1.0))) + ((subroutine338(input)) * (1.0))) + ((subroutine339(input)) * (-1.0))) + ((subroutine340(input)) * (-1.0))) + ((subroutine341(input)) * (-1.0))) + ((subroutine342(input)) * (1.0))) + ((subroutine343(input)) * (1.0))) + ((subroutine344(input)) * (1.0))) + ((subroutine345(input)) * (-1.0))) + ((subroutine346(input)) * (-1.0))) + ((subroutine347(input)) * (-1.0))) + ((subroutine348(input)) * (1.0))) + ((subroutine349(input)) * (-1.0))) + ((subroutine350(input)) * (-0.5902043218988275))) + ((subroutine351(input)) * (-1.0))) + ((subroutine352(input)) * (-0.23385280321412014))) + ((subroutine353(input)) * (1.0))) + ((subroutine354(input)) * (1.0))) + ((subroutine355(input)) * (-0.6906210785020797))) + ((subroutine356(input)) * (-1.0))) + ((subroutine357(input)) * (-1.0))) + ((subroutine358(input)) * (1.0))) + ((subroutine359(input)) * (0.6058341826378459))) + ((subroutine360(input)) * (-1.0))) + ((subroutine361(input)) * (-1.0))) + ((subroutine362(input)) * (1.0))) + ((subroutine363(input)) * (1.0))) + ((subroutine364(input)) * (0.6096641564454135))) + ((subroutine365(input)) * (-0.3905747622645084))) + ((subroutine366(input)) * (-1.0))) + ((subroutine367(input)) * (1.0))) + ((subroutine368(input)) * (1.0))) + ((subroutine369(input)) * (1.0))) + ((subroutine370(input)) * (1.0))) + ((subroutine371(input)) * (-1.0))) + ((subroutine372(input)) * (1.0))) + ((subroutine373(input)) * (1.0))) + ((subroutine374(input)) * (-1.0))) + ((subroutine375(input)) * (-0.8848009996714605))) + ((subroutine376(input)) * (-0.27665774977422686))) + ((subroutine377(input)) * (1.0))) + ((subroutine378(input)) * (0.7432930702492193))) + ((subroutine379(input)) * (-1.0))) + ((subroutine380(input)) * (1.0))) + ((subroutine381(input)) * (-1.0))) + ((subroutine382(input)) * (1.0))) + ((subroutine383(input)) * (1.0))) + ((subroutine384(input)) * (-1.0))) + ((subroutine385(input)) * (0.6092521283212697))) + ((subroutine386(input)) * (-0.3475181364619644))) + ((subroutine387(input)) * (1.0))) + ((subroutine388(input)) * (1.0))) + ((subroutine389(input)) * (-1.0))) + ((subroutine390(input)) * (1.0))) + ((subroutine391(input)) * (-1.0))) + ((subroutine392(input)) * (0.5973410167573814))) + ((subroutine393(input)) * (1.0))) + ((subroutine394(input)) * (-1.0))) + ((subroutine395(input)) * (1.0))) + ((subroutine396(input)) * (1.0))) + ((subroutine397(input)) * (1.0))) + ((subroutine398(input)) * (-1.0))) + ((subroutine399(input)) * (-1.0))) + ((subroutine400(input)) * (1.0))) + ((subroutine401(input)) * (1.0))) + ((subroutine402(input)) * (-1.0))) + ((subroutine403(input)) * (1.0))) + ((subroutine404(input)) * (1.0))) + ((subroutine405(input)) * (-1.0))) + ((subroutine406(input)) * (-0.1720053671931119))) + ((subroutine407(input)) * (1.0))) + ((subroutine408(input)) * (-1.0))) + ((subroutine409(input)) * (-1.0))) + ((subroutine410(input)) * (-1.0))) + ((subroutine411(input)) * (1.0))) + ((subroutine412(input)) * (-1.0))) + ((subroutine413(input)) * (-0.3901705455522073))) + ((subroutine414(input)) * (-1.0))) + ((subroutine415(input)) * (1.0))) + ((subroutine416(input)) * (-1.0))) + ((subroutine417(input)) * (-1.0))) + ((subroutine418(input)) * (-1.0))) + ((subroutine419(input)) * (-1.0))) + ((subroutine420(input)) * (1.0))) + ((subroutine421(input)) * (-0.26319002085846327))) + ((subroutine422(input)) * (-0.5902009143723834))) + ((subroutine423(input)) * (0.40805234522338374))) + ((subroutine424(input)) * (-0.8905769149301275))) + ((subroutine425(input)) * (1.0))) + ((subroutine426(input)) * (1.0))) + ((subroutine427(input)) * (1.0))) + ((subroutine428(input)) * (1.0))) + ((subroutine429(input)) * (1.0))) + ((subroutine430(input)) * (-1.0))) + ((subroutine431(input)) * (1.0))) + ((subroutine432(input)) * (-1.0))) + ((subroutine433(input)) * (1.0))) + ((subroutine434(input)) * (-1.0))) + ((subroutine435(input)) * (1.0))) + ((subroutine436(input)) * (1.0))) + ((subroutine437(input)) * (1.0))) + ((subroutine438(input)) * (-1.0))) + ((subroutine439(input)) * (1.0))) + ((subroutine440(input)) * (1.0))) + ((subroutine441(input)) * (-1.0))) + ((subroutine442(input)) * (1.0))) + ((subroutine443(input)) * (-1.0))) + ((subroutine444(input)) * (1.0))) + ((subroutine445(input)) * (-1.0))) + ((subroutine446(input)) * (1.0))) + ((subroutine447(input)) * (0.8034672289583291))) + ((subroutine448(input)) * (-1.0))) + ((subroutine449(input)) * (-1.0))) + ((subroutine450(input)) * (-0.29060524231338647));
    }
    public static double subroutine0(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((15.0234) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.614) - (input[4]), 2))) + (Math.pow((5.304) - (input[5]), 2))) + (Math.pow((97.3) - (input[6]), 2))) + (Math.pow((2.1007) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((349.48) - (input[11]), 2))) + (Math.pow((24.91) - (input[12]), 2))));
    }
    public static double subroutine1(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((5.44114) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.713) - (input[4]), 2))) + (Math.pow((6.655) - (input[5]), 2))) + (Math.pow((98.2) - (input[6]), 2))) + (Math.pow((2.3552) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((355.29) - (input[11]), 2))) + (Math.pow((17.73) - (input[12]), 2))));
    }
    public static double subroutine2(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((1.00245) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((8.14) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.538) - (input[4]), 2))) + (Math.pow((6.674) - (input[5]), 2))) + (Math.pow((87.3) - (input[6]), 2))) + (Math.pow((4.239) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((307.0) - (input[9]), 2))) + (Math.pow((21.0) - (input[10]), 2))) + (Math.pow((380.23) - (input[11]), 2))) + (Math.pow((11.98) - (input[12]), 2))));
    }
    public static double subroutine3(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.00632) - (input[0]), 2)) + (Math.pow((18.0) - (input[1]), 2))) + (Math.pow((2.31) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.538) - (input[4]), 2))) + (Math.pow((6.575) - (input[5]), 2))) + (Math.pow((65.2) - (input[6]), 2))) + (Math.pow((4.09) - (input[7]), 2))) + (Math.pow((1.0) - (input[8]), 2))) + (Math.pow((296.0) - (input[9]), 2))) + (Math.pow((15.3) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((4.98) - (input[12]), 2))));
    }
    public static double subroutine4(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.26169) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((9.9) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.544) - (input[4]), 2))) + (Math.pow((6.023) - (input[5]), 2))) + (Math.pow((90.4) - (input[6]), 2))) + (Math.pow((2.834) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((304.0) - (input[9]), 2))) + (Math.pow((18.4) - (input[10]), 2))) + (Math.pow((396.3) - (input[11]), 2))) + (Math.pow((11.72) - (input[12]), 2))));
    }
    public static double subroutine5(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.05083) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((5.19) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.515) - (input[4]), 2))) + (Math.pow((6.316) - (input[5]), 2))) + (Math.pow((38.1) - (input[6]), 2))) + (Math.pow((6.4584) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((224.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((389.71) - (input[11]), 2))) + (Math.pow((5.68) - (input[12]), 2))));
    }
    public static double subroutine6(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.15445) - (input[0]), 2)) + (Math.pow((25.0) - (input[1]), 2))) + (Math.pow((5.13) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.453) - (input[4]), 2))) + (Math.pow((6.145) - (input[5]), 2))) + (Math.pow((29.2) - (input[6]), 2))) + (Math.pow((7.8148) - (input[7]), 2))) + (Math.pow((8.0) - (input[8]), 2))) + (Math.pow((284.0) - (input[9]), 2))) + (Math.pow((19.7) - (input[10]), 2))) + (Math.pow((390.68) - (input[11]), 2))) + (Math.pow((6.86) - (input[12]), 2))));
    }
    public static double subroutine7(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((3.53501) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((19.58) - (input[2]), 2))) + (Math.pow((1.0) - (input[3]), 2))) + (Math.pow((0.871) - (input[4]), 2))) + (Math.pow((6.152) - (input[5]), 2))) + (Math.pow((82.6) - (input[6]), 2))) + (Math.pow((1.7455) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((403.0) - (input[9]), 2))) + (Math.pow((14.7) - (input[10]), 2))) + (Math.pow((88.01) - (input[11]), 2))) + (Math.pow((15.02) - (input[12]), 2))));
    }
    public static double subroutine8(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((3.67822) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.77) - (input[4]), 2))) + (Math.pow((5.362) - (input[5]), 2))) + (Math.pow((96.2) - (input[6]), 2))) + (Math.pow((2.1036) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((380.79) - (input[11]), 2))) + (Math.pow((10.19) - (input[12]), 2))));
    }
    public static double subroutine9(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((18.4982) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.668) - (input[4]), 2))) + (Math.pow((4.138) - (input[5]), 2))) + (Math.pow((100.0) - (input[6]), 2))) + (Math.pow((1.137) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((37.97) - (input[12]), 2))));
    }
    public static double subroutine10(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((1.49632) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((19.58) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.871) - (input[4]), 2))) + (Math.pow((5.404) - (input[5]), 2))) + (Math.pow((100.0) - (input[6]), 2))) + (Math.pow((1.5916) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((403.0) - (input[9]), 2))) + (Math.pow((14.7) - (input[10]), 2))) + (Math.pow((341.6) - (input[11]), 2))) + (Math.pow((13.28) - (input[12]), 2))));
    }
    public static double subroutine11(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.14455) - (input[0]), 2)) + (Math.pow((12.5) - (input[1]), 2))) + (Math.pow((7.87) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.524) - (input[4]), 2))) + (Math.pow((6.172) - (input[5]), 2))) + (Math.pow((96.1) - (input[6]), 2))) + (Math.pow((5.9505) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((311.0) - (input[9]), 2))) + (Math.pow((15.2) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((19.15) - (input[12]), 2))));
    }
    public static double subroutine12(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.55007) - (input[0]), 2)) + (Math.pow((20.0) - (input[1]), 2))) + (Math.pow((3.97) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.647) - (input[4]), 2))) + (Math.pow((7.206) - (input[5]), 2))) + (Math.pow((91.6) - (input[6]), 2))) + (Math.pow((1.9301) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((264.0) - (input[9]), 2))) + (Math.pow((13.0) - (input[10]), 2))) + (Math.pow((387.89) - (input[11]), 2))) + (Math.pow((8.1) - (input[12]), 2))));
    }
    public static double subroutine13(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.15086) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((27.74) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.609) - (input[4]), 2))) + (Math.pow((5.454) - (input[5]), 2))) + (Math.pow((92.7) - (input[6]), 2))) + (Math.pow((1.8209) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((711.0) - (input[9]), 2))) + (Math.pow((20.1) - (input[10]), 2))) + (Math.pow((395.09) - (input[11]), 2))) + (Math.pow((18.06) - (input[12]), 2))));
    }
    public static double subroutine14(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((8.79212) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.584) - (input[4]), 2))) + (Math.pow((5.565) - (input[5]), 2))) + (Math.pow((70.6) - (input[6]), 2))) + (Math.pow((2.0635) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((3.65) - (input[11]), 2))) + (Math.pow((17.16) - (input[12]), 2))));
    }
    public static double subroutine15(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((10.0623) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.584) - (input[4]), 2))) + (Math.pow((6.833) - (input[5]), 2))) + (Math.pow((94.3) - (input[6]), 2))) + (Math.pow((2.0882) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((81.33) - (input[11]), 2))) + (Math.pow((19.69) - (input[12]), 2))));
    }
    public static double subroutine16(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((14.0507) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.597) - (input[4]), 2))) + (Math.pow((6.657) - (input[5]), 2))) + (Math.pow((100.0) - (input[6]), 2))) + (Math.pow((1.5275) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((35.05) - (input[11]), 2))) + (Math.pow((21.22) - (input[12]), 2))));
    }
    public static double subroutine17(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((4.22239) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((1.0) - (input[3]), 2))) + (Math.pow((0.77) - (input[4]), 2))) + (Math.pow((5.803) - (input[5]), 2))) + (Math.pow((89.0) - (input[6]), 2))) + (Math.pow((1.9047) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((353.04) - (input[11]), 2))) + (Math.pow((14.64) - (input[12]), 2))));
    }
    public static double subroutine18(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.01778) - (input[0]), 2)) + (Math.pow((95.0) - (input[1]), 2))) + (Math.pow((1.47) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.403) - (input[4]), 2))) + (Math.pow((7.135) - (input[5]), 2))) + (Math.pow((13.9) - (input[6]), 2))) + (Math.pow((7.6534) - (input[7]), 2))) + (Math.pow((3.0) - (input[8]), 2))) + (Math.pow((402.0) - (input[9]), 2))) + (Math.pow((17.0) - (input[10]), 2))) + (Math.pow((384.3) - (input[11]), 2))) + (Math.pow((4.45) - (input[12]), 2))));
    }
    public static double subroutine19(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((14.3337) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.614) - (input[4]), 2))) + (Math.pow((6.229) - (input[5]), 2))) + (Math.pow((88.0) - (input[6]), 2))) + (Math.pow((1.9512) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((383.32) - (input[11]), 2))) + (Math.pow((13.11) - (input[12]), 2))));
    }
    public static double subroutine20(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.05644) - (input[0]), 2)) + (Math.pow((40.0) - (input[1]), 2))) + (Math.pow((6.41) - (input[2]), 2))) + (Math.pow((1.0) - (input[3]), 2))) + (Math.pow((0.447) - (input[4]), 2))) + (Math.pow((6.758) - (input[5]), 2))) + (Math.pow((32.9) - (input[6]), 2))) + (Math.pow((4.0776) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((254.0) - (input[9]), 2))) + (Math.pow((17.6) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((3.53) - (input[12]), 2))));
    }
    public static double subroutine21(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.03584) - (input[0]), 2)) + (Math.pow((80.0) - (input[1]), 2))) + (Math.pow((3.37) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.398) - (input[4]), 2))) + (Math.pow((6.29) - (input[5]), 2))) + (Math.pow((17.8) - (input[6]), 2))) + (Math.pow((6.6115) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((337.0) - (input[9]), 2))) + (Math.pow((16.1) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((4.67) - (input[12]), 2))));
    }
    public static double subroutine22(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.35114) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((7.38) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.493) - (input[4]), 2))) + (Math.pow((6.041) - (input[5]), 2))) + (Math.pow((49.9) - (input[6]), 2))) + (Math.pow((4.7211) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((287.0) - (input[9]), 2))) + (Math.pow((19.6) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((7.7) - (input[12]), 2))));
    }
    public static double subroutine23(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((1.15172) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((8.14) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.538) - (input[4]), 2))) + (Math.pow((5.701) - (input[5]), 2))) + (Math.pow((95.0) - (input[6]), 2))) + (Math.pow((3.7872) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((307.0) - (input[9]), 2))) + (Math.pow((21.0) - (input[10]), 2))) + (Math.pow((358.77) - (input[11]), 2))) + (Math.pow((18.35) - (input[12]), 2))));
    }
    public static double subroutine24(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((9.92485) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.74) - (input[4]), 2))) + (Math.pow((6.251) - (input[5]), 2))) + (Math.pow((96.6) - (input[6]), 2))) + (Math.pow((2.198) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((388.52) - (input[11]), 2))) + (Math.pow((16.44) - (input[12]), 2))));
    }
    public static double subroutine25(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((25.9406) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.679) - (input[4]), 2))) + (Math.pow((5.304) - (input[5]), 2))) + (Math.pow((89.1) - (input[6]), 2))) + (Math.pow((1.6475) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((127.36) - (input[11]), 2))) + (Math.pow((26.64) - (input[12]), 2))));
    }
    public static double subroutine26(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((6.53876) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((1.0) - (input[3]), 2))) + (Math.pow((0.631) - (input[4]), 2))) + (Math.pow((7.016) - (input[5]), 2))) + (Math.pow((97.5) - (input[6]), 2))) + (Math.pow((1.2024) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((392.05) - (input[11]), 2))) + (Math.pow((2.96) - (input[12]), 2))));
    }
    public static double subroutine27(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.17899) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((9.69) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.585) - (input[4]), 2))) + (Math.pow((5.67) - (input[5]), 2))) + (Math.pow((28.8) - (input[6]), 2))) + (Math.pow((2.7986) - (input[7]), 2))) + (Math.pow((6.0) - (input[8]), 2))) + (Math.pow((391.0) - (input[9]), 2))) + (Math.pow((19.2) - (input[10]), 2))) + (Math.pow((393.29) - (input[11]), 2))) + (Math.pow((17.6) - (input[12]), 2))));
    }
    public static double subroutine28(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((3.32105) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((19.58) - (input[2]), 2))) + (Math.pow((1.0) - (input[3]), 2))) + (Math.pow((0.871) - (input[4]), 2))) + (Math.pow((5.403) - (input[5]), 2))) + (Math.pow((100.0) - (input[6]), 2))) + (Math.pow((1.3216) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((403.0) - (input[9]), 2))) + (Math.pow((14.7) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((26.82) - (input[12]), 2))));
    }
    public static double subroutine29(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.33983) - (input[0]), 2)) + (Math.pow((22.0) - (input[1]), 2))) + (Math.pow((5.86) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.431) - (input[4]), 2))) + (Math.pow((6.108) - (input[5]), 2))) + (Math.pow((34.9) - (input[6]), 2))) + (Math.pow((8.0555) - (input[7]), 2))) + (Math.pow((7.0) - (input[8]), 2))) + (Math.pow((330.0) - (input[9]), 2))) + (Math.pow((19.1) - (input[10]), 2))) + (Math.pow((390.18) - (input[11]), 2))) + (Math.pow((9.16) - (input[12]), 2))));
    }
    public static double subroutine30(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.02875) - (input[0]), 2)) + (Math.pow((28.0) - (input[1]), 2))) + (Math.pow((15.04) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.464) - (input[4]), 2))) + (Math.pow((6.211) - (input[5]), 2))) + (Math.pow((28.9) - (input[6]), 2))) + (Math.pow((3.6659) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((270.0) - (input[9]), 2))) + (Math.pow((18.2) - (input[10]), 2))) + (Math.pow((396.33) - (input[11]), 2))) + (Math.pow((6.21) - (input[12]), 2))));
    }
    public static double subroutine31(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((22.5971) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.7) - (input[4]), 2))) + (Math.pow((5.0) - (input[5]), 2))) + (Math.pow((89.5) - (input[6]), 2))) + (Math.pow((1.5184) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((31.99) - (input[12]), 2))));
    }
    public static double subroutine32(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((45.7461) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.693) - (input[4]), 2))) + (Math.pow((4.519) - (input[5]), 2))) + (Math.pow((100.0) - (input[6]), 2))) + (Math.pow((1.6582) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((88.27) - (input[11]), 2))) + (Math.pow((36.98) - (input[12]), 2))));
    }
    public static double subroutine33(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.05789) - (input[0]), 2)) + (Math.pow((12.5) - (input[1]), 2))) + (Math.pow((6.07) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.409) - (input[4]), 2))) + (Math.pow((5.878) - (input[5]), 2))) + (Math.pow((21.4) - (input[6]), 2))) + (Math.pow((6.498) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((345.0) - (input[9]), 2))) + (Math.pow((18.9) - (input[10]), 2))) + (Math.pow((396.21) - (input[11]), 2))) + (Math.pow((8.1) - (input[12]), 2))));
    }
    public static double subroutine34(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((1.12658) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((19.58) - (input[2]), 2))) + (Math.pow((1.0) - (input[3]), 2))) + (Math.pow((0.871) - (input[4]), 2))) + (Math.pow((5.012) - (input[5]), 2))) + (Math.pow((88.0) - (input[6]), 2))) + (Math.pow((1.6102) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((403.0) - (input[9]), 2))) + (Math.pow((14.7) - (input[10]), 2))) + (Math.pow((343.28) - (input[11]), 2))) + (Math.pow((12.12) - (input[12]), 2))));
    }
    public static double subroutine35(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((11.8123) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.718) - (input[4]), 2))) + (Math.pow((6.824) - (input[5]), 2))) + (Math.pow((76.5) - (input[6]), 2))) + (Math.pow((1.794) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((48.45) - (input[11]), 2))) + (Math.pow((22.74) - (input[12]), 2))));
    }
    public static double subroutine36(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((4.81213) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.713) - (input[4]), 2))) + (Math.pow((6.701) - (input[5]), 2))) + (Math.pow((90.0) - (input[6]), 2))) + (Math.pow((2.5975) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((255.23) - (input[11]), 2))) + (Math.pow((16.42) - (input[12]), 2))));
    }
    public static double subroutine37(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.55778) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((21.89) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.624) - (input[4]), 2))) + (Math.pow((6.335) - (input[5]), 2))) + (Math.pow((98.2) - (input[6]), 2))) + (Math.pow((2.1107) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((437.0) - (input[9]), 2))) + (Math.pow((21.2) - (input[10]), 2))) + (Math.pow((394.67) - (input[11]), 2))) + (Math.pow((16.96) - (input[12]), 2))));
    }
    public static double subroutine38(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.08187) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((2.89) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.445) - (input[4]), 2))) + (Math.pow((7.82) - (input[5]), 2))) + (Math.pow((36.9) - (input[6]), 2))) + (Math.pow((3.4952) - (input[7]), 2))) + (Math.pow((2.0) - (input[8]), 2))) + (Math.pow((276.0) - (input[9]), 2))) + (Math.pow((18.0) - (input[10]), 2))) + (Math.pow((393.53) - (input[11]), 2))) + (Math.pow((3.57) - (input[12]), 2))));
    }
    public static double subroutine39(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((7.67202) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.693) - (input[4]), 2))) + (Math.pow((5.747) - (input[5]), 2))) + (Math.pow((98.9) - (input[6]), 2))) + (Math.pow((1.6334) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((393.1) - (input[11]), 2))) + (Math.pow((19.92) - (input[12]), 2))));
    }
    public static double subroutine40(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.07244) - (input[0]), 2)) + (Math.pow((60.0) - (input[1]), 2))) + (Math.pow((1.69) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.411) - (input[4]), 2))) + (Math.pow((5.884) - (input[5]), 2))) + (Math.pow((18.5) - (input[6]), 2))) + (Math.pow((10.7103) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((411.0) - (input[9]), 2))) + (Math.pow((18.3) - (input[10]), 2))) + (Math.pow((392.33) - (input[11]), 2))) + (Math.pow((7.79) - (input[12]), 2))));
    }
    public static double subroutine41(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.03961) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((5.19) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.515) - (input[4]), 2))) + (Math.pow((6.037) - (input[5]), 2))) + (Math.pow((34.5) - (input[6]), 2))) + (Math.pow((5.9853) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((224.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((8.01) - (input[12]), 2))));
    }
    public static double subroutine42(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((1.46336) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((19.58) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.605) - (input[4]), 2))) + (Math.pow((7.489) - (input[5]), 2))) + (Math.pow((90.8) - (input[6]), 2))) + (Math.pow((1.9709) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((403.0) - (input[9]), 2))) + (Math.pow((14.7) - (input[10]), 2))) + (Math.pow((374.43) - (input[11]), 2))) + (Math.pow((1.73) - (input[12]), 2))));
    }
    public static double subroutine43(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((10.6718) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.74) - (input[4]), 2))) + (Math.pow((6.459) - (input[5]), 2))) + (Math.pow((94.8) - (input[6]), 2))) + (Math.pow((1.9879) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((43.06) - (input[11]), 2))) + (Math.pow((23.98) - (input[12]), 2))));
    }
    public static double subroutine44(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.32264) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((21.89) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.624) - (input[4]), 2))) + (Math.pow((5.942) - (input[5]), 2))) + (Math.pow((93.5) - (input[6]), 2))) + (Math.pow((1.9669) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((437.0) - (input[9]), 2))) + (Math.pow((21.2) - (input[10]), 2))) + (Math.pow((378.25) - (input[11]), 2))) + (Math.pow((16.9) - (input[12]), 2))));
    }
    public static double subroutine45(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.04011) - (input[0]), 2)) + (Math.pow((80.0) - (input[1]), 2))) + (Math.pow((1.52) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.404) - (input[4]), 2))) + (Math.pow((7.287) - (input[5]), 2))) + (Math.pow((34.1) - (input[6]), 2))) + (Math.pow((7.309) - (input[7]), 2))) + (Math.pow((2.0) - (input[8]), 2))) + (Math.pow((329.0) - (input[9]), 2))) + (Math.pow((12.6) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((4.08) - (input[12]), 2))));
    }
    public static double subroutine46(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.95577) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((8.14) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.538) - (input[4]), 2))) + (Math.pow((6.047) - (input[5]), 2))) + (Math.pow((88.8) - (input[6]), 2))) + (Math.pow((4.4534) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((307.0) - (input[9]), 2))) + (Math.pow((21.0) - (input[10]), 2))) + (Math.pow((306.38) - (input[11]), 2))) + (Math.pow((17.28) - (input[12]), 2))));
    }
    public static double subroutine47(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((20.0849) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.7) - (input[4]), 2))) + (Math.pow((4.368) - (input[5]), 2))) + (Math.pow((91.2) - (input[6]), 2))) + (Math.pow((1.4395) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((285.83) - (input[11]), 2))) + (Math.pow((30.63) - (input[12]), 2))));
    }
    public static double subroutine48(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.02899) - (input[0]), 2)) + (Math.pow((40.0) - (input[1]), 2))) + (Math.pow((1.25) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.429) - (input[4]), 2))) + (Math.pow((6.939) - (input[5]), 2))) + (Math.pow((34.5) - (input[6]), 2))) + (Math.pow((8.7921) - (input[7]), 2))) + (Math.pow((1.0) - (input[8]), 2))) + (Math.pow((335.0) - (input[9]), 2))) + (Math.pow((19.7) - (input[10]), 2))) + (Math.pow((389.85) - (input[11]), 2))) + (Math.pow((5.89) - (input[12]), 2))));
    }
    public static double subroutine49(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.22438) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((9.69) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.585) - (input[4]), 2))) + (Math.pow((6.027) - (input[5]), 2))) + (Math.pow((79.7) - (input[6]), 2))) + (Math.pow((2.4982) - (input[7]), 2))) + (Math.pow((6.0) - (input[8]), 2))) + (Math.pow((391.0) - (input[9]), 2))) + (Math.pow((19.2) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((14.33) - (input[12]), 2))));
    }
    public static double subroutine50(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.65665) - (input[0]), 2)) + (Math.pow((20.0) - (input[1]), 2))) + (Math.pow((3.97) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.647) - (input[4]), 2))) + (Math.pow((6.842) - (input[5]), 2))) + (Math.pow((100.0) - (input[6]), 2))) + (Math.pow((2.0107) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((264.0) - (input[9]), 2))) + (Math.pow((13.0) - (input[10]), 2))) + (Math.pow((391.93) - (input[11]), 2))) + (Math.pow((6.9) - (input[12]), 2))));
    }
    public static double subroutine51(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.28955) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((10.59) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.489) - (input[4]), 2))) + (Math.pow((5.412) - (input[5]), 2))) + (Math.pow((9.8) - (input[6]), 2))) + (Math.pow((3.5875) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((277.0) - (input[9]), 2))) + (Math.pow((18.6) - (input[10]), 2))) + (Math.pow((348.93) - (input[11]), 2))) + (Math.pow((29.55) - (input[12]), 2))));
    }
    public static double subroutine52(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((1.83377) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((19.58) - (input[2]), 2))) + (Math.pow((1.0) - (input[3]), 2))) + (Math.pow((0.605) - (input[4]), 2))) + (Math.pow((7.802) - (input[5]), 2))) + (Math.pow((98.2) - (input[6]), 2))) + (Math.pow((2.0407) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((403.0) - (input[9]), 2))) + (Math.pow((14.7) - (input[10]), 2))) + (Math.pow((389.61) - (input[11]), 2))) + (Math.pow((1.92) - (input[12]), 2))));
    }
    public static double subroutine53(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.1712) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((8.56) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.52) - (input[4]), 2))) + (Math.pow((5.836) - (input[5]), 2))) + (Math.pow((91.9) - (input[6]), 2))) + (Math.pow((2.211) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((384.0) - (input[9]), 2))) + (Math.pow((20.9) - (input[10]), 2))) + (Math.pow((395.67) - (input[11]), 2))) + (Math.pow((18.66) - (input[12]), 2))));
    }
    public static double subroutine54(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((6.44405) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.584) - (input[4]), 2))) + (Math.pow((6.425) - (input[5]), 2))) + (Math.pow((74.8) - (input[6]), 2))) + (Math.pow((2.2004) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((97.95) - (input[11]), 2))) + (Math.pow((12.03) - (input[12]), 2))));
    }
    public static double subroutine55(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.0795) - (input[0]), 2)) + (Math.pow((60.0) - (input[1]), 2))) + (Math.pow((1.69) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.411) - (input[4]), 2))) + (Math.pow((6.579) - (input[5]), 2))) + (Math.pow((35.9) - (input[6]), 2))) + (Math.pow((10.7103) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((411.0) - (input[9]), 2))) + (Math.pow((18.3) - (input[10]), 2))) + (Math.pow((370.78) - (input[11]), 2))) + (Math.pow((5.49) - (input[12]), 2))));
    }
    public static double subroutine56(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.13117) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((8.56) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.52) - (input[4]), 2))) + (Math.pow((6.127) - (input[5]), 2))) + (Math.pow((85.2) - (input[6]), 2))) + (Math.pow((2.1224) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((384.0) - (input[9]), 2))) + (Math.pow((20.9) - (input[10]), 2))) + (Math.pow((387.69) - (input[11]), 2))) + (Math.pow((14.09) - (input[12]), 2))));
    }
    public static double subroutine57(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.08664) - (input[0]), 2)) + (Math.pow((45.0) - (input[1]), 2))) + (Math.pow((3.44) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.437) - (input[4]), 2))) + (Math.pow((7.178) - (input[5]), 2))) + (Math.pow((26.3) - (input[6]), 2))) + (Math.pow((6.4798) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((398.0) - (input[9]), 2))) + (Math.pow((15.2) - (input[10]), 2))) + (Math.pow((390.49) - (input[11]), 2))) + (Math.pow((2.87) - (input[12]), 2))));
    }
    public static double subroutine58(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((1.22358) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((19.58) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.605) - (input[4]), 2))) + (Math.pow((6.943) - (input[5]), 2))) + (Math.pow((97.4) - (input[6]), 2))) + (Math.pow((1.8773) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((403.0) - (input[9]), 2))) + (Math.pow((14.7) - (input[10]), 2))) + (Math.pow((363.43) - (input[11]), 2))) + (Math.pow((4.59) - (input[12]), 2))));
    }
    public static double subroutine59(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.40771) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((6.2) - (input[2]), 2))) + (Math.pow((1.0) - (input[3]), 2))) + (Math.pow((0.507) - (input[4]), 2))) + (Math.pow((6.164) - (input[5]), 2))) + (Math.pow((91.3) - (input[6]), 2))) + (Math.pow((3.048) - (input[7]), 2))) + (Math.pow((8.0) - (input[8]), 2))) + (Math.pow((307.0) - (input[9]), 2))) + (Math.pow((17.4) - (input[10]), 2))) + (Math.pow((395.24) - (input[11]), 2))) + (Math.pow((21.46) - (input[12]), 2))));
    }
    public static double subroutine60(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.17446) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((10.59) - (input[2]), 2))) + (Math.pow((1.0) - (input[3]), 2))) + (Math.pow((0.489) - (input[4]), 2))) + (Math.pow((5.96) - (input[5]), 2))) + (Math.pow((92.1) - (input[6]), 2))) + (Math.pow((3.8771) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((277.0) - (input[9]), 2))) + (Math.pow((18.6) - (input[10]), 2))) + (Math.pow((393.25) - (input[11]), 2))) + (Math.pow((17.27) - (input[12]), 2))));
    }
    public static double subroutine61(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.2909) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((21.89) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.624) - (input[4]), 2))) + (Math.pow((6.174) - (input[5]), 2))) + (Math.pow((93.6) - (input[6]), 2))) + (Math.pow((1.6119) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((437.0) - (input[9]), 2))) + (Math.pow((21.2) - (input[10]), 2))) + (Math.pow((388.08) - (input[11]), 2))) + (Math.pow((24.16) - (input[12]), 2))));
    }
    public static double subroutine62(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.15876) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((10.81) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.413) - (input[4]), 2))) + (Math.pow((5.961) - (input[5]), 2))) + (Math.pow((17.5) - (input[6]), 2))) + (Math.pow((5.2873) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((305.0) - (input[9]), 2))) + (Math.pow((19.2) - (input[10]), 2))) + (Math.pow((376.94) - (input[11]), 2))) + (Math.pow((9.88) - (input[12]), 2))));
    }
    public static double subroutine63(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.13058) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((10.01) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.547) - (input[4]), 2))) + (Math.pow((5.872) - (input[5]), 2))) + (Math.pow((73.1) - (input[6]), 2))) + (Math.pow((2.4775) - (input[7]), 2))) + (Math.pow((6.0) - (input[8]), 2))) + (Math.pow((432.0) - (input[9]), 2))) + (Math.pow((17.8) - (input[10]), 2))) + (Math.pow((338.63) - (input[11]), 2))) + (Math.pow((15.37) - (input[12]), 2))));
    }
    public static double subroutine64(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.10153) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((12.83) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.437) - (input[4]), 2))) + (Math.pow((6.279) - (input[5]), 2))) + (Math.pow((74.5) - (input[6]), 2))) + (Math.pow((4.0522) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((398.0) - (input[9]), 2))) + (Math.pow((18.7) - (input[10]), 2))) + (Math.pow((373.66) - (input[11]), 2))) + (Math.pow((11.97) - (input[12]), 2))));
    }
    public static double subroutine65(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.02729) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((7.07) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.469) - (input[4]), 2))) + (Math.pow((7.185) - (input[5]), 2))) + (Math.pow((61.1) - (input[6]), 2))) + (Math.pow((4.9671) - (input[7]), 2))) + (Math.pow((2.0) - (input[8]), 2))) + (Math.pow((242.0) - (input[9]), 2))) + (Math.pow((17.8) - (input[10]), 2))) + (Math.pow((392.83) - (input[11]), 2))) + (Math.pow((4.03) - (input[12]), 2))));
    }
    public static double subroutine66(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.01501) - (input[0]), 2)) + (Math.pow((80.0) - (input[1]), 2))) + (Math.pow((2.01) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.435) - (input[4]), 2))) + (Math.pow((6.635) - (input[5]), 2))) + (Math.pow((29.7) - (input[6]), 2))) + (Math.pow((8.344) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((280.0) - (input[9]), 2))) + (Math.pow((17.0) - (input[10]), 2))) + (Math.pow((390.94) - (input[11]), 2))) + (Math.pow((5.99) - (input[12]), 2))));
    }
    public static double subroutine67(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((13.9134) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.713) - (input[4]), 2))) + (Math.pow((6.208) - (input[5]), 2))) + (Math.pow((95.0) - (input[6]), 2))) + (Math.pow((2.2222) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((100.63) - (input[11]), 2))) + (Math.pow((15.17) - (input[12]), 2))));
    }
    public static double subroutine68(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((5.58107) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.713) - (input[4]), 2))) + (Math.pow((6.436) - (input[5]), 2))) + (Math.pow((87.9) - (input[6]), 2))) + (Math.pow((2.3158) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((100.19) - (input[11]), 2))) + (Math.pow((16.22) - (input[12]), 2))));
    }
    public static double subroutine69(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((8.71675) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.693) - (input[4]), 2))) + (Math.pow((6.471) - (input[5]), 2))) + (Math.pow((98.8) - (input[6]), 2))) + (Math.pow((1.7257) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((391.98) - (input[11]), 2))) + (Math.pow((17.12) - (input[12]), 2))));
    }
    public static double subroutine70(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((1.20742) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((19.58) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.605) - (input[4]), 2))) + (Math.pow((5.875) - (input[5]), 2))) + (Math.pow((94.6) - (input[6]), 2))) + (Math.pow((2.4259) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((403.0) - (input[9]), 2))) + (Math.pow((14.7) - (input[10]), 2))) + (Math.pow((292.29) - (input[11]), 2))) + (Math.pow((14.43) - (input[12]), 2))));
    }
    public static double subroutine71(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((13.0751) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.58) - (input[4]), 2))) + (Math.pow((5.713) - (input[5]), 2))) + (Math.pow((56.7) - (input[6]), 2))) + (Math.pow((2.8237) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((14.76) - (input[12]), 2))));
    }
    public static double subroutine72(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.13262) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((8.56) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.52) - (input[4]), 2))) + (Math.pow((5.851) - (input[5]), 2))) + (Math.pow((96.7) - (input[6]), 2))) + (Math.pow((2.1069) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((384.0) - (input[9]), 2))) + (Math.pow((20.9) - (input[10]), 2))) + (Math.pow((394.05) - (input[11]), 2))) + (Math.pow((16.47) - (input[12]), 2))));
    }
    public static double subroutine73(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.47547) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((9.9) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.544) - (input[4]), 2))) + (Math.pow((6.113) - (input[5]), 2))) + (Math.pow((58.8) - (input[6]), 2))) + (Math.pow((4.0019) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((304.0) - (input[9]), 2))) + (Math.pow((18.4) - (input[10]), 2))) + (Math.pow((396.23) - (input[11]), 2))) + (Math.pow((12.73) - (input[12]), 2))));
    }
    public static double subroutine74(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.01709) - (input[0]), 2)) + (Math.pow((90.0) - (input[1]), 2))) + (Math.pow((2.02) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.41) - (input[4]), 2))) + (Math.pow((6.728) - (input[5]), 2))) + (Math.pow((36.1) - (input[6]), 2))) + (Math.pow((12.1265) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((187.0) - (input[9]), 2))) + (Math.pow((17.0) - (input[10]), 2))) + (Math.pow((384.46) - (input[11]), 2))) + (Math.pow((4.5) - (input[12]), 2))));
    }
    public static double subroutine75(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.32982) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((21.89) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.624) - (input[4]), 2))) + (Math.pow((5.822) - (input[5]), 2))) + (Math.pow((95.4) - (input[6]), 2))) + (Math.pow((2.4699) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((437.0) - (input[9]), 2))) + (Math.pow((21.2) - (input[10]), 2))) + (Math.pow((388.69) - (input[11]), 2))) + (Math.pow((15.03) - (input[12]), 2))));
    }
    public static double subroutine76(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.03768) - (input[0]), 2)) + (Math.pow((80.0) - (input[1]), 2))) + (Math.pow((1.52) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.404) - (input[4]), 2))) + (Math.pow((7.274) - (input[5]), 2))) + (Math.pow((38.3) - (input[6]), 2))) + (Math.pow((7.309) - (input[7]), 2))) + (Math.pow((2.0) - (input[8]), 2))) + (Math.pow((329.0) - (input[9]), 2))) + (Math.pow((12.6) - (input[10]), 2))) + (Math.pow((392.2) - (input[11]), 2))) + (Math.pow((6.62) - (input[12]), 2))));
    }
    public static double subroutine77(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.01965) - (input[0]), 2)) + (Math.pow((80.0) - (input[1]), 2))) + (Math.pow((1.76) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.385) - (input[4]), 2))) + (Math.pow((6.23) - (input[5]), 2))) + (Math.pow((31.5) - (input[6]), 2))) + (Math.pow((9.0892) - (input[7]), 2))) + (Math.pow((1.0) - (input[8]), 2))) + (Math.pow((241.0) - (input[9]), 2))) + (Math.pow((18.2) - (input[10]), 2))) + (Math.pow((341.6) - (input[11]), 2))) + (Math.pow((12.93) - (input[12]), 2))));
    }
    public static double subroutine78(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.5405) - (input[0]), 2)) + (Math.pow((20.0) - (input[1]), 2))) + (Math.pow((3.97) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.575) - (input[4]), 2))) + (Math.pow((7.47) - (input[5]), 2))) + (Math.pow((52.6) - (input[6]), 2))) + (Math.pow((2.872) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((264.0) - (input[9]), 2))) + (Math.pow((13.0) - (input[10]), 2))) + (Math.pow((390.3) - (input[11]), 2))) + (Math.pow((3.16) - (input[12]), 2))));
    }
    public static double subroutine79(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.26938) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((9.9) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.544) - (input[4]), 2))) + (Math.pow((6.266) - (input[5]), 2))) + (Math.pow((82.8) - (input[6]), 2))) + (Math.pow((3.2628) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((304.0) - (input[9]), 2))) + (Math.pow((18.4) - (input[10]), 2))) + (Math.pow((393.39) - (input[11]), 2))) + (Math.pow((7.9) - (input[12]), 2))));
    }
    public static double subroutine80(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.26838) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((9.69) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.585) - (input[4]), 2))) + (Math.pow((5.794) - (input[5]), 2))) + (Math.pow((70.6) - (input[6]), 2))) + (Math.pow((2.8927) - (input[7]), 2))) + (Math.pow((6.0) - (input[8]), 2))) + (Math.pow((391.0) - (input[9]), 2))) + (Math.pow((19.2) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((14.1) - (input[12]), 2))));
    }
    public static double subroutine81(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.16902) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((25.65) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.581) - (input[4]), 2))) + (Math.pow((5.986) - (input[5]), 2))) + (Math.pow((88.4) - (input[6]), 2))) + (Math.pow((1.9929) - (input[7]), 2))) + (Math.pow((2.0) - (input[8]), 2))) + (Math.pow((188.0) - (input[9]), 2))) + (Math.pow((19.1) - (input[10]), 2))) + (Math.pow((385.02) - (input[11]), 2))) + (Math.pow((14.81) - (input[12]), 2))));
    }
    public static double subroutine82(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.06417) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((5.96) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.499) - (input[4]), 2))) + (Math.pow((5.933) - (input[5]), 2))) + (Math.pow((68.2) - (input[6]), 2))) + (Math.pow((3.3603) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((279.0) - (input[9]), 2))) + (Math.pow((19.2) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((9.68) - (input[12]), 2))));
    }
    public static double subroutine83(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((11.1604) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.74) - (input[4]), 2))) + (Math.pow((6.629) - (input[5]), 2))) + (Math.pow((94.6) - (input[6]), 2))) + (Math.pow((2.1247) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((109.85) - (input[11]), 2))) + (Math.pow((23.27) - (input[12]), 2))));
    }
    public static double subroutine84(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.02763) - (input[0]), 2)) + (Math.pow((75.0) - (input[1]), 2))) + (Math.pow((2.95) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.428) - (input[4]), 2))) + (Math.pow((6.595) - (input[5]), 2))) + (Math.pow((21.8) - (input[6]), 2))) + (Math.pow((5.4011) - (input[7]), 2))) + (Math.pow((3.0) - (input[8]), 2))) + (Math.pow((252.0) - (input[9]), 2))) + (Math.pow((18.3) - (input[10]), 2))) + (Math.pow((395.63) - (input[11]), 2))) + (Math.pow((4.32) - (input[12]), 2))));
    }
    public static double subroutine85(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.34109) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((7.38) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.493) - (input[4]), 2))) + (Math.pow((6.415) - (input[5]), 2))) + (Math.pow((40.1) - (input[6]), 2))) + (Math.pow((4.7211) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((287.0) - (input[9]), 2))) + (Math.pow((19.6) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((6.12) - (input[12]), 2))));
    }
    public static double subroutine86(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.16211) - (input[0]), 2)) + (Math.pow((20.0) - (input[1]), 2))) + (Math.pow((6.96) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.464) - (input[4]), 2))) + (Math.pow((6.24) - (input[5]), 2))) + (Math.pow((16.3) - (input[6]), 2))) + (Math.pow((4.429) - (input[7]), 2))) + (Math.pow((3.0) - (input[8]), 2))) + (Math.pow((223.0) - (input[9]), 2))) + (Math.pow((18.6) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((6.59) - (input[12]), 2))));
    }
    public static double subroutine87(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((73.5341) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.679) - (input[4]), 2))) + (Math.pow((5.957) - (input[5]), 2))) + (Math.pow((100.0) - (input[6]), 2))) + (Math.pow((1.8026) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((16.45) - (input[11]), 2))) + (Math.pow((20.62) - (input[12]), 2))));
    }
    public static double subroutine88(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.02187) - (input[0]), 2)) + (Math.pow((60.0) - (input[1]), 2))) + (Math.pow((2.93) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.401) - (input[4]), 2))) + (Math.pow((6.8) - (input[5]), 2))) + (Math.pow((9.9) - (input[6]), 2))) + (Math.pow((6.2196) - (input[7]), 2))) + (Math.pow((1.0) - (input[8]), 2))) + (Math.pow((265.0) - (input[9]), 2))) + (Math.pow((15.6) - (input[10]), 2))) + (Math.pow((393.37) - (input[11]), 2))) + (Math.pow((5.03) - (input[12]), 2))));
    }
    public static double subroutine89(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((7.05042) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.614) - (input[4]), 2))) + (Math.pow((6.103) - (input[5]), 2))) + (Math.pow((85.1) - (input[6]), 2))) + (Math.pow((2.0218) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((2.52) - (input[11]), 2))) + (Math.pow((23.29) - (input[12]), 2))));
    }
    public static double subroutine90(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.33147) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((6.2) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.507) - (input[4]), 2))) + (Math.pow((8.247) - (input[5]), 2))) + (Math.pow((70.4) - (input[6]), 2))) + (Math.pow((3.6519) - (input[7]), 2))) + (Math.pow((8.0) - (input[8]), 2))) + (Math.pow((307.0) - (input[9]), 2))) + (Math.pow((17.4) - (input[10]), 2))) + (Math.pow((378.95) - (input[11]), 2))) + (Math.pow((3.95) - (input[12]), 2))));
    }
    public static double subroutine91(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((8.24809) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.713) - (input[4]), 2))) + (Math.pow((7.393) - (input[5]), 2))) + (Math.pow((99.3) - (input[6]), 2))) + (Math.pow((2.4527) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((375.87) - (input[11]), 2))) + (Math.pow((16.74) - (input[12]), 2))));
    }
    public static double subroutine92(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((25.0461) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.693) - (input[4]), 2))) + (Math.pow((5.987) - (input[5]), 2))) + (Math.pow((100.0) - (input[6]), 2))) + (Math.pow((1.5888) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((26.77) - (input[12]), 2))));
    }
    public static double subroutine93(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((1.13081) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((8.14) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.538) - (input[4]), 2))) + (Math.pow((5.713) - (input[5]), 2))) + (Math.pow((94.1) - (input[6]), 2))) + (Math.pow((4.233) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((307.0) - (input[9]), 2))) + (Math.pow((21.0) - (input[10]), 2))) + (Math.pow((360.17) - (input[11]), 2))) + (Math.pow((22.6) - (input[12]), 2))));
    }
    public static double subroutine94(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((2.63548) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((9.9) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.544) - (input[4]), 2))) + (Math.pow((4.973) - (input[5]), 2))) + (Math.pow((37.8) - (input[6]), 2))) + (Math.pow((2.5194) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((304.0) - (input[9]), 2))) + (Math.pow((18.4) - (input[10]), 2))) + (Math.pow((350.45) - (input[11]), 2))) + (Math.pow((12.64) - (input[12]), 2))));
    }
    public static double subroutine95(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.12816) - (input[0]), 2)) + (Math.pow((12.5) - (input[1]), 2))) + (Math.pow((6.07) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.409) - (input[4]), 2))) + (Math.pow((5.885) - (input[5]), 2))) + (Math.pow((33.0) - (input[6]), 2))) + (Math.pow((6.498) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((345.0) - (input[9]), 2))) + (Math.pow((18.9) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((8.79) - (input[12]), 2))));
    }
    public static double subroutine96(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((3.1636) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.655) - (input[4]), 2))) + (Math.pow((5.759) - (input[5]), 2))) + (Math.pow((48.2) - (input[6]), 2))) + (Math.pow((3.0665) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((334.4) - (input[11]), 2))) + (Math.pow((14.13) - (input[12]), 2))));
    }
    public static double subroutine97(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((15.288) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.671) - (input[4]), 2))) + (Math.pow((6.649) - (input[5]), 2))) + (Math.pow((93.3) - (input[6]), 2))) + (Math.pow((1.3449) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((363.02) - (input[11]), 2))) + (Math.pow((23.24) - (input[12]), 2))));
    }
    public static double subroutine98(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.04684) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((3.41) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.489) - (input[4]), 2))) + (Math.pow((6.417) - (input[5]), 2))) + (Math.pow((66.1) - (input[6]), 2))) + (Math.pow((3.0923) - (input[7]), 2))) + (Math.pow((2.0) - (input[8]), 2))) + (Math.pow((270.0) - (input[9]), 2))) + (Math.pow((17.8) - (input[10]), 2))) + (Math.pow((392.18) - (input[11]), 2))) + (Math.pow((8.81) - (input[12]), 2))));
    }
    public static double subroutine99(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.06211) - (input[0]), 2)) + (Math.pow((40.0) - (input[1]), 2))) + (Math.pow((1.25) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.429) - (input[4]), 2))) + (Math.pow((6.49) - (input[5]), 2))) + (Math.pow((44.4) - (input[6]), 2))) + (Math.pow((8.7921) - (input[7]), 2))) + (Math.pow((1.0) - (input[8]), 2))) + (Math.pow((335.0) - (input[9]), 2))) + (Math.pow((19.7) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((5.98) - (input[12]), 2))));
    }
    public static double subroutine100(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.04337) - (input[0]), 2)) + (Math.pow((21.0) - (input[1]), 2))) + (Math.pow((5.64) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.439) - (input[4]), 2))) + (Math.pow((6.115) - (input[5]), 2))) + (Math.pow((63.0) - (input[6]), 2))) + (Math.pow((6.8147) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((243.0) - (input[9]), 2))) + (Math.pow((16.8) - (input[10]), 2))) + (Math.pow((393.97) - (input[11]), 2))) + (Math.pow((9.43) - (input[12]), 2))));
    }
    public static double subroutine101(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.76162) - (input[0]), 2)) + (Math.pow((20.0) - (input[1]), 2))) + (Math.pow((3.97) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.647) - (input[4]), 2))) + (Math.pow((5.56) - (input[5]), 2))) + (Math.pow((62.8) - (input[6]), 2))) + (Math.pow((1.9865) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((264.0) - (input[9]), 2))) + (Math.pow((13.0) - (input[10]), 2))) + (Math.pow((392.4) - (input[11]), 2))) + (Math.pow((10.45) - (input[12]), 2))));
    }
    public static double subroutine102(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.04379) - (input[0]), 2)) + (Math.pow((80.0) - (input[1]), 2))) + (Math.pow((3.37) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.398) - (input[4]), 2))) + (Math.pow((5.787) - (input[5]), 2))) + (Math.pow((31.1) - (input[6]), 2))) + (Math.pow((6.6115) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((337.0) - (input[9]), 2))) + (Math.pow((16.1) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((10.24) - (input[12]), 2))));
    }
    public static double subroutine103(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.09378) - (input[0]), 2)) + (Math.pow((12.5) - (input[1]), 2))) + (Math.pow((7.87) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.524) - (input[4]), 2))) + (Math.pow((5.889) - (input[5]), 2))) + (Math.pow((39.0) - (input[6]), 2))) + (Math.pow((5.4509) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((311.0) - (input[9]), 2))) + (Math.pow((15.2) - (input[10]), 2))) + (Math.pow((390.5) - (input[11]), 2))) + (Math.pow((15.71) - (input[12]), 2))));
    }
    public static double subroutine104(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.0187) - (input[0]), 2)) + (Math.pow((85.0) - (input[1]), 2))) + (Math.pow((4.15) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.429) - (input[4]), 2))) + (Math.pow((6.516) - (input[5]), 2))) + (Math.pow((27.7) - (input[6]), 2))) + (Math.pow((8.5353) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((351.0) - (input[9]), 2))) + (Math.pow((17.9) - (input[10]), 2))) + (Math.pow((392.43) - (input[11]), 2))) + (Math.pow((6.36) - (input[12]), 2))));
    }
    public static double subroutine105(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.11432) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((8.56) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.52) - (input[4]), 2))) + (Math.pow((6.781) - (input[5]), 2))) + (Math.pow((71.3) - (input[6]), 2))) + (Math.pow((2.8561) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((384.0) - (input[9]), 2))) + (Math.pow((20.9) - (input[10]), 2))) + (Math.pow((395.58) - (input[11]), 2))) + (Math.pow((7.67) - (input[12]), 2))));
    }
    public static double subroutine106(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.14231) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((10.01) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.547) - (input[4]), 2))) + (Math.pow((6.254) - (input[5]), 2))) + (Math.pow((84.2) - (input[6]), 2))) + (Math.pow((2.2565) - (input[7]), 2))) + (Math.pow((6.0) - (input[8]), 2))) + (Math.pow((432.0) - (input[9]), 2))) + (Math.pow((17.8) - (input[10]), 2))) + (Math.pow((388.74) - (input[11]), 2))) + (Math.pow((10.45) - (input[12]), 2))));
    }
    public static double subroutine107(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.80271) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((8.14) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.538) - (input[4]), 2))) + (Math.pow((5.456) - (input[5]), 2))) + (Math.pow((36.6) - (input[6]), 2))) + (Math.pow((3.7965) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((307.0) - (input[9]), 2))) + (Math.pow((21.0) - (input[10]), 2))) + (Math.pow((288.99) - (input[11]), 2))) + (Math.pow((11.69) - (input[12]), 2))));
    }
    public static double subroutine108(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((14.4383) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.597) - (input[4]), 2))) + (Math.pow((6.852) - (input[5]), 2))) + (Math.pow((100.0) - (input[6]), 2))) + (Math.pow((1.4655) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((179.36) - (input[11]), 2))) + (Math.pow((19.78) - (input[12]), 2))));
    }
    public static double subroutine109(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.57834) - (input[0]), 2)) + (Math.pow((20.0) - (input[1]), 2))) + (Math.pow((3.97) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.575) - (input[4]), 2))) + (Math.pow((8.297) - (input[5]), 2))) + (Math.pow((67.0) - (input[6]), 2))) + (Math.pow((2.4216) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((264.0) - (input[9]), 2))) + (Math.pow((13.0) - (input[10]), 2))) + (Math.pow((384.54) - (input[11]), 2))) + (Math.pow((7.44) - (input[12]), 2))));
    }
    public static double subroutine110(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((3.69695) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.718) - (input[4]), 2))) + (Math.pow((4.963) - (input[5]), 2))) + (Math.pow((91.4) - (input[6]), 2))) + (Math.pow((1.7523) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((316.03) - (input[11]), 2))) + (Math.pow((14.0) - (input[12]), 2))));
    }
    public static double subroutine111(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.19539) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((10.81) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.413) - (input[4]), 2))) + (Math.pow((6.245) - (input[5]), 2))) + (Math.pow((6.2) - (input[6]), 2))) + (Math.pow((5.2873) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((305.0) - (input[9]), 2))) + (Math.pow((19.2) - (input[10]), 2))) + (Math.pow((377.17) - (input[11]), 2))) + (Math.pow((7.54) - (input[12]), 2))));
    }
    public static double subroutine112(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.01301) - (input[0]), 2)) + (Math.pow((35.0) - (input[1]), 2))) + (Math.pow((1.52) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.442) - (input[4]), 2))) + (Math.pow((7.241) - (input[5]), 2))) + (Math.pow((49.3) - (input[6]), 2))) + (Math.pow((7.0379) - (input[7]), 2))) + (Math.pow((1.0) - (input[8]), 2))) + (Math.pow((284.0) - (input[9]), 2))) + (Math.pow((15.5) - (input[10]), 2))) + (Math.pow((394.74) - (input[11]), 2))) + (Math.pow((5.49) - (input[12]), 2))));
    }
    public static double subroutine113(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((6.28807) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.74) - (input[4]), 2))) + (Math.pow((6.341) - (input[5]), 2))) + (Math.pow((96.4) - (input[6]), 2))) + (Math.pow((2.072) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((318.01) - (input[11]), 2))) + (Math.pow((17.79) - (input[12]), 2))));
    }
    public static double subroutine114(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.97617) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((21.89) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.624) - (input[4]), 2))) + (Math.pow((5.757) - (input[5]), 2))) + (Math.pow((98.4) - (input[6]), 2))) + (Math.pow((2.346) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((437.0) - (input[9]), 2))) + (Math.pow((21.2) - (input[10]), 2))) + (Math.pow((262.76) - (input[11]), 2))) + (Math.pow((17.31) - (input[12]), 2))));
    }
    public static double subroutine115(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.08387) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((12.83) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.437) - (input[4]), 2))) + (Math.pow((5.874) - (input[5]), 2))) + (Math.pow((36.6) - (input[6]), 2))) + (Math.pow((4.5026) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((398.0) - (input[9]), 2))) + (Math.pow((18.7) - (input[10]), 2))) + (Math.pow((396.06) - (input[11]), 2))) + (Math.pow((9.1) - (input[12]), 2))));
    }
    public static double subroutine116(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((20.7162) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.659) - (input[4]), 2))) + (Math.pow((4.138) - (input[5]), 2))) + (Math.pow((100.0) - (input[6]), 2))) + (Math.pow((1.1781) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((370.22) - (input[11]), 2))) + (Math.pow((23.34) - (input[12]), 2))));
    }
    public static double subroutine117(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.06911) - (input[0]), 2)) + (Math.pow((45.0) - (input[1]), 2))) + (Math.pow((3.44) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.437) - (input[4]), 2))) + (Math.pow((6.739) - (input[5]), 2))) + (Math.pow((30.8) - (input[6]), 2))) + (Math.pow((6.4798) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((398.0) - (input[9]), 2))) + (Math.pow((15.2) - (input[10]), 2))) + (Math.pow((389.71) - (input[11]), 2))) + (Math.pow((4.69) - (input[12]), 2))));
    }
    public static double subroutine118(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.41238) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((6.2) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.504) - (input[4]), 2))) + (Math.pow((7.163) - (input[5]), 2))) + (Math.pow((79.9) - (input[6]), 2))) + (Math.pow((3.2157) - (input[7]), 2))) + (Math.pow((8.0) - (input[8]), 2))) + (Math.pow((307.0) - (input[9]), 2))) + (Math.pow((17.4) - (input[10]), 2))) + (Math.pow((372.08) - (input[11]), 2))) + (Math.pow((6.36) - (input[12]), 2))));
    }
    public static double subroutine119(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((3.47428) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((1.0) - (input[3]), 2))) + (Math.pow((0.718) - (input[4]), 2))) + (Math.pow((8.78) - (input[5]), 2))) + (Math.pow((82.9) - (input[6]), 2))) + (Math.pow((1.9047) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((354.55) - (input[11]), 2))) + (Math.pow((5.29) - (input[12]), 2))));
    }
    public static double subroutine120(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((2.924) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((19.58) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.605) - (input[4]), 2))) + (Math.pow((6.101) - (input[5]), 2))) + (Math.pow((93.0) - (input[6]), 2))) + (Math.pow((2.2834) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((403.0) - (input[9]), 2))) + (Math.pow((14.7) - (input[10]), 2))) + (Math.pow((240.16) - (input[11]), 2))) + (Math.pow((9.81) - (input[12]), 2))));
    }
    public static double subroutine121(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.30347) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((7.38) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.493) - (input[4]), 2))) + (Math.pow((6.312) - (input[5]), 2))) + (Math.pow((28.9) - (input[6]), 2))) + (Math.pow((5.4159) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((287.0) - (input[9]), 2))) + (Math.pow((19.6) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((6.15) - (input[12]), 2))));
    }
    public static double subroutine122(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((1.41385) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((19.58) - (input[2]), 2))) + (Math.pow((1.0) - (input[3]), 2))) + (Math.pow((0.871) - (input[4]), 2))) + (Math.pow((6.129) - (input[5]), 2))) + (Math.pow((96.0) - (input[6]), 2))) + (Math.pow((1.7494) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((403.0) - (input[9]), 2))) + (Math.pow((14.7) - (input[10]), 2))) + (Math.pow((321.02) - (input[11]), 2))) + (Math.pow((15.12) - (input[12]), 2))));
    }
    public static double subroutine123(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((16.8118) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.7) - (input[4]), 2))) + (Math.pow((5.277) - (input[5]), 2))) + (Math.pow((98.1) - (input[6]), 2))) + (Math.pow((1.4261) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((30.81) - (input[12]), 2))));
    }
    public static double subroutine124(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.31533) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((6.2) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.504) - (input[4]), 2))) + (Math.pow((8.266) - (input[5]), 2))) + (Math.pow((78.3) - (input[6]), 2))) + (Math.pow((2.8944) - (input[7]), 2))) + (Math.pow((8.0) - (input[8]), 2))) + (Math.pow((307.0) - (input[9]), 2))) + (Math.pow((17.4) - (input[10]), 2))) + (Math.pow((385.05) - (input[11]), 2))) + (Math.pow((4.14) - (input[12]), 2))));
    }
    public static double subroutine125(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.17171) - (input[0]), 2)) + (Math.pow((25.0) - (input[1]), 2))) + (Math.pow((5.13) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.453) - (input[4]), 2))) + (Math.pow((5.966) - (input[5]), 2))) + (Math.pow((93.4) - (input[6]), 2))) + (Math.pow((6.8185) - (input[7]), 2))) + (Math.pow((8.0) - (input[8]), 2))) + (Math.pow((284.0) - (input[9]), 2))) + (Math.pow((19.7) - (input[10]), 2))) + (Math.pow((378.08) - (input[11]), 2))) + (Math.pow((14.44) - (input[12]), 2))));
    }
    public static double subroutine126(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.12083) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((2.89) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.445) - (input[4]), 2))) + (Math.pow((8.069) - (input[5]), 2))) + (Math.pow((76.0) - (input[6]), 2))) + (Math.pow((3.4952) - (input[7]), 2))) + (Math.pow((2.0) - (input[8]), 2))) + (Math.pow((276.0) - (input[9]), 2))) + (Math.pow((18.0) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((4.21) - (input[12]), 2))));
    }
    public static double subroutine127(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.62976) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((8.14) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.538) - (input[4]), 2))) + (Math.pow((5.949) - (input[5]), 2))) + (Math.pow((61.8) - (input[6]), 2))) + (Math.pow((4.7075) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((307.0) - (input[9]), 2))) + (Math.pow((21.0) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((8.26) - (input[12]), 2))));
    }
    public static double subroutine128(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.25199) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((10.59) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.489) - (input[4]), 2))) + (Math.pow((5.783) - (input[5]), 2))) + (Math.pow((72.7) - (input[6]), 2))) + (Math.pow((4.3549) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((277.0) - (input[9]), 2))) + (Math.pow((18.6) - (input[10]), 2))) + (Math.pow((389.43) - (input[11]), 2))) + (Math.pow((18.06) - (input[12]), 2))));
    }
    public static double subroutine129(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.10793) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((8.56) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.52) - (input[4]), 2))) + (Math.pow((6.195) - (input[5]), 2))) + (Math.pow((54.4) - (input[6]), 2))) + (Math.pow((2.7778) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((384.0) - (input[9]), 2))) + (Math.pow((20.9) - (input[10]), 2))) + (Math.pow((393.49) - (input[11]), 2))) + (Math.pow((13.0) - (input[12]), 2))));
    }
    public static double subroutine130(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((4.66883) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.713) - (input[4]), 2))) + (Math.pow((5.976) - (input[5]), 2))) + (Math.pow((87.9) - (input[6]), 2))) + (Math.pow((2.5806) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((10.48) - (input[11]), 2))) + (Math.pow((19.01) - (input[12]), 2))));
    }
    public static double subroutine131(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((67.9208) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.693) - (input[4]), 2))) + (Math.pow((5.683) - (input[5]), 2))) + (Math.pow((100.0) - (input[6]), 2))) + (Math.pow((1.4254) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((384.97) - (input[11]), 2))) + (Math.pow((22.98) - (input[12]), 2))));
    }
    public static double subroutine132(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((7.83932) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.655) - (input[4]), 2))) + (Math.pow((6.209) - (input[5]), 2))) + (Math.pow((65.4) - (input[6]), 2))) + (Math.pow((2.9634) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((13.22) - (input[12]), 2))));
    }
    public static double subroutine133(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((5.70818) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.532) - (input[4]), 2))) + (Math.pow((6.75) - (input[5]), 2))) + (Math.pow((74.9) - (input[6]), 2))) + (Math.pow((3.3317) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((393.07) - (input[11]), 2))) + (Math.pow((7.74) - (input[12]), 2))));
    }
    public static double subroutine134(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.08014) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((5.96) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.499) - (input[4]), 2))) + (Math.pow((5.85) - (input[5]), 2))) + (Math.pow((41.5) - (input[6]), 2))) + (Math.pow((3.9342) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((279.0) - (input[9]), 2))) + (Math.pow((19.2) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((8.77) - (input[12]), 2))));
    }
    public static double subroutine135(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.03427) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((5.19) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.515) - (input[4]), 2))) + (Math.pow((5.869) - (input[5]), 2))) + (Math.pow((46.3) - (input[6]), 2))) + (Math.pow((5.2311) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((224.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((9.8) - (input[12]), 2))));
    }
    public static double subroutine136(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.10612) - (input[0]), 2)) + (Math.pow((30.0) - (input[1]), 2))) + (Math.pow((4.93) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.428) - (input[4]), 2))) + (Math.pow((6.095) - (input[5]), 2))) + (Math.pow((65.1) - (input[6]), 2))) + (Math.pow((6.3361) - (input[7]), 2))) + (Math.pow((6.0) - (input[8]), 2))) + (Math.pow((300.0) - (input[9]), 2))) + (Math.pow((16.6) - (input[10]), 2))) + (Math.pow((394.62) - (input[11]), 2))) + (Math.pow((12.4) - (input[12]), 2))));
    }
    public static double subroutine137(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.05425) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((4.05) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.51) - (input[4]), 2))) + (Math.pow((6.315) - (input[5]), 2))) + (Math.pow((73.4) - (input[6]), 2))) + (Math.pow((3.3175) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((296.0) - (input[9]), 2))) + (Math.pow((16.6) - (input[10]), 2))) + (Math.pow((395.6) - (input[11]), 2))) + (Math.pow((6.29) - (input[12]), 2))));
    }
    public static double subroutine138(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.05515) - (input[0]), 2)) + (Math.pow((33.0) - (input[1]), 2))) + (Math.pow((2.18) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.472) - (input[4]), 2))) + (Math.pow((7.236) - (input[5]), 2))) + (Math.pow((41.1) - (input[6]), 2))) + (Math.pow((4.022) - (input[7]), 2))) + (Math.pow((7.0) - (input[8]), 2))) + (Math.pow((222.0) - (input[9]), 2))) + (Math.pow((18.4) - (input[10]), 2))) + (Math.pow((393.68) - (input[11]), 2))) + (Math.pow((6.93) - (input[12]), 2))));
    }
    public static double subroutine139(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.11425) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((13.89) - (input[2]), 2))) + (Math.pow((1.0) - (input[3]), 2))) + (Math.pow((0.55) - (input[4]), 2))) + (Math.pow((6.373) - (input[5]), 2))) + (Math.pow((92.4) - (input[6]), 2))) + (Math.pow((3.3633) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((276.0) - (input[9]), 2))) + (Math.pow((16.4) - (input[10]), 2))) + (Math.pow((393.74) - (input[11]), 2))) + (Math.pow((10.5) - (input[12]), 2))));
    }
    public static double subroutine140(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.28392) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((7.38) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.493) - (input[4]), 2))) + (Math.pow((5.708) - (input[5]), 2))) + (Math.pow((74.3) - (input[6]), 2))) + (Math.pow((4.7211) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((287.0) - (input[9]), 2))) + (Math.pow((19.6) - (input[10]), 2))) + (Math.pow((391.13) - (input[11]), 2))) + (Math.pow((11.74) - (input[12]), 2))));
    }
    public static double subroutine141(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.10008) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((2.46) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.488) - (input[4]), 2))) + (Math.pow((6.563) - (input[5]), 2))) + (Math.pow((95.6) - (input[6]), 2))) + (Math.pow((2.847) - (input[7]), 2))) + (Math.pow((3.0) - (input[8]), 2))) + (Math.pow((193.0) - (input[9]), 2))) + (Math.pow((17.8) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((5.68) - (input[12]), 2))));
    }
    public static double subroutine142(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((5.69175) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.583) - (input[4]), 2))) + (Math.pow((6.114) - (input[5]), 2))) + (Math.pow((79.8) - (input[6]), 2))) + (Math.pow((3.5459) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((392.68) - (input[11]), 2))) + (Math.pow((14.98) - (input[12]), 2))));
    }
    public static double subroutine143(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((1.42502) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((19.58) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.871) - (input[4]), 2))) + (Math.pow((6.51) - (input[5]), 2))) + (Math.pow((100.0) - (input[6]), 2))) + (Math.pow((1.7659) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((403.0) - (input[9]), 2))) + (Math.pow((14.7) - (input[10]), 2))) + (Math.pow((364.31) - (input[11]), 2))) + (Math.pow((7.39) - (input[12]), 2))));
    }
    public static double subroutine144(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.03041) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((5.19) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.515) - (input[4]), 2))) + (Math.pow((5.895) - (input[5]), 2))) + (Math.pow((59.6) - (input[6]), 2))) + (Math.pow((5.615) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((224.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((394.81) - (input[11]), 2))) + (Math.pow((10.56) - (input[12]), 2))));
    }
    public static double subroutine145(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.11069) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((13.89) - (input[2]), 2))) + (Math.pow((1.0) - (input[3]), 2))) + (Math.pow((0.55) - (input[4]), 2))) + (Math.pow((5.951) - (input[5]), 2))) + (Math.pow((93.8) - (input[6]), 2))) + (Math.pow((2.8893) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((276.0) - (input[9]), 2))) + (Math.pow((16.4) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((17.92) - (input[12]), 2))));
    }
    public static double subroutine146(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.14476) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((10.01) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.547) - (input[4]), 2))) + (Math.pow((5.731) - (input[5]), 2))) + (Math.pow((65.2) - (input[6]), 2))) + (Math.pow((2.7592) - (input[7]), 2))) + (Math.pow((6.0) - (input[8]), 2))) + (Math.pow((432.0) - (input[9]), 2))) + (Math.pow((17.8) - (input[10]), 2))) + (Math.pow((391.5) - (input[11]), 2))) + (Math.pow((13.61) - (input[12]), 2))));
    }
    public static double subroutine147(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.09266) - (input[0]), 2)) + (Math.pow((34.0) - (input[1]), 2))) + (Math.pow((6.09) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.433) - (input[4]), 2))) + (Math.pow((6.495) - (input[5]), 2))) + (Math.pow((18.4) - (input[6]), 2))) + (Math.pow((5.4917) - (input[7]), 2))) + (Math.pow((7.0) - (input[8]), 2))) + (Math.pow((329.0) - (input[9]), 2))) + (Math.pow((16.1) - (input[10]), 2))) + (Math.pow((383.61) - (input[11]), 2))) + (Math.pow((8.67) - (input[12]), 2))));
    }
    public static double subroutine148(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.82526) - (input[0]), 2)) + (Math.pow((20.0) - (input[1]), 2))) + (Math.pow((3.97) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.647) - (input[4]), 2))) + (Math.pow((7.327) - (input[5]), 2))) + (Math.pow((94.5) - (input[6]), 2))) + (Math.pow((2.0788) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((264.0) - (input[9]), 2))) + (Math.pow((13.0) - (input[10]), 2))) + (Math.pow((393.42) - (input[11]), 2))) + (Math.pow((11.25) - (input[12]), 2))));
    }
    public static double subroutine149(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((2.44953) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((19.58) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.605) - (input[4]), 2))) + (Math.pow((6.402) - (input[5]), 2))) + (Math.pow((95.2) - (input[6]), 2))) + (Math.pow((2.2625) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((403.0) - (input[9]), 2))) + (Math.pow((14.7) - (input[10]), 2))) + (Math.pow((330.04) - (input[11]), 2))) + (Math.pow((11.32) - (input[12]), 2))));
    }
    public static double subroutine150(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((6.39312) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.584) - (input[4]), 2))) + (Math.pow((6.162) - (input[5]), 2))) + (Math.pow((97.4) - (input[6]), 2))) + (Math.pow((2.206) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((302.76) - (input[11]), 2))) + (Math.pow((24.1) - (input[12]), 2))));
    }
    public static double subroutine151(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.18337) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((27.74) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.609) - (input[4]), 2))) + (Math.pow((5.414) - (input[5]), 2))) + (Math.pow((98.3) - (input[6]), 2))) + (Math.pow((1.7554) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((711.0) - (input[9]), 2))) + (Math.pow((20.1) - (input[10]), 2))) + (Math.pow((344.05) - (input[11]), 2))) + (Math.pow((23.97) - (input[12]), 2))));
    }
    public static double subroutine152(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.06466) - (input[0]), 2)) + (Math.pow((70.0) - (input[1]), 2))) + (Math.pow((2.24) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.4) - (input[4]), 2))) + (Math.pow((6.345) - (input[5]), 2))) + (Math.pow((20.1) - (input[6]), 2))) + (Math.pow((7.8278) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((358.0) - (input[9]), 2))) + (Math.pow((14.8) - (input[10]), 2))) + (Math.pow((368.24) - (input[11]), 2))) + (Math.pow((4.97) - (input[12]), 2))));
    }
    public static double subroutine153(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.14866) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((8.56) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.52) - (input[4]), 2))) + (Math.pow((6.727) - (input[5]), 2))) + (Math.pow((79.9) - (input[6]), 2))) + (Math.pow((2.7778) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((384.0) - (input[9]), 2))) + (Math.pow((20.9) - (input[10]), 2))) + (Math.pow((394.76) - (input[11]), 2))) + (Math.pow((9.42) - (input[12]), 2))));
    }
    public static double subroutine154(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.6147) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((6.2) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.507) - (input[4]), 2))) + (Math.pow((6.618) - (input[5]), 2))) + (Math.pow((80.8) - (input[6]), 2))) + (Math.pow((3.2721) - (input[7]), 2))) + (Math.pow((8.0) - (input[8]), 2))) + (Math.pow((307.0) - (input[9]), 2))) + (Math.pow((17.4) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((7.6) - (input[12]), 2))));
    }
    public static double subroutine155(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((14.3337) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.7) - (input[4]), 2))) + (Math.pow((4.88) - (input[5]), 2))) + (Math.pow((100.0) - (input[6]), 2))) + (Math.pow((1.5895) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((372.92) - (input[11]), 2))) + (Math.pow((30.62) - (input[12]), 2))));
    }
    public static double subroutine156(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((6.80117) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.713) - (input[4]), 2))) + (Math.pow((6.081) - (input[5]), 2))) + (Math.pow((84.4) - (input[6]), 2))) + (Math.pow((2.7175) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((14.7) - (input[12]), 2))));
    }
    public static double subroutine157(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.19802) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((10.59) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.489) - (input[4]), 2))) + (Math.pow((6.182) - (input[5]), 2))) + (Math.pow((42.4) - (input[6]), 2))) + (Math.pow((3.9454) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((277.0) - (input[9]), 2))) + (Math.pow((18.6) - (input[10]), 2))) + (Math.pow((393.63) - (input[11]), 2))) + (Math.pow((9.47) - (input[12]), 2))));
    }
    public static double subroutine158(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((8.98296) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((1.0) - (input[3]), 2))) + (Math.pow((0.77) - (input[4]), 2))) + (Math.pow((6.212) - (input[5]), 2))) + (Math.pow((97.4) - (input[6]), 2))) + (Math.pow((2.1222) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((377.73) - (input[11]), 2))) + (Math.pow((17.6) - (input[12]), 2))));
    }
    public static double subroutine159(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((8.64476) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.693) - (input[4]), 2))) + (Math.pow((6.193) - (input[5]), 2))) + (Math.pow((92.6) - (input[6]), 2))) + (Math.pow((1.7912) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((15.17) - (input[12]), 2))));
    }
    public static double subroutine160(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.09604) - (input[0]), 2)) + (Math.pow((40.0) - (input[1]), 2))) + (Math.pow((6.41) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.447) - (input[4]), 2))) + (Math.pow((6.854) - (input[5]), 2))) + (Math.pow((42.8) - (input[6]), 2))) + (Math.pow((4.2673) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((254.0) - (input[9]), 2))) + (Math.pow((17.6) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((2.98) - (input[12]), 2))));
    }
    public static double subroutine161(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.08244) - (input[0]), 2)) + (Math.pow((30.0) - (input[1]), 2))) + (Math.pow((4.93) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.428) - (input[4]), 2))) + (Math.pow((6.481) - (input[5]), 2))) + (Math.pow((18.5) - (input[6]), 2))) + (Math.pow((6.1899) - (input[7]), 2))) + (Math.pow((6.0) - (input[8]), 2))) + (Math.pow((300.0) - (input[9]), 2))) + (Math.pow((16.6) - (input[10]), 2))) + (Math.pow((379.41) - (input[11]), 2))) + (Math.pow((6.36) - (input[12]), 2))));
    }
    public static double subroutine162(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((2.3004) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((19.58) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.605) - (input[4]), 2))) + (Math.pow((6.319) - (input[5]), 2))) + (Math.pow((96.1) - (input[6]), 2))) + (Math.pow((2.1) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((403.0) - (input[9]), 2))) + (Math.pow((14.7) - (input[10]), 2))) + (Math.pow((297.09) - (input[11]), 2))) + (Math.pow((11.1) - (input[12]), 2))));
    }
    public static double subroutine163(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((4.87141) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.614) - (input[4]), 2))) + (Math.pow((6.484) - (input[5]), 2))) + (Math.pow((93.6) - (input[6]), 2))) + (Math.pow((2.3053) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((396.21) - (input[11]), 2))) + (Math.pow((18.68) - (input[12]), 2))));
    }
    public static double subroutine164(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.1676) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((7.38) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.493) - (input[4]), 2))) + (Math.pow((6.426) - (input[5]), 2))) + (Math.pow((52.3) - (input[6]), 2))) + (Math.pow((4.5404) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((287.0) - (input[9]), 2))) + (Math.pow((19.6) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((7.2) - (input[12]), 2))));
    }
    public static double subroutine165(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.12329) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((10.01) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.547) - (input[4]), 2))) + (Math.pow((5.913) - (input[5]), 2))) + (Math.pow((92.9) - (input[6]), 2))) + (Math.pow((2.3534) - (input[7]), 2))) + (Math.pow((6.0) - (input[8]), 2))) + (Math.pow((432.0) - (input[9]), 2))) + (Math.pow((17.8) - (input[10]), 2))) + (Math.pow((394.95) - (input[11]), 2))) + (Math.pow((16.21) - (input[12]), 2))));
    }
    public static double subroutine166(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.11329) - (input[0]), 2)) + (Math.pow((30.0) - (input[1]), 2))) + (Math.pow((4.93) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.428) - (input[4]), 2))) + (Math.pow((6.897) - (input[5]), 2))) + (Math.pow((54.3) - (input[6]), 2))) + (Math.pow((6.3361) - (input[7]), 2))) + (Math.pow((6.0) - (input[8]), 2))) + (Math.pow((300.0) - (input[9]), 2))) + (Math.pow((16.6) - (input[10]), 2))) + (Math.pow((391.25) - (input[11]), 2))) + (Math.pow((11.38) - (input[12]), 2))));
    }
    public static double subroutine167(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.44791) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((6.2) - (input[2]), 2))) + (Math.pow((1.0) - (input[3]), 2))) + (Math.pow((0.507) - (input[4]), 2))) + (Math.pow((6.726) - (input[5]), 2))) + (Math.pow((66.5) - (input[6]), 2))) + (Math.pow((3.6519) - (input[7]), 2))) + (Math.pow((8.0) - (input[8]), 2))) + (Math.pow((307.0) - (input[9]), 2))) + (Math.pow((17.4) - (input[10]), 2))) + (Math.pow((360.2) - (input[11]), 2))) + (Math.pow((8.05) - (input[12]), 2))));
    }
    public static double subroutine168(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((3.67367) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.583) - (input[4]), 2))) + (Math.pow((6.312) - (input[5]), 2))) + (Math.pow((51.9) - (input[6]), 2))) + (Math.pow((3.9917) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((388.62) - (input[11]), 2))) + (Math.pow((10.58) - (input[12]), 2))));
    }
    public static double subroutine169(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.06127) - (input[0]), 2)) + (Math.pow((40.0) - (input[1]), 2))) + (Math.pow((6.41) - (input[2]), 2))) + (Math.pow((1.0) - (input[3]), 2))) + (Math.pow((0.447) - (input[4]), 2))) + (Math.pow((6.826) - (input[5]), 2))) + (Math.pow((27.6) - (input[6]), 2))) + (Math.pow((4.8628) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((254.0) - (input[9]), 2))) + (Math.pow((17.6) - (input[10]), 2))) + (Math.pow((393.45) - (input[11]), 2))) + (Math.pow((4.16) - (input[12]), 2))));
    }
    public static double subroutine170(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.7857) - (input[0]), 2)) + (Math.pow((20.0) - (input[1]), 2))) + (Math.pow((3.97) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.647) - (input[4]), 2))) + (Math.pow((7.014) - (input[5]), 2))) + (Math.pow((84.6) - (input[6]), 2))) + (Math.pow((2.1329) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((264.0) - (input[9]), 2))) + (Math.pow((13.0) - (input[10]), 2))) + (Math.pow((384.07) - (input[11]), 2))) + (Math.pow((14.79) - (input[12]), 2))));
    }
    public static double subroutine171(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.03659) - (input[0]), 2)) + (Math.pow((25.0) - (input[1]), 2))) + (Math.pow((4.86) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.426) - (input[4]), 2))) + (Math.pow((6.302) - (input[5]), 2))) + (Math.pow((32.2) - (input[6]), 2))) + (Math.pow((5.4007) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((281.0) - (input[9]), 2))) + (Math.pow((19.0) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((6.72) - (input[12]), 2))));
    }
    public static double subroutine172(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((3.8497) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((1.0) - (input[3]), 2))) + (Math.pow((0.77) - (input[4]), 2))) + (Math.pow((6.395) - (input[5]), 2))) + (Math.pow((91.0) - (input[6]), 2))) + (Math.pow((2.5052) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((391.34) - (input[11]), 2))) + (Math.pow((13.27) - (input[12]), 2))));
    }
    public static double subroutine173(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.38214) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((6.2) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.504) - (input[4]), 2))) + (Math.pow((8.04) - (input[5]), 2))) + (Math.pow((86.5) - (input[6]), 2))) + (Math.pow((3.2157) - (input[7]), 2))) + (Math.pow((8.0) - (input[8]), 2))) + (Math.pow((307.0) - (input[9]), 2))) + (Math.pow((17.4) - (input[10]), 2))) + (Math.pow((387.38) - (input[11]), 2))) + (Math.pow((3.13) - (input[12]), 2))));
    }
    public static double subroutine174(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((13.5222) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.631) - (input[4]), 2))) + (Math.pow((3.863) - (input[5]), 2))) + (Math.pow((100.0) - (input[6]), 2))) + (Math.pow((1.5106) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((131.42) - (input[11]), 2))) + (Math.pow((13.33) - (input[12]), 2))));
    }
    public static double subroutine175(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.04203) - (input[0]), 2)) + (Math.pow((28.0) - (input[1]), 2))) + (Math.pow((15.04) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.464) - (input[4]), 2))) + (Math.pow((6.442) - (input[5]), 2))) + (Math.pow((53.6) - (input[6]), 2))) + (Math.pow((3.6659) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((270.0) - (input[9]), 2))) + (Math.pow((18.2) - (input[10]), 2))) + (Math.pow((395.01) - (input[11]), 2))) + (Math.pow((8.16) - (input[12]), 2))));
    }
    public static double subroutine176(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.10574) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((27.74) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.609) - (input[4]), 2))) + (Math.pow((5.983) - (input[5]), 2))) + (Math.pow((98.8) - (input[6]), 2))) + (Math.pow((1.8681) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((711.0) - (input[9]), 2))) + (Math.pow((20.1) - (input[10]), 2))) + (Math.pow((390.11) - (input[11]), 2))) + (Math.pow((18.07) - (input[12]), 2))));
    }
    public static double subroutine177(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((10.233) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.614) - (input[4]), 2))) + (Math.pow((6.185) - (input[5]), 2))) + (Math.pow((96.7) - (input[6]), 2))) + (Math.pow((2.1705) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((379.7) - (input[11]), 2))) + (Math.pow((18.03) - (input[12]), 2))));
    }
    public static double subroutine178(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.0136) - (input[0]), 2)) + (Math.pow((75.0) - (input[1]), 2))) + (Math.pow((4.0) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.41) - (input[4]), 2))) + (Math.pow((5.888) - (input[5]), 2))) + (Math.pow((47.6) - (input[6]), 2))) + (Math.pow((7.3197) - (input[7]), 2))) + (Math.pow((3.0) - (input[8]), 2))) + (Math.pow((469.0) - (input[9]), 2))) + (Math.pow((21.1) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((14.8) - (input[12]), 2))));
    }
    public static double subroutine179(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.13642) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((10.59) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.489) - (input[4]), 2))) + (Math.pow((5.891) - (input[5]), 2))) + (Math.pow((22.3) - (input[6]), 2))) + (Math.pow((3.9454) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((277.0) - (input[9]), 2))) + (Math.pow((18.6) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((10.87) - (input[12]), 2))));
    }
    public static double subroutine180(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.46296) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((6.2) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.504) - (input[4]), 2))) + (Math.pow((7.412) - (input[5]), 2))) + (Math.pow((76.9) - (input[6]), 2))) + (Math.pow((3.6715) - (input[7]), 2))) + (Math.pow((8.0) - (input[8]), 2))) + (Math.pow((307.0) - (input[9]), 2))) + (Math.pow((17.4) - (input[10]), 2))) + (Math.pow((376.14) - (input[11]), 2))) + (Math.pow((5.25) - (input[12]), 2))));
    }
    public static double subroutine181(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.26363) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((8.56) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.52) - (input[4]), 2))) + (Math.pow((6.229) - (input[5]), 2))) + (Math.pow((91.2) - (input[6]), 2))) + (Math.pow((2.5451) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((384.0) - (input[9]), 2))) + (Math.pow((20.9) - (input[10]), 2))) + (Math.pow((391.23) - (input[11]), 2))) + (Math.pow((15.55) - (input[12]), 2))));
    }
    public static double subroutine182(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((13.3598) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.693) - (input[4]), 2))) + (Math.pow((5.887) - (input[5]), 2))) + (Math.pow((94.7) - (input[6]), 2))) + (Math.pow((1.7821) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((16.35) - (input[12]), 2))));
    }
    public static double subroutine183(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.11132) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((27.74) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.609) - (input[4]), 2))) + (Math.pow((5.983) - (input[5]), 2))) + (Math.pow((83.5) - (input[6]), 2))) + (Math.pow((2.1099) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((711.0) - (input[9]), 2))) + (Math.pow((20.1) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((13.35) - (input[12]), 2))));
    }
    public static double subroutine184(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.04666) - (input[0]), 2)) + (Math.pow((80.0) - (input[1]), 2))) + (Math.pow((1.52) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.404) - (input[4]), 2))) + (Math.pow((7.107) - (input[5]), 2))) + (Math.pow((36.6) - (input[6]), 2))) + (Math.pow((7.309) - (input[7]), 2))) + (Math.pow((2.0) - (input[8]), 2))) + (Math.pow((329.0) - (input[9]), 2))) + (Math.pow((12.6) - (input[10]), 2))) + (Math.pow((354.31) - (input[11]), 2))) + (Math.pow((8.61) - (input[12]), 2))));
    }
    public static double subroutine185(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.09849) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((25.65) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.581) - (input[4]), 2))) + (Math.pow((5.879) - (input[5]), 2))) + (Math.pow((95.8) - (input[6]), 2))) + (Math.pow((2.0063) - (input[7]), 2))) + (Math.pow((2.0) - (input[8]), 2))) + (Math.pow((188.0) - (input[9]), 2))) + (Math.pow((19.1) - (input[10]), 2))) + (Math.pow((379.38) - (input[11]), 2))) + (Math.pow((17.58) - (input[12]), 2))));
    }
    public static double subroutine186(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.20746) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((27.74) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.609) - (input[4]), 2))) + (Math.pow((5.093) - (input[5]), 2))) + (Math.pow((98.0) - (input[6]), 2))) + (Math.pow((1.8226) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((711.0) - (input[9]), 2))) + (Math.pow((20.1) - (input[10]), 2))) + (Math.pow((318.43) - (input[11]), 2))) + (Math.pow((29.68) - (input[12]), 2))));
    }
    public static double subroutine187(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((4.83567) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.583) - (input[4]), 2))) + (Math.pow((5.905) - (input[5]), 2))) + (Math.pow((53.2) - (input[6]), 2))) + (Math.pow((3.1523) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((388.22) - (input[11]), 2))) + (Math.pow((11.45) - (input[12]), 2))));
    }
    public static double subroutine188(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.0686) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((2.89) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.445) - (input[4]), 2))) + (Math.pow((7.416) - (input[5]), 2))) + (Math.pow((62.5) - (input[6]), 2))) + (Math.pow((3.4952) - (input[7]), 2))) + (Math.pow((2.0) - (input[8]), 2))) + (Math.pow((276.0) - (input[9]), 2))) + (Math.pow((18.0) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((6.19) - (input[12]), 2))));
    }
    public static double subroutine189(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.29916) - (input[0]), 2)) + (Math.pow((20.0) - (input[1]), 2))) + (Math.pow((6.96) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.464) - (input[4]), 2))) + (Math.pow((5.856) - (input[5]), 2))) + (Math.pow((42.1) - (input[6]), 2))) + (Math.pow((4.429) - (input[7]), 2))) + (Math.pow((3.0) - (input[8]), 2))) + (Math.pow((223.0) - (input[9]), 2))) + (Math.pow((18.6) - (input[10]), 2))) + (Math.pow((388.65) - (input[11]), 2))) + (Math.pow((13.0) - (input[12]), 2))));
    }
    public static double subroutine190(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.51183) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((6.2) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.507) - (input[4]), 2))) + (Math.pow((7.358) - (input[5]), 2))) + (Math.pow((71.6) - (input[6]), 2))) + (Math.pow((4.148) - (input[7]), 2))) + (Math.pow((8.0) - (input[8]), 2))) + (Math.pow((307.0) - (input[9]), 2))) + (Math.pow((17.4) - (input[10]), 2))) + (Math.pow((390.07) - (input[11]), 2))) + (Math.pow((4.73) - (input[12]), 2))));
    }
    public static double subroutine191(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.18836) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((6.91) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.448) - (input[4]), 2))) + (Math.pow((5.786) - (input[5]), 2))) + (Math.pow((33.3) - (input[6]), 2))) + (Math.pow((5.1004) - (input[7]), 2))) + (Math.pow((3.0) - (input[8]), 2))) + (Math.pow((233.0) - (input[9]), 2))) + (Math.pow((17.9) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((14.15) - (input[12]), 2))));
    }
    public static double subroutine192(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((41.5292) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.693) - (input[4]), 2))) + (Math.pow((5.531) - (input[5]), 2))) + (Math.pow((85.4) - (input[6]), 2))) + (Math.pow((1.6074) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((329.46) - (input[11]), 2))) + (Math.pow((27.38) - (input[12]), 2))));
    }
    public static double subroutine193(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.1029) - (input[0]), 2)) + (Math.pow((30.0) - (input[1]), 2))) + (Math.pow((4.93) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.428) - (input[4]), 2))) + (Math.pow((6.358) - (input[5]), 2))) + (Math.pow((52.9) - (input[6]), 2))) + (Math.pow((7.0355) - (input[7]), 2))) + (Math.pow((6.0) - (input[8]), 2))) + (Math.pow((300.0) - (input[9]), 2))) + (Math.pow((16.6) - (input[10]), 2))) + (Math.pow((372.75) - (input[11]), 2))) + (Math.pow((11.22) - (input[12]), 2))));
    }
    public static double subroutine194(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.04297) - (input[0]), 2)) + (Math.pow((52.5) - (input[1]), 2))) + (Math.pow((5.32) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.405) - (input[4]), 2))) + (Math.pow((6.565) - (input[5]), 2))) + (Math.pow((22.9) - (input[6]), 2))) + (Math.pow((7.3172) - (input[7]), 2))) + (Math.pow((6.0) - (input[8]), 2))) + (Math.pow((293.0) - (input[9]), 2))) + (Math.pow((16.6) - (input[10]), 2))) + (Math.pow((371.72) - (input[11]), 2))) + (Math.pow((9.51) - (input[12]), 2))));
    }
    public static double subroutine195(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((1.51902) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((19.58) - (input[2]), 2))) + (Math.pow((1.0) - (input[3]), 2))) + (Math.pow((0.605) - (input[4]), 2))) + (Math.pow((8.375) - (input[5]), 2))) + (Math.pow((93.9) - (input[6]), 2))) + (Math.pow((2.162) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((403.0) - (input[9]), 2))) + (Math.pow((14.7) - (input[10]), 2))) + (Math.pow((388.45) - (input[11]), 2))) + (Math.pow((3.32) - (input[12]), 2))));
    }
    public static double subroutine196(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.08199) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((13.92) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.437) - (input[4]), 2))) + (Math.pow((6.009) - (input[5]), 2))) + (Math.pow((42.3) - (input[6]), 2))) + (Math.pow((5.5027) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((289.0) - (input[9]), 2))) + (Math.pow((16.0) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((10.4) - (input[12]), 2))));
    }
    public static double subroutine197(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.33045) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((6.2) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.507) - (input[4]), 2))) + (Math.pow((6.086) - (input[5]), 2))) + (Math.pow((61.5) - (input[6]), 2))) + (Math.pow((3.6519) - (input[7]), 2))) + (Math.pow((8.0) - (input[8]), 2))) + (Math.pow((307.0) - (input[9]), 2))) + (Math.pow((17.4) - (input[10]), 2))) + (Math.pow((376.75) - (input[11]), 2))) + (Math.pow((10.88) - (input[12]), 2))));
    }
    public static double subroutine198(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((19.6091) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.671) - (input[4]), 2))) + (Math.pow((7.313) - (input[5]), 2))) + (Math.pow((97.9) - (input[6]), 2))) + (Math.pow((1.3163) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((13.44) - (input[12]), 2))));
    }
    public static double subroutine199(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((1.61282) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((8.14) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.538) - (input[4]), 2))) + (Math.pow((6.096) - (input[5]), 2))) + (Math.pow((96.9) - (input[6]), 2))) + (Math.pow((3.7598) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((307.0) - (input[9]), 2))) + (Math.pow((21.0) - (input[10]), 2))) + (Math.pow((248.31) - (input[11]), 2))) + (Math.pow((20.34) - (input[12]), 2))));
    }
    public static double subroutine200(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((11.5779) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.7) - (input[4]), 2))) + (Math.pow((5.036) - (input[5]), 2))) + (Math.pow((97.0) - (input[6]), 2))) + (Math.pow((1.77) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((25.68) - (input[12]), 2))));
    }
    public static double subroutine201(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.17004) - (input[0]), 2)) + (Math.pow((12.5) - (input[1]), 2))) + (Math.pow((7.87) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.524) - (input[4]), 2))) + (Math.pow((6.004) - (input[5]), 2))) + (Math.pow((85.9) - (input[6]), 2))) + (Math.pow((6.5921) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((311.0) - (input[9]), 2))) + (Math.pow((15.2) - (input[10]), 2))) + (Math.pow((386.71) - (input[11]), 2))) + (Math.pow((17.1) - (input[12]), 2))));
    }
    public static double subroutine202(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((4.26131) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.77) - (input[4]), 2))) + (Math.pow((6.112) - (input[5]), 2))) + (Math.pow((81.3) - (input[6]), 2))) + (Math.pow((2.5091) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((390.74) - (input[11]), 2))) + (Math.pow((12.67) - (input[12]), 2))));
    }
    public static double subroutine203(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.08221) - (input[0]), 2)) + (Math.pow((22.0) - (input[1]), 2))) + (Math.pow((5.86) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.431) - (input[4]), 2))) + (Math.pow((6.957) - (input[5]), 2))) + (Math.pow((6.8) - (input[6]), 2))) + (Math.pow((8.9067) - (input[7]), 2))) + (Math.pow((7.0) - (input[8]), 2))) + (Math.pow((330.0) - (input[9]), 2))) + (Math.pow((19.1) - (input[10]), 2))) + (Math.pow((386.09) - (input[11]), 2))) + (Math.pow((3.53) - (input[12]), 2))));
    }
    public static double subroutine204(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((2.37857) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.583) - (input[4]), 2))) + (Math.pow((5.871) - (input[5]), 2))) + (Math.pow((41.9) - (input[6]), 2))) + (Math.pow((3.724) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((370.73) - (input[11]), 2))) + (Math.pow((13.34) - (input[12]), 2))));
    }
    public static double subroutine205(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((1.34284) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((19.58) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.605) - (input[4]), 2))) + (Math.pow((6.066) - (input[5]), 2))) + (Math.pow((100.0) - (input[6]), 2))) + (Math.pow((1.7573) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((403.0) - (input[9]), 2))) + (Math.pow((14.7) - (input[10]), 2))) + (Math.pow((353.89) - (input[11]), 2))) + (Math.pow((6.43) - (input[12]), 2))));
    }
    public static double subroutine206(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.25915) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((21.89) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.624) - (input[4]), 2))) + (Math.pow((5.693) - (input[5]), 2))) + (Math.pow((96.0) - (input[6]), 2))) + (Math.pow((1.7883) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((437.0) - (input[9]), 2))) + (Math.pow((21.2) - (input[10]), 2))) + (Math.pow((392.11) - (input[11]), 2))) + (Math.pow((17.19) - (input[12]), 2))));
    }
    public static double subroutine207(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((1.19294) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((21.89) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.624) - (input[4]), 2))) + (Math.pow((6.326) - (input[5]), 2))) + (Math.pow((97.7) - (input[6]), 2))) + (Math.pow((2.271) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((437.0) - (input[9]), 2))) + (Math.pow((21.2) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((12.26) - (input[12]), 2))));
    }
    public static double subroutine208(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.21038) - (input[0]), 2)) + (Math.pow((20.0) - (input[1]), 2))) + (Math.pow((3.33) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.4429) - (input[4]), 2))) + (Math.pow((6.812) - (input[5]), 2))) + (Math.pow((32.2) - (input[6]), 2))) + (Math.pow((4.1007) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((216.0) - (input[9]), 2))) + (Math.pow((14.9) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((4.85) - (input[12]), 2))));
    }
    public static double subroutine209(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.03113) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((4.39) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.442) - (input[4]), 2))) + (Math.pow((6.014) - (input[5]), 2))) + (Math.pow((48.5) - (input[6]), 2))) + (Math.pow((8.0136) - (input[7]), 2))) + (Math.pow((3.0) - (input[8]), 2))) + (Math.pow((352.0) - (input[9]), 2))) + (Math.pow((18.8) - (input[10]), 2))) + (Math.pow((385.64) - (input[11]), 2))) + (Math.pow((10.53) - (input[12]), 2))));
    }
    public static double subroutine210(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((5.87205) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.693) - (input[4]), 2))) + (Math.pow((6.405) - (input[5]), 2))) + (Math.pow((96.0) - (input[6]), 2))) + (Math.pow((1.6768) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((19.37) - (input[12]), 2))));
    }
    public static double subroutine211(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.11027) - (input[0]), 2)) + (Math.pow((25.0) - (input[1]), 2))) + (Math.pow((5.13) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.453) - (input[4]), 2))) + (Math.pow((6.456) - (input[5]), 2))) + (Math.pow((67.8) - (input[6]), 2))) + (Math.pow((7.2255) - (input[7]), 2))) + (Math.pow((8.0) - (input[8]), 2))) + (Math.pow((284.0) - (input[9]), 2))) + (Math.pow((19.7) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((6.73) - (input[12]), 2))));
    }
    public static double subroutine212(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.03551) - (input[0]), 2)) + (Math.pow((25.0) - (input[1]), 2))) + (Math.pow((4.86) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.426) - (input[4]), 2))) + (Math.pow((6.167) - (input[5]), 2))) + (Math.pow((46.7) - (input[6]), 2))) + (Math.pow((5.4007) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((281.0) - (input[9]), 2))) + (Math.pow((19.0) - (input[10]), 2))) + (Math.pow((390.64) - (input[11]), 2))) + (Math.pow((7.51) - (input[12]), 2))));
    }
    public static double subroutine213(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.0315) - (input[0]), 2)) + (Math.pow((95.0) - (input[1]), 2))) + (Math.pow((1.47) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.403) - (input[4]), 2))) + (Math.pow((6.975) - (input[5]), 2))) + (Math.pow((15.3) - (input[6]), 2))) + (Math.pow((7.6534) - (input[7]), 2))) + (Math.pow((3.0) - (input[8]), 2))) + (Math.pow((402.0) - (input[9]), 2))) + (Math.pow((17.0) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((4.56) - (input[12]), 2))));
    }
    public static double subroutine214(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.04113) - (input[0]), 2)) + (Math.pow((25.0) - (input[1]), 2))) + (Math.pow((4.86) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.426) - (input[4]), 2))) + (Math.pow((6.727) - (input[5]), 2))) + (Math.pow((33.5) - (input[6]), 2))) + (Math.pow((5.4007) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((281.0) - (input[9]), 2))) + (Math.pow((19.0) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((5.29) - (input[12]), 2))));
    }
    public static double subroutine215(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.13554) - (input[0]), 2)) + (Math.pow((12.5) - (input[1]), 2))) + (Math.pow((6.07) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.409) - (input[4]), 2))) + (Math.pow((5.594) - (input[5]), 2))) + (Math.pow((36.8) - (input[6]), 2))) + (Math.pow((6.498) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((345.0) - (input[9]), 2))) + (Math.pow((18.9) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((13.09) - (input[12]), 2))));
    }
    public static double subroutine216(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((14.2362) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.693) - (input[4]), 2))) + (Math.pow((6.343) - (input[5]), 2))) + (Math.pow((100.0) - (input[6]), 2))) + (Math.pow((1.5741) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((20.32) - (input[12]), 2))));
    }
    public static double subroutine217(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.04981) - (input[0]), 2)) + (Math.pow((21.0) - (input[1]), 2))) + (Math.pow((5.64) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.439) - (input[4]), 2))) + (Math.pow((5.998) - (input[5]), 2))) + (Math.pow((21.4) - (input[6]), 2))) + (Math.pow((6.8147) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((243.0) - (input[9]), 2))) + (Math.pow((16.8) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((8.43) - (input[12]), 2))));
    }
    public static double subroutine218(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.03615) - (input[0]), 2)) + (Math.pow((80.0) - (input[1]), 2))) + (Math.pow((4.95) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.411) - (input[4]), 2))) + (Math.pow((6.63) - (input[5]), 2))) + (Math.pow((23.4) - (input[6]), 2))) + (Math.pow((5.1167) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((245.0) - (input[9]), 2))) + (Math.pow((19.2) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((4.7) - (input[12]), 2))));
    }
    public static double subroutine219(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((5.82115) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.713) - (input[4]), 2))) + (Math.pow((6.513) - (input[5]), 2))) + (Math.pow((89.9) - (input[6]), 2))) + (Math.pow((2.8016) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((393.82) - (input[11]), 2))) + (Math.pow((10.29) - (input[12]), 2))));
    }
    public static double subroutine220(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((5.20177) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((1.0) - (input[3]), 2))) + (Math.pow((0.77) - (input[4]), 2))) + (Math.pow((6.127) - (input[5]), 2))) + (Math.pow((83.4) - (input[6]), 2))) + (Math.pow((2.7227) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((395.43) - (input[11]), 2))) + (Math.pow((11.48) - (input[12]), 2))));
    }
    public static double subroutine221(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.19073) - (input[0]), 2)) + (Math.pow((22.0) - (input[1]), 2))) + (Math.pow((5.86) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.431) - (input[4]), 2))) + (Math.pow((6.718) - (input[5]), 2))) + (Math.pow((17.5) - (input[6]), 2))) + (Math.pow((7.8265) - (input[7]), 2))) + (Math.pow((7.0) - (input[8]), 2))) + (Math.pow((330.0) - (input[9]), 2))) + (Math.pow((19.1) - (input[10]), 2))) + (Math.pow((393.74) - (input[11]), 2))) + (Math.pow((6.56) - (input[12]), 2))));
    }
    public static double subroutine222(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((9.2323) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.631) - (input[4]), 2))) + (Math.pow((6.216) - (input[5]), 2))) + (Math.pow((100.0) - (input[6]), 2))) + (Math.pow((1.1691) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((366.15) - (input[11]), 2))) + (Math.pow((9.53) - (input[12]), 2))));
    }
    public static double subroutine223(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.07875) - (input[0]), 2)) + (Math.pow((45.0) - (input[1]), 2))) + (Math.pow((3.44) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.437) - (input[4]), 2))) + (Math.pow((6.782) - (input[5]), 2))) + (Math.pow((41.1) - (input[6]), 2))) + (Math.pow((3.7886) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((398.0) - (input[9]), 2))) + (Math.pow((15.2) - (input[10]), 2))) + (Math.pow((393.87) - (input[11]), 2))) + (Math.pow((6.68) - (input[12]), 2))));
    }
    public static double subroutine224(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.09065) - (input[0]), 2)) + (Math.pow((20.0) - (input[1]), 2))) + (Math.pow((6.96) - (input[2]), 2))) + (Math.pow((1.0) - (input[3]), 2))) + (Math.pow((0.464) - (input[4]), 2))) + (Math.pow((5.92) - (input[5]), 2))) + (Math.pow((61.5) - (input[6]), 2))) + (Math.pow((3.9175) - (input[7]), 2))) + (Math.pow((3.0) - (input[8]), 2))) + (Math.pow((223.0) - (input[9]), 2))) + (Math.pow((18.6) - (input[10]), 2))) + (Math.pow((391.34) - (input[11]), 2))) + (Math.pow((13.65) - (input[12]), 2))));
    }
    public static double subroutine225(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.22489) - (input[0]), 2)) + (Math.pow((12.5) - (input[1]), 2))) + (Math.pow((7.87) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.524) - (input[4]), 2))) + (Math.pow((6.377) - (input[5]), 2))) + (Math.pow((94.3) - (input[6]), 2))) + (Math.pow((6.3467) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((311.0) - (input[9]), 2))) + (Math.pow((15.2) - (input[10]), 2))) + (Math.pow((392.52) - (input[11]), 2))) + (Math.pow((20.45) - (input[12]), 2))));
    }
    public static double subroutine226(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((7.40389) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.597) - (input[4]), 2))) + (Math.pow((5.617) - (input[5]), 2))) + (Math.pow((97.9) - (input[6]), 2))) + (Math.pow((1.4547) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((314.64) - (input[11]), 2))) + (Math.pow((26.4) - (input[12]), 2))));
    }
    public static double subroutine227(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.18159) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((7.38) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.493) - (input[4]), 2))) + (Math.pow((6.376) - (input[5]), 2))) + (Math.pow((54.3) - (input[6]), 2))) + (Math.pow((4.5404) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((287.0) - (input[9]), 2))) + (Math.pow((19.6) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((6.87) - (input[12]), 2))));
    }
    public static double subroutine228(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((37.6619) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.679) - (input[4]), 2))) + (Math.pow((6.202) - (input[5]), 2))) + (Math.pow((78.7) - (input[6]), 2))) + (Math.pow((1.8629) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((18.82) - (input[11]), 2))) + (Math.pow((14.52) - (input[12]), 2))));
    }
    public static double subroutine229(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((1.6566) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((19.58) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.871) - (input[4]), 2))) + (Math.pow((6.122) - (input[5]), 2))) + (Math.pow((97.3) - (input[6]), 2))) + (Math.pow((1.618) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((403.0) - (input[9]), 2))) + (Math.pow((14.7) - (input[10]), 2))) + (Math.pow((372.8) - (input[11]), 2))) + (Math.pow((14.1) - (input[12]), 2))));
    }
    public static double subroutine230(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.06162) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((4.39) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.442) - (input[4]), 2))) + (Math.pow((5.898) - (input[5]), 2))) + (Math.pow((52.3) - (input[6]), 2))) + (Math.pow((8.0136) - (input[7]), 2))) + (Math.pow((3.0) - (input[8]), 2))) + (Math.pow((352.0) - (input[9]), 2))) + (Math.pow((18.8) - (input[10]), 2))) + (Math.pow((364.61) - (input[11]), 2))) + (Math.pow((12.67) - (input[12]), 2))));
    }
    public static double subroutine231(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.22188) - (input[0]), 2)) + (Math.pow((20.0) - (input[1]), 2))) + (Math.pow((6.96) - (input[2]), 2))) + (Math.pow((1.0) - (input[3]), 2))) + (Math.pow((0.464) - (input[4]), 2))) + (Math.pow((7.691) - (input[5]), 2))) + (Math.pow((51.8) - (input[6]), 2))) + (Math.pow((4.3665) - (input[7]), 2))) + (Math.pow((3.0) - (input[8]), 2))) + (Math.pow((223.0) - (input[9]), 2))) + (Math.pow((18.6) - (input[10]), 2))) + (Math.pow((390.77) - (input[11]), 2))) + (Math.pow((6.58) - (input[12]), 2))));
    }
    public static double subroutine232(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((15.8744) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.671) - (input[4]), 2))) + (Math.pow((6.545) - (input[5]), 2))) + (Math.pow((99.1) - (input[6]), 2))) + (Math.pow((1.5192) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((21.08) - (input[12]), 2))));
    }
    public static double subroutine233(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((1.80028) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((19.58) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.605) - (input[4]), 2))) + (Math.pow((5.877) - (input[5]), 2))) + (Math.pow((79.2) - (input[6]), 2))) + (Math.pow((2.4259) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((403.0) - (input[9]), 2))) + (Math.pow((14.7) - (input[10]), 2))) + (Math.pow((227.61) - (input[11]), 2))) + (Math.pow((12.14) - (input[12]), 2))));
    }
    public static double subroutine234(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((2.33099) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((19.58) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.871) - (input[4]), 2))) + (Math.pow((5.186) - (input[5]), 2))) + (Math.pow((93.8) - (input[6]), 2))) + (Math.pow((1.5296) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((403.0) - (input[9]), 2))) + (Math.pow((14.7) - (input[10]), 2))) + (Math.pow((356.99) - (input[11]), 2))) + (Math.pow((28.32) - (input[12]), 2))));
    }
    public static double subroutine235(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((4.54192) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.77) - (input[4]), 2))) + (Math.pow((6.398) - (input[5]), 2))) + (Math.pow((88.0) - (input[6]), 2))) + (Math.pow((2.5182) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((374.56) - (input[11]), 2))) + (Math.pow((7.79) - (input[12]), 2))));
    }
    public static double subroutine236(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((24.3938) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.7) - (input[4]), 2))) + (Math.pow((4.652) - (input[5]), 2))) + (Math.pow((100.0) - (input[6]), 2))) + (Math.pow((1.4672) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((28.28) - (input[12]), 2))));
    }
    public static double subroutine237(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.12744) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((6.91) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.448) - (input[4]), 2))) + (Math.pow((6.77) - (input[5]), 2))) + (Math.pow((2.9) - (input[6]), 2))) + (Math.pow((5.7209) - (input[7]), 2))) + (Math.pow((3.0) - (input[8]), 2))) + (Math.pow((233.0) - (input[9]), 2))) + (Math.pow((17.9) - (input[10]), 2))) + (Math.pow((385.41) - (input[11]), 2))) + (Math.pow((4.84) - (input[12]), 2))));
    }
    public static double subroutine238(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.04741) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((11.93) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.573) - (input[4]), 2))) + (Math.pow((6.03) - (input[5]), 2))) + (Math.pow((80.8) - (input[6]), 2))) + (Math.pow((2.505) - (input[7]), 2))) + (Math.pow((1.0) - (input[8]), 2))) + (Math.pow((273.0) - (input[9]), 2))) + (Math.pow((21.0) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((7.88) - (input[12]), 2))));
    }
    public static double subroutine239(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.07165) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((25.65) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.581) - (input[4]), 2))) + (Math.pow((6.004) - (input[5]), 2))) + (Math.pow((84.1) - (input[6]), 2))) + (Math.pow((2.1974) - (input[7]), 2))) + (Math.pow((2.0) - (input[8]), 2))) + (Math.pow((188.0) - (input[9]), 2))) + (Math.pow((19.1) - (input[10]), 2))) + (Math.pow((377.67) - (input[11]), 2))) + (Math.pow((14.27) - (input[12]), 2))));
    }
    public static double subroutine240(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.04819) - (input[0]), 2)) + (Math.pow((80.0) - (input[1]), 2))) + (Math.pow((3.64) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.392) - (input[4]), 2))) + (Math.pow((6.108) - (input[5]), 2))) + (Math.pow((32.0) - (input[6]), 2))) + (Math.pow((9.2203) - (input[7]), 2))) + (Math.pow((1.0) - (input[8]), 2))) + (Math.pow((315.0) - (input[9]), 2))) + (Math.pow((16.4) - (input[10]), 2))) + (Math.pow((392.89) - (input[11]), 2))) + (Math.pow((6.57) - (input[12]), 2))));
    }
    public static double subroutine241(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.98843) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((8.14) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.538) - (input[4]), 2))) + (Math.pow((5.813) - (input[5]), 2))) + (Math.pow((100.0) - (input[6]), 2))) + (Math.pow((4.0952) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((307.0) - (input[9]), 2))) + (Math.pow((21.0) - (input[10]), 2))) + (Math.pow((394.54) - (input[11]), 2))) + (Math.pow((19.88) - (input[12]), 2))));
    }
    public static double subroutine242(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((12.8023) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.74) - (input[4]), 2))) + (Math.pow((5.854) - (input[5]), 2))) + (Math.pow((96.6) - (input[6]), 2))) + (Math.pow((1.8956) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((240.52) - (input[11]), 2))) + (Math.pow((23.79) - (input[12]), 2))));
    }
    public static double subroutine243(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.13914) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((4.05) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.51) - (input[4]), 2))) + (Math.pow((5.572) - (input[5]), 2))) + (Math.pow((88.5) - (input[6]), 2))) + (Math.pow((2.5961) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((296.0) - (input[9]), 2))) + (Math.pow((16.6) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((14.69) - (input[12]), 2))));
    }
    public static double subroutine244(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.0536) - (input[0]), 2)) + (Math.pow((21.0) - (input[1]), 2))) + (Math.pow((5.64) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.439) - (input[4]), 2))) + (Math.pow((6.511) - (input[5]), 2))) + (Math.pow((21.1) - (input[6]), 2))) + (Math.pow((6.8147) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((243.0) - (input[9]), 2))) + (Math.pow((16.8) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((5.28) - (input[12]), 2))));
    }
    public static double subroutine245(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((7.75223) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.713) - (input[4]), 2))) + (Math.pow((6.301) - (input[5]), 2))) + (Math.pow((83.7) - (input[6]), 2))) + (Math.pow((2.7831) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((272.21) - (input[11]), 2))) + (Math.pow((16.23) - (input[12]), 2))));
    }
    public static double subroutine246(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((9.91655) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.693) - (input[4]), 2))) + (Math.pow((5.852) - (input[5]), 2))) + (Math.pow((77.8) - (input[6]), 2))) + (Math.pow((1.5004) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((338.16) - (input[11]), 2))) + (Math.pow((29.97) - (input[12]), 2))));
    }
    public static double subroutine247(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.08826) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((10.81) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.413) - (input[4]), 2))) + (Math.pow((6.417) - (input[5]), 2))) + (Math.pow((6.6) - (input[6]), 2))) + (Math.pow((5.2873) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((305.0) - (input[9]), 2))) + (Math.pow((19.2) - (input[10]), 2))) + (Math.pow((383.73) - (input[11]), 2))) + (Math.pow((6.72) - (input[12]), 2))));
    }
    public static double subroutine248(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((1.38799) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((8.14) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.538) - (input[4]), 2))) + (Math.pow((5.95) - (input[5]), 2))) + (Math.pow((82.0) - (input[6]), 2))) + (Math.pow((3.99) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((307.0) - (input[9]), 2))) + (Math.pow((21.0) - (input[10]), 2))) + (Math.pow((232.6) - (input[11]), 2))) + (Math.pow((27.71) - (input[12]), 2))));
    }
    public static double subroutine249(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.15936) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((6.91) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.448) - (input[4]), 2))) + (Math.pow((6.211) - (input[5]), 2))) + (Math.pow((6.5) - (input[6]), 2))) + (Math.pow((5.7209) - (input[7]), 2))) + (Math.pow((3.0) - (input[8]), 2))) + (Math.pow((233.0) - (input[9]), 2))) + (Math.pow((17.9) - (input[10]), 2))) + (Math.pow((394.46) - (input[11]), 2))) + (Math.pow((7.44) - (input[12]), 2))));
    }
    public static double subroutine250(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.12802) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((8.56) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.52) - (input[4]), 2))) + (Math.pow((6.474) - (input[5]), 2))) + (Math.pow((97.1) - (input[6]), 2))) + (Math.pow((2.4329) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((384.0) - (input[9]), 2))) + (Math.pow((20.9) - (input[10]), 2))) + (Math.pow((395.24) - (input[11]), 2))) + (Math.pow((12.27) - (input[12]), 2))));
    }
    public static double subroutine251(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.19133) - (input[0]), 2)) + (Math.pow((22.0) - (input[1]), 2))) + (Math.pow((5.86) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.431) - (input[4]), 2))) + (Math.pow((5.605) - (input[5]), 2))) + (Math.pow((70.2) - (input[6]), 2))) + (Math.pow((7.9549) - (input[7]), 2))) + (Math.pow((7.0) - (input[8]), 2))) + (Math.pow((330.0) - (input[9]), 2))) + (Math.pow((19.1) - (input[10]), 2))) + (Math.pow((389.13) - (input[11]), 2))) + (Math.pow((18.46) - (input[12]), 2))));
    }
    public static double subroutine252(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.05059) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((4.49) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.449) - (input[4]), 2))) + (Math.pow((6.389) - (input[5]), 2))) + (Math.pow((48.0) - (input[6]), 2))) + (Math.pow((4.7794) - (input[7]), 2))) + (Math.pow((3.0) - (input[8]), 2))) + (Math.pow((247.0) - (input[9]), 2))) + (Math.pow((18.5) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((9.62) - (input[12]), 2))));
    }
    public static double subroutine253(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.06047) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((2.46) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.488) - (input[4]), 2))) + (Math.pow((6.153) - (input[5]), 2))) + (Math.pow((68.8) - (input[6]), 2))) + (Math.pow((3.2797) - (input[7]), 2))) + (Math.pow((3.0) - (input[8]), 2))) + (Math.pow((193.0) - (input[9]), 2))) + (Math.pow((17.8) - (input[10]), 2))) + (Math.pow((387.11) - (input[11]), 2))) + (Math.pow((13.15) - (input[12]), 2))));
    }
    public static double subroutine254(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.06151) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((5.19) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.515) - (input[4]), 2))) + (Math.pow((5.968) - (input[5]), 2))) + (Math.pow((58.5) - (input[6]), 2))) + (Math.pow((4.8122) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((224.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((9.29) - (input[12]), 2))));
    }
    public static double subroutine255(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.01439) - (input[0]), 2)) + (Math.pow((60.0) - (input[1]), 2))) + (Math.pow((2.93) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.401) - (input[4]), 2))) + (Math.pow((6.604) - (input[5]), 2))) + (Math.pow((18.8) - (input[6]), 2))) + (Math.pow((6.2196) - (input[7]), 2))) + (Math.pow((1.0) - (input[8]), 2))) + (Math.pow((265.0) - (input[9]), 2))) + (Math.pow((15.6) - (input[10]), 2))) + (Math.pow((376.7) - (input[11]), 2))) + (Math.pow((4.38) - (input[12]), 2))));
    }
    public static double subroutine256(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((22.0511) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.74) - (input[4]), 2))) + (Math.pow((5.818) - (input[5]), 2))) + (Math.pow((92.4) - (input[6]), 2))) + (Math.pow((1.8662) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((391.45) - (input[11]), 2))) + (Math.pow((22.11) - (input[12]), 2))));
    }
    public static double subroutine257(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.00906) - (input[0]), 2)) + (Math.pow((90.0) - (input[1]), 2))) + (Math.pow((2.97) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.4) - (input[4]), 2))) + (Math.pow((7.088) - (input[5]), 2))) + (Math.pow((20.8) - (input[6]), 2))) + (Math.pow((7.3073) - (input[7]), 2))) + (Math.pow((1.0) - (input[8]), 2))) + (Math.pow((285.0) - (input[9]), 2))) + (Math.pow((15.3) - (input[10]), 2))) + (Math.pow((394.72) - (input[11]), 2))) + (Math.pow((7.85) - (input[12]), 2))));
    }
    public static double subroutine258(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.61154) - (input[0]), 2)) + (Math.pow((20.0) - (input[1]), 2))) + (Math.pow((3.97) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.647) - (input[4]), 2))) + (Math.pow((8.704) - (input[5]), 2))) + (Math.pow((86.9) - (input[6]), 2))) + (Math.pow((1.801) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((264.0) - (input[9]), 2))) + (Math.pow((13.0) - (input[10]), 2))) + (Math.pow((389.7) - (input[11]), 2))) + (Math.pow((5.12) - (input[12]), 2))));
    }
    public static double subroutine259(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.01311) - (input[0]), 2)) + (Math.pow((90.0) - (input[1]), 2))) + (Math.pow((1.22) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.403) - (input[4]), 2))) + (Math.pow((7.249) - (input[5]), 2))) + (Math.pow((21.9) - (input[6]), 2))) + (Math.pow((8.6966) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((226.0) - (input[9]), 2))) + (Math.pow((17.9) - (input[10]), 2))) + (Math.pow((395.93) - (input[11]), 2))) + (Math.pow((4.81) - (input[12]), 2))));
    }
    public static double subroutine260(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((10.8342) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.679) - (input[4]), 2))) + (Math.pow((6.782) - (input[5]), 2))) + (Math.pow((90.8) - (input[6]), 2))) + (Math.pow((1.8195) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((21.57) - (input[11]), 2))) + (Math.pow((25.79) - (input[12]), 2))));
    }
    public static double subroutine261(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((28.6558) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.597) - (input[4]), 2))) + (Math.pow((5.155) - (input[5]), 2))) + (Math.pow((100.0) - (input[6]), 2))) + (Math.pow((1.5894) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((210.97) - (input[11]), 2))) + (Math.pow((20.08) - (input[12]), 2))));
    }
    public static double subroutine262(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.1265) - (input[0]), 2)) + (Math.pow((25.0) - (input[1]), 2))) + (Math.pow((5.13) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.453) - (input[4]), 2))) + (Math.pow((6.762) - (input[5]), 2))) + (Math.pow((43.4) - (input[6]), 2))) + (Math.pow((7.9809) - (input[7]), 2))) + (Math.pow((8.0) - (input[8]), 2))) + (Math.pow((284.0) - (input[9]), 2))) + (Math.pow((19.7) - (input[10]), 2))) + (Math.pow((395.58) - (input[11]), 2))) + (Math.pow((9.5) - (input[12]), 2))));
    }
    public static double subroutine263(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.1415) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((6.91) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.448) - (input[4]), 2))) + (Math.pow((6.169) - (input[5]), 2))) + (Math.pow((6.6) - (input[6]), 2))) + (Math.pow((5.7209) - (input[7]), 2))) + (Math.pow((3.0) - (input[8]), 2))) + (Math.pow((233.0) - (input[9]), 2))) + (Math.pow((17.9) - (input[10]), 2))) + (Math.pow((383.37) - (input[11]), 2))) + (Math.pow((5.81) - (input[12]), 2))));
    }
    public static double subroutine264(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((15.5757) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.58) - (input[4]), 2))) + (Math.pow((5.926) - (input[5]), 2))) + (Math.pow((71.0) - (input[6]), 2))) + (Math.pow((2.9084) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((368.74) - (input[11]), 2))) + (Math.pow((18.13) - (input[12]), 2))));
    }
    public static double subroutine265(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.02985) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((2.18) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.458) - (input[4]), 2))) + (Math.pow((6.43) - (input[5]), 2))) + (Math.pow((58.7) - (input[6]), 2))) + (Math.pow((6.0622) - (input[7]), 2))) + (Math.pow((3.0) - (input[8]), 2))) + (Math.pow((222.0) - (input[9]), 2))) + (Math.pow((18.7) - (input[10]), 2))) + (Math.pow((394.12) - (input[11]), 2))) + (Math.pow((5.21) - (input[12]), 2))));
    }
    public static double subroutine266(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.88125) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((21.89) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.624) - (input[4]), 2))) + (Math.pow((5.637) - (input[5]), 2))) + (Math.pow((94.7) - (input[6]), 2))) + (Math.pow((1.9799) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((437.0) - (input[9]), 2))) + (Math.pow((21.2) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((18.34) - (input[12]), 2))));
    }
    public static double subroutine267(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.40202) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((9.9) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.544) - (input[4]), 2))) + (Math.pow((6.382) - (input[5]), 2))) + (Math.pow((67.2) - (input[6]), 2))) + (Math.pow((3.5325) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((304.0) - (input[9]), 2))) + (Math.pow((18.4) - (input[10]), 2))) + (Math.pow((395.21) - (input[11]), 2))) + (Math.pow((10.36) - (input[12]), 2))));
    }
    public static double subroutine268(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.04544) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((3.24) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.46) - (input[4]), 2))) + (Math.pow((6.144) - (input[5]), 2))) + (Math.pow((32.2) - (input[6]), 2))) + (Math.pow((5.8736) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((430.0) - (input[9]), 2))) + (Math.pow((16.9) - (input[10]), 2))) + (Math.pow((368.57) - (input[11]), 2))) + (Math.pow((9.09) - (input[12]), 2))));
    }
    public static double subroutine269(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.7842) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((8.14) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.538) - (input[4]), 2))) + (Math.pow((5.99) - (input[5]), 2))) + (Math.pow((81.7) - (input[6]), 2))) + (Math.pow((4.2579) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((307.0) - (input[9]), 2))) + (Math.pow((21.0) - (input[10]), 2))) + (Math.pow((386.75) - (input[11]), 2))) + (Math.pow((14.67) - (input[12]), 2))));
    }
    public static double subroutine270(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.09744) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((5.96) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.499) - (input[4]), 2))) + (Math.pow((5.841) - (input[5]), 2))) + (Math.pow((61.4) - (input[6]), 2))) + (Math.pow((3.3779) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((279.0) - (input[9]), 2))) + (Math.pow((19.2) - (input[10]), 2))) + (Math.pow((377.56) - (input[11]), 2))) + (Math.pow((11.41) - (input[12]), 2))));
    }
    public static double subroutine271(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((15.8603) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.679) - (input[4]), 2))) + (Math.pow((5.896) - (input[5]), 2))) + (Math.pow((95.4) - (input[6]), 2))) + (Math.pow((1.9096) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((7.68) - (input[11]), 2))) + (Math.pow((24.39) - (input[12]), 2))));
    }
    public static double subroutine272(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.03871) - (input[0]), 2)) + (Math.pow((52.5) - (input[1]), 2))) + (Math.pow((5.32) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.405) - (input[4]), 2))) + (Math.pow((6.209) - (input[5]), 2))) + (Math.pow((31.3) - (input[6]), 2))) + (Math.pow((7.3172) - (input[7]), 2))) + (Math.pow((6.0) - (input[8]), 2))) + (Math.pow((293.0) - (input[9]), 2))) + (Math.pow((16.6) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((7.14) - (input[12]), 2))));
    }
    public static double subroutine273(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.35809) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((6.2) - (input[2]), 2))) + (Math.pow((1.0) - (input[3]), 2))) + (Math.pow((0.507) - (input[4]), 2))) + (Math.pow((6.951) - (input[5]), 2))) + (Math.pow((88.5) - (input[6]), 2))) + (Math.pow((2.8617) - (input[7]), 2))) + (Math.pow((8.0) - (input[8]), 2))) + (Math.pow((307.0) - (input[9]), 2))) + (Math.pow((17.4) - (input[10]), 2))) + (Math.pow((391.7) - (input[11]), 2))) + (Math.pow((9.71) - (input[12]), 2))));
    }
    public static double subroutine274(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.31827) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((9.9) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.544) - (input[4]), 2))) + (Math.pow((5.914) - (input[5]), 2))) + (Math.pow((83.2) - (input[6]), 2))) + (Math.pow((3.9986) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((304.0) - (input[9]), 2))) + (Math.pow((18.4) - (input[10]), 2))) + (Math.pow((390.7) - (input[11]), 2))) + (Math.pow((18.33) - (input[12]), 2))));
    }
    public static double subroutine275(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.17142) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((6.91) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.448) - (input[4]), 2))) + (Math.pow((5.682) - (input[5]), 2))) + (Math.pow((33.8) - (input[6]), 2))) + (Math.pow((5.1004) - (input[7]), 2))) + (Math.pow((3.0) - (input[8]), 2))) + (Math.pow((233.0) - (input[9]), 2))) + (Math.pow((17.9) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((10.21) - (input[12]), 2))));
    }
    public static double subroutine276(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.32543) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((21.89) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.624) - (input[4]), 2))) + (Math.pow((6.431) - (input[5]), 2))) + (Math.pow((98.8) - (input[6]), 2))) + (Math.pow((1.8125) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((437.0) - (input[9]), 2))) + (Math.pow((21.2) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((15.39) - (input[12]), 2))));
    }
    public static double subroutine277(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((17.8667) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.671) - (input[4]), 2))) + (Math.pow((6.223) - (input[5]), 2))) + (Math.pow((100.0) - (input[6]), 2))) + (Math.pow((1.3861) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((393.74) - (input[11]), 2))) + (Math.pow((21.78) - (input[12]), 2))));
    }
    public static double subroutine278(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.07151) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((4.49) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.449) - (input[4]), 2))) + (Math.pow((6.121) - (input[5]), 2))) + (Math.pow((56.8) - (input[6]), 2))) + (Math.pow((3.7476) - (input[7]), 2))) + (Math.pow((3.0) - (input[8]), 2))) + (Math.pow((247.0) - (input[9]), 2))) + (Math.pow((18.5) - (input[10]), 2))) + (Math.pow((395.15) - (input[11]), 2))) + (Math.pow((8.44) - (input[12]), 2))));
    }
    public static double subroutine279(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.12204) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((2.89) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.445) - (input[4]), 2))) + (Math.pow((6.625) - (input[5]), 2))) + (Math.pow((57.8) - (input[6]), 2))) + (Math.pow((3.4952) - (input[7]), 2))) + (Math.pow((2.0) - (input[8]), 2))) + (Math.pow((276.0) - (input[9]), 2))) + (Math.pow((18.0) - (input[10]), 2))) + (Math.pow((357.98) - (input[11]), 2))) + (Math.pow((6.65) - (input[12]), 2))));
    }
    public static double subroutine280(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((7.36711) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.679) - (input[4]), 2))) + (Math.pow((6.193) - (input[5]), 2))) + (Math.pow((78.1) - (input[6]), 2))) + (Math.pow((1.9356) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((96.73) - (input[11]), 2))) + (Math.pow((21.52) - (input[12]), 2))));
    }
    public static double subroutine281(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.03359) - (input[0]), 2)) + (Math.pow((75.0) - (input[1]), 2))) + (Math.pow((2.95) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.428) - (input[4]), 2))) + (Math.pow((7.024) - (input[5]), 2))) + (Math.pow((15.8) - (input[6]), 2))) + (Math.pow((5.4011) - (input[7]), 2))) + (Math.pow((3.0) - (input[8]), 2))) + (Math.pow((252.0) - (input[9]), 2))) + (Math.pow((18.3) - (input[10]), 2))) + (Math.pow((395.62) - (input[11]), 2))) + (Math.pow((1.98) - (input[12]), 2))));
    }
    public static double subroutine282(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.06905) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((2.18) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.458) - (input[4]), 2))) + (Math.pow((7.147) - (input[5]), 2))) + (Math.pow((54.2) - (input[6]), 2))) + (Math.pow((6.0622) - (input[7]), 2))) + (Math.pow((3.0) - (input[8]), 2))) + (Math.pow((222.0) - (input[9]), 2))) + (Math.pow((18.7) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((5.33) - (input[12]), 2))));
    }
    public static double subroutine283(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.2896) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((9.69) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.585) - (input[4]), 2))) + (Math.pow((5.39) - (input[5]), 2))) + (Math.pow((72.9) - (input[6]), 2))) + (Math.pow((2.7986) - (input[7]), 2))) + (Math.pow((6.0) - (input[8]), 2))) + (Math.pow((391.0) - (input[9]), 2))) + (Math.pow((19.2) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((21.14) - (input[12]), 2))));
    }
    public static double subroutine284(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.05188) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((4.49) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.449) - (input[4]), 2))) + (Math.pow((6.015) - (input[5]), 2))) + (Math.pow((45.1) - (input[6]), 2))) + (Math.pow((4.4272) - (input[7]), 2))) + (Math.pow((3.0) - (input[8]), 2))) + (Math.pow((247.0) - (input[9]), 2))) + (Math.pow((18.5) - (input[10]), 2))) + (Math.pow((395.99) - (input[11]), 2))) + (Math.pow((12.86) - (input[12]), 2))));
    }
    public static double subroutine285(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.14932) - (input[0]), 2)) + (Math.pow((25.0) - (input[1]), 2))) + (Math.pow((5.13) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.453) - (input[4]), 2))) + (Math.pow((5.741) - (input[5]), 2))) + (Math.pow((66.2) - (input[6]), 2))) + (Math.pow((7.2254) - (input[7]), 2))) + (Math.pow((8.0) - (input[8]), 2))) + (Math.pow((284.0) - (input[9]), 2))) + (Math.pow((19.7) - (input[10]), 2))) + (Math.pow((395.11) - (input[11]), 2))) + (Math.pow((13.15) - (input[12]), 2))));
    }
    public static double subroutine286(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.05561) - (input[0]), 2)) + (Math.pow((70.0) - (input[1]), 2))) + (Math.pow((2.24) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.4) - (input[4]), 2))) + (Math.pow((7.041) - (input[5]), 2))) + (Math.pow((10.0) - (input[6]), 2))) + (Math.pow((7.8278) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((358.0) - (input[9]), 2))) + (Math.pow((14.8) - (input[10]), 2))) + (Math.pow((371.58) - (input[11]), 2))) + (Math.pow((4.74) - (input[12]), 2))));
    }
    public static double subroutine287(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((8.20058) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.713) - (input[4]), 2))) + (Math.pow((5.936) - (input[5]), 2))) + (Math.pow((80.3) - (input[6]), 2))) + (Math.pow((2.7792) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((3.5) - (input[11]), 2))) + (Math.pow((16.94) - (input[12]), 2))));
    }
    public static double subroutine288(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.21719) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((10.59) - (input[2]), 2))) + (Math.pow((1.0) - (input[3]), 2))) + (Math.pow((0.489) - (input[4]), 2))) + (Math.pow((5.807) - (input[5]), 2))) + (Math.pow((53.8) - (input[6]), 2))) + (Math.pow((3.6526) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((277.0) - (input[9]), 2))) + (Math.pow((18.6) - (input[10]), 2))) + (Math.pow((390.94) - (input[11]), 2))) + (Math.pow((16.03) - (input[12]), 2))));
    }
    public static double subroutine289(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.77299) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((8.14) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.538) - (input[4]), 2))) + (Math.pow((6.495) - (input[5]), 2))) + (Math.pow((94.4) - (input[6]), 2))) + (Math.pow((4.4547) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((307.0) - (input[9]), 2))) + (Math.pow((21.0) - (input[10]), 2))) + (Math.pow((387.94) - (input[11]), 2))) + (Math.pow((12.8) - (input[12]), 2))));
    }
    public static double subroutine290(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.06888) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((2.46) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.488) - (input[4]), 2))) + (Math.pow((6.144) - (input[5]), 2))) + (Math.pow((62.2) - (input[6]), 2))) + (Math.pow((2.5979) - (input[7]), 2))) + (Math.pow((3.0) - (input[8]), 2))) + (Math.pow((193.0) - (input[9]), 2))) + (Math.pow((17.8) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((9.45) - (input[12]), 2))));
    }
    public static double subroutine291(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.12932) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((13.92) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.437) - (input[4]), 2))) + (Math.pow((6.678) - (input[5]), 2))) + (Math.pow((31.1) - (input[6]), 2))) + (Math.pow((5.9604) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((289.0) - (input[9]), 2))) + (Math.pow((16.0) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((6.27) - (input[12]), 2))));
    }
    public static double subroutine292(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((4.75237) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.713) - (input[4]), 2))) + (Math.pow((6.525) - (input[5]), 2))) + (Math.pow((86.5) - (input[6]), 2))) + (Math.pow((2.4358) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((50.92) - (input[11]), 2))) + (Math.pow((18.13) - (input[12]), 2))));
    }
    public static double subroutine293(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.01951) - (input[0]), 2)) + (Math.pow((17.5) - (input[1]), 2))) + (Math.pow((1.38) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.4161) - (input[4]), 2))) + (Math.pow((7.104) - (input[5]), 2))) + (Math.pow((59.5) - (input[6]), 2))) + (Math.pow((9.2229) - (input[7]), 2))) + (Math.pow((3.0) - (input[8]), 2))) + (Math.pow((216.0) - (input[9]), 2))) + (Math.pow((18.6) - (input[10]), 2))) + (Math.pow((393.24) - (input[11]), 2))) + (Math.pow((8.05) - (input[12]), 2))));
    }
    public static double subroutine294(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((8.26725) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((1.0) - (input[3]), 2))) + (Math.pow((0.668) - (input[4]), 2))) + (Math.pow((5.875) - (input[5]), 2))) + (Math.pow((89.6) - (input[6]), 2))) + (Math.pow((1.1296) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((347.88) - (input[11]), 2))) + (Math.pow((8.88) - (input[12]), 2))));
    }
    public static double subroutine295(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((4.42228) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.584) - (input[4]), 2))) + (Math.pow((6.003) - (input[5]), 2))) + (Math.pow((94.5) - (input[6]), 2))) + (Math.pow((2.5403) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((331.29) - (input[11]), 2))) + (Math.pow((21.32) - (input[12]), 2))));
    }
    public static double subroutine296(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.17505) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((5.96) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.499) - (input[4]), 2))) + (Math.pow((5.966) - (input[5]), 2))) + (Math.pow((30.2) - (input[6]), 2))) + (Math.pow((3.8473) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((279.0) - (input[9]), 2))) + (Math.pow((19.2) - (input[10]), 2))) + (Math.pow((393.43) - (input[11]), 2))) + (Math.pow((10.13) - (input[12]), 2))));
    }
    public static double subroutine297(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.16439) - (input[0]), 2)) + (Math.pow((22.0) - (input[1]), 2))) + (Math.pow((5.86) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.431) - (input[4]), 2))) + (Math.pow((6.433) - (input[5]), 2))) + (Math.pow((49.1) - (input[6]), 2))) + (Math.pow((7.8265) - (input[7]), 2))) + (Math.pow((7.0) - (input[8]), 2))) + (Math.pow((330.0) - (input[9]), 2))) + (Math.pow((19.1) - (input[10]), 2))) + (Math.pow((374.71) - (input[11]), 2))) + (Math.pow((9.52) - (input[12]), 2))));
    }
    public static double subroutine298(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((3.77498) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.655) - (input[4]), 2))) + (Math.pow((5.952) - (input[5]), 2))) + (Math.pow((84.7) - (input[6]), 2))) + (Math.pow((2.8715) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((22.01) - (input[11]), 2))) + (Math.pow((17.15) - (input[12]), 2))));
    }
    public static double subroutine299(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.0456) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((13.89) - (input[2]), 2))) + (Math.pow((1.0) - (input[3]), 2))) + (Math.pow((0.55) - (input[4]), 2))) + (Math.pow((5.888) - (input[5]), 2))) + (Math.pow((56.0) - (input[6]), 2))) + (Math.pow((3.1121) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((276.0) - (input[9]), 2))) + (Math.pow((16.4) - (input[10]), 2))) + (Math.pow((392.8) - (input[11]), 2))) + (Math.pow((13.51) - (input[12]), 2))));
    }
    public static double subroutine300(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.08829) - (input[0]), 2)) + (Math.pow((12.5) - (input[1]), 2))) + (Math.pow((7.87) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.524) - (input[4]), 2))) + (Math.pow((6.012) - (input[5]), 2))) + (Math.pow((66.6) - (input[6]), 2))) + (Math.pow((5.5605) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((311.0) - (input[9]), 2))) + (Math.pow((15.2) - (input[10]), 2))) + (Math.pow((395.6) - (input[11]), 2))) + (Math.pow((12.43) - (input[12]), 2))));
    }
    public static double subroutine301(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.04932) - (input[0]), 2)) + (Math.pow((33.0) - (input[1]), 2))) + (Math.pow((2.18) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.472) - (input[4]), 2))) + (Math.pow((6.849) - (input[5]), 2))) + (Math.pow((70.3) - (input[6]), 2))) + (Math.pow((3.1827) - (input[7]), 2))) + (Math.pow((7.0) - (input[8]), 2))) + (Math.pow((222.0) - (input[9]), 2))) + (Math.pow((18.4) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((7.53) - (input[12]), 2))));
    }
    public static double subroutine302(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.03445) - (input[0]), 2)) + (Math.pow((82.5) - (input[1]), 2))) + (Math.pow((2.03) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.415) - (input[4]), 2))) + (Math.pow((6.162) - (input[5]), 2))) + (Math.pow((38.4) - (input[6]), 2))) + (Math.pow((6.27) - (input[7]), 2))) + (Math.pow((2.0) - (input[8]), 2))) + (Math.pow((348.0) - (input[9]), 2))) + (Math.pow((14.7) - (input[10]), 2))) + (Math.pow((393.77) - (input[11]), 2))) + (Math.pow((7.43) - (input[12]), 2))));
    }
    public static double subroutine303(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.08308) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((2.46) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.488) - (input[4]), 2))) + (Math.pow((5.604) - (input[5]), 2))) + (Math.pow((89.8) - (input[6]), 2))) + (Math.pow((2.9879) - (input[7]), 2))) + (Math.pow((3.0) - (input[8]), 2))) + (Math.pow((193.0) - (input[9]), 2))) + (Math.pow((17.8) - (input[10]), 2))) + (Math.pow((391.0) - (input[11]), 2))) + (Math.pow((13.98) - (input[12]), 2))));
    }
    public static double subroutine304(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.52693) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((6.2) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.504) - (input[4]), 2))) + (Math.pow((8.725) - (input[5]), 2))) + (Math.pow((83.0) - (input[6]), 2))) + (Math.pow((2.8944) - (input[7]), 2))) + (Math.pow((8.0) - (input[8]), 2))) + (Math.pow((307.0) - (input[9]), 2))) + (Math.pow((17.4) - (input[10]), 2))) + (Math.pow((382.0) - (input[11]), 2))) + (Math.pow((4.63) - (input[12]), 2))));
    }
    public static double subroutine305(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.0351) - (input[0]), 2)) + (Math.pow((95.0) - (input[1]), 2))) + (Math.pow((2.68) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.4161) - (input[4]), 2))) + (Math.pow((7.853) - (input[5]), 2))) + (Math.pow((33.2) - (input[6]), 2))) + (Math.pow((5.118) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((224.0) - (input[9]), 2))) + (Math.pow((14.7) - (input[10]), 2))) + (Math.pow((392.78) - (input[11]), 2))) + (Math.pow((3.81) - (input[12]), 2))));
    }
    public static double subroutine306(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((9.18702) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.7) - (input[4]), 2))) + (Math.pow((5.536) - (input[5]), 2))) + (Math.pow((100.0) - (input[6]), 2))) + (Math.pow((1.5804) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((23.6) - (input[12]), 2))));
    }
    public static double subroutine307(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.06664) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((4.05) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.51) - (input[4]), 2))) + (Math.pow((6.546) - (input[5]), 2))) + (Math.pow((33.1) - (input[6]), 2))) + (Math.pow((3.1323) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((296.0) - (input[9]), 2))) + (Math.pow((16.6) - (input[10]), 2))) + (Math.pow((390.96) - (input[11]), 2))) + (Math.pow((5.33) - (input[12]), 2))));
    }
    public static double subroutine308(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((12.2472) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.584) - (input[4]), 2))) + (Math.pow((5.837) - (input[5]), 2))) + (Math.pow((59.7) - (input[6]), 2))) + (Math.pow((1.9976) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((24.65) - (input[11]), 2))) + (Math.pow((15.69) - (input[12]), 2))));
    }
    public static double subroutine309(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((1.25179) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((8.14) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.538) - (input[4]), 2))) + (Math.pow((5.57) - (input[5]), 2))) + (Math.pow((98.1) - (input[6]), 2))) + (Math.pow((3.7979) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((307.0) - (input[9]), 2))) + (Math.pow((21.0) - (input[10]), 2))) + (Math.pow((376.57) - (input[11]), 2))) + (Math.pow((21.02) - (input[12]), 2))));
    }
    public static double subroutine310(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((7.52601) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.713) - (input[4]), 2))) + (Math.pow((6.417) - (input[5]), 2))) + (Math.pow((98.3) - (input[6]), 2))) + (Math.pow((2.185) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((304.21) - (input[11]), 2))) + (Math.pow((19.31) - (input[12]), 2))));
    }
    public static double subroutine311(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.22969) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((10.59) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.489) - (input[4]), 2))) + (Math.pow((6.326) - (input[5]), 2))) + (Math.pow((52.5) - (input[6]), 2))) + (Math.pow((4.3549) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((277.0) - (input[9]), 2))) + (Math.pow((18.6) - (input[10]), 2))) + (Math.pow((394.87) - (input[11]), 2))) + (Math.pow((10.97) - (input[12]), 2))));
    }
    public static double subroutine312(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((4.0974) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((19.58) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.871) - (input[4]), 2))) + (Math.pow((5.468) - (input[5]), 2))) + (Math.pow((100.0) - (input[6]), 2))) + (Math.pow((1.4118) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((403.0) - (input[9]), 2))) + (Math.pow((14.7) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((26.42) - (input[12]), 2))));
    }
    public static double subroutine313(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((14.4208) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.74) - (input[4]), 2))) + (Math.pow((6.461) - (input[5]), 2))) + (Math.pow((93.3) - (input[6]), 2))) + (Math.pow((2.0026) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((27.49) - (input[11]), 2))) + (Math.pow((18.05) - (input[12]), 2))));
    }
    public static double subroutine314(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.0459) - (input[0]), 2)) + (Math.pow((52.5) - (input[1]), 2))) + (Math.pow((5.32) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.405) - (input[4]), 2))) + (Math.pow((6.315) - (input[5]), 2))) + (Math.pow((45.6) - (input[6]), 2))) + (Math.pow((7.3172) - (input[7]), 2))) + (Math.pow((6.0) - (input[8]), 2))) + (Math.pow((293.0) - (input[9]), 2))) + (Math.pow((16.6) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((7.6) - (input[12]), 2))));
    }
    public static double subroutine315(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.62739) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((8.14) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.538) - (input[4]), 2))) + (Math.pow((5.834) - (input[5]), 2))) + (Math.pow((56.5) - (input[6]), 2))) + (Math.pow((4.4986) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((307.0) - (input[9]), 2))) + (Math.pow((21.0) - (input[10]), 2))) + (Math.pow((395.62) - (input[11]), 2))) + (Math.pow((8.47) - (input[12]), 2))));
    }
    public static double subroutine316(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.29819) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((6.2) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.504) - (input[4]), 2))) + (Math.pow((7.686) - (input[5]), 2))) + (Math.pow((17.0) - (input[6]), 2))) + (Math.pow((3.3751) - (input[7]), 2))) + (Math.pow((8.0) - (input[8]), 2))) + (Math.pow((307.0) - (input[9]), 2))) + (Math.pow((17.4) - (input[10]), 2))) + (Math.pow((377.51) - (input[11]), 2))) + (Math.pow((3.92) - (input[12]), 2))));
    }
    public static double subroutine317(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.15098) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((10.01) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.547) - (input[4]), 2))) + (Math.pow((6.021) - (input[5]), 2))) + (Math.pow((82.6) - (input[6]), 2))) + (Math.pow((2.7474) - (input[7]), 2))) + (Math.pow((6.0) - (input[8]), 2))) + (Math.pow((432.0) - (input[9]), 2))) + (Math.pow((17.8) - (input[10]), 2))) + (Math.pow((394.51) - (input[11]), 2))) + (Math.pow((10.3) - (input[12]), 2))));
    }
    public static double subroutine318(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.03738) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((5.19) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.515) - (input[4]), 2))) + (Math.pow((6.31) - (input[5]), 2))) + (Math.pow((38.5) - (input[6]), 2))) + (Math.pow((6.4584) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((224.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((389.4) - (input[11]), 2))) + (Math.pow((6.75) - (input[12]), 2))));
    }
    public static double subroutine319(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.1146) - (input[0]), 2)) + (Math.pow((20.0) - (input[1]), 2))) + (Math.pow((6.96) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.464) - (input[4]), 2))) + (Math.pow((6.538) - (input[5]), 2))) + (Math.pow((58.7) - (input[6]), 2))) + (Math.pow((3.9175) - (input[7]), 2))) + (Math.pow((3.0) - (input[8]), 2))) + (Math.pow((223.0) - (input[9]), 2))) + (Math.pow((18.6) - (input[10]), 2))) + (Math.pow((394.96) - (input[11]), 2))) + (Math.pow((7.73) - (input[12]), 2))));
    }
    public static double subroutine320(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((38.3518) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.693) - (input[4]), 2))) + (Math.pow((5.453) - (input[5]), 2))) + (Math.pow((100.0) - (input[6]), 2))) + (Math.pow((1.4896) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((30.59) - (input[12]), 2))));
    }
    public static double subroutine321(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.09164) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((10.81) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.413) - (input[4]), 2))) + (Math.pow((6.065) - (input[5]), 2))) + (Math.pow((7.8) - (input[6]), 2))) + (Math.pow((5.2873) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((305.0) - (input[9]), 2))) + (Math.pow((19.2) - (input[10]), 2))) + (Math.pow((390.91) - (input[11]), 2))) + (Math.pow((5.52) - (input[12]), 2))));
    }
    public static double subroutine322(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((2.3139) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((19.58) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.605) - (input[4]), 2))) + (Math.pow((5.88) - (input[5]), 2))) + (Math.pow((97.3) - (input[6]), 2))) + (Math.pow((2.3887) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((403.0) - (input[9]), 2))) + (Math.pow((14.7) - (input[10]), 2))) + (Math.pow((348.13) - (input[11]), 2))) + (Math.pow((12.03) - (input[12]), 2))));
    }
    public static double subroutine323(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.12579) - (input[0]), 2)) + (Math.pow((45.0) - (input[1]), 2))) + (Math.pow((3.44) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.437) - (input[4]), 2))) + (Math.pow((6.556) - (input[5]), 2))) + (Math.pow((29.1) - (input[6]), 2))) + (Math.pow((4.5667) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((398.0) - (input[9]), 2))) + (Math.pow((15.2) - (input[10]), 2))) + (Math.pow((382.84) - (input[11]), 2))) + (Math.pow((4.56) - (input[12]), 2))));
    }
    public static double subroutine324(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((2.37934) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((19.58) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.871) - (input[4]), 2))) + (Math.pow((6.13) - (input[5]), 2))) + (Math.pow((100.0) - (input[6]), 2))) + (Math.pow((1.4191) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((403.0) - (input[9]), 2))) + (Math.pow((14.7) - (input[10]), 2))) + (Math.pow((172.91) - (input[11]), 2))) + (Math.pow((27.8) - (input[12]), 2))));
    }
    public static double subroutine325(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.7258) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((8.14) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.538) - (input[4]), 2))) + (Math.pow((5.727) - (input[5]), 2))) + (Math.pow((69.5) - (input[6]), 2))) + (Math.pow((3.7965) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((307.0) - (input[9]), 2))) + (Math.pow((21.0) - (input[10]), 2))) + (Math.pow((390.95) - (input[11]), 2))) + (Math.pow((11.28) - (input[12]), 2))));
    }
    public static double subroutine326(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.06129) - (input[0]), 2)) + (Math.pow((20.0) - (input[1]), 2))) + (Math.pow((3.33) - (input[2]), 2))) + (Math.pow((1.0) - (input[3]), 2))) + (Math.pow((0.4429) - (input[4]), 2))) + (Math.pow((7.645) - (input[5]), 2))) + (Math.pow((49.7) - (input[6]), 2))) + (Math.pow((5.2119) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((216.0) - (input[9]), 2))) + (Math.pow((14.9) - (input[10]), 2))) + (Math.pow((377.07) - (input[11]), 2))) + (Math.pow((3.01) - (input[12]), 2))));
    }
    public static double subroutine327(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.17134) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((10.01) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.547) - (input[4]), 2))) + (Math.pow((5.928) - (input[5]), 2))) + (Math.pow((88.2) - (input[6]), 2))) + (Math.pow((2.4631) - (input[7]), 2))) + (Math.pow((6.0) - (input[8]), 2))) + (Math.pow((432.0) - (input[9]), 2))) + (Math.pow((17.8) - (input[10]), 2))) + (Math.pow((344.91) - (input[11]), 2))) + (Math.pow((15.76) - (input[12]), 2))));
    }
    public static double subroutine328(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((4.64689) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.614) - (input[4]), 2))) + (Math.pow((6.98) - (input[5]), 2))) + (Math.pow((67.6) - (input[6]), 2))) + (Math.pow((2.5329) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((374.68) - (input[11]), 2))) + (Math.pow((11.66) - (input[12]), 2))));
    }
    public static double subroutine329(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((7.02259) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.718) - (input[4]), 2))) + (Math.pow((6.006) - (input[5]), 2))) + (Math.pow((95.3) - (input[6]), 2))) + (Math.pow((1.8746) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((319.98) - (input[11]), 2))) + (Math.pow((15.7) - (input[12]), 2))));
    }
    public static double subroutine330(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.11504) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((2.89) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.445) - (input[4]), 2))) + (Math.pow((6.163) - (input[5]), 2))) + (Math.pow((69.6) - (input[6]), 2))) + (Math.pow((3.4952) - (input[7]), 2))) + (Math.pow((2.0) - (input[8]), 2))) + (Math.pow((276.0) - (input[9]), 2))) + (Math.pow((18.0) - (input[10]), 2))) + (Math.pow((391.83) - (input[11]), 2))) + (Math.pow((11.34) - (input[12]), 2))));
    }
    public static double subroutine331(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((4.03841) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.532) - (input[4]), 2))) + (Math.pow((6.229) - (input[5]), 2))) + (Math.pow((90.7) - (input[6]), 2))) + (Math.pow((3.0993) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((395.33) - (input[11]), 2))) + (Math.pow((12.87) - (input[12]), 2))));
    }
    public static double subroutine332(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.37578) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((10.59) - (input[2]), 2))) + (Math.pow((1.0) - (input[3]), 2))) + (Math.pow((0.489) - (input[4]), 2))) + (Math.pow((5.404) - (input[5]), 2))) + (Math.pow((88.6) - (input[6]), 2))) + (Math.pow((3.665) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((277.0) - (input[9]), 2))) + (Math.pow((18.6) - (input[10]), 2))) + (Math.pow((395.24) - (input[11]), 2))) + (Math.pow((23.98) - (input[12]), 2))));
    }
    public static double subroutine333(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.43571) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((10.59) - (input[2]), 2))) + (Math.pow((1.0) - (input[3]), 2))) + (Math.pow((0.489) - (input[4]), 2))) + (Math.pow((5.344) - (input[5]), 2))) + (Math.pow((100.0) - (input[6]), 2))) + (Math.pow((3.875) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((277.0) - (input[9]), 2))) + (Math.pow((18.6) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((23.09) - (input[12]), 2))));
    }
    public static double subroutine334(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.21409) - (input[0]), 2)) + (Math.pow((22.0) - (input[1]), 2))) + (Math.pow((5.86) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.431) - (input[4]), 2))) + (Math.pow((6.438) - (input[5]), 2))) + (Math.pow((8.9) - (input[6]), 2))) + (Math.pow((7.3967) - (input[7]), 2))) + (Math.pow((7.0) - (input[8]), 2))) + (Math.pow((330.0) - (input[9]), 2))) + (Math.pow((19.1) - (input[10]), 2))) + (Math.pow((377.07) - (input[11]), 2))) + (Math.pow((3.59) - (input[12]), 2))));
    }
    public static double subroutine335(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.09103) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((2.46) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.488) - (input[4]), 2))) + (Math.pow((7.155) - (input[5]), 2))) + (Math.pow((92.2) - (input[6]), 2))) + (Math.pow((2.7006) - (input[7]), 2))) + (Math.pow((3.0) - (input[8]), 2))) + (Math.pow((193.0) - (input[9]), 2))) + (Math.pow((17.8) - (input[10]), 2))) + (Math.pow((394.12) - (input[11]), 2))) + (Math.pow((4.82) - (input[12]), 2))));
    }
    public static double subroutine336(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.04417) - (input[0]), 2)) + (Math.pow((70.0) - (input[1]), 2))) + (Math.pow((2.24) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.4) - (input[4]), 2))) + (Math.pow((6.871) - (input[5]), 2))) + (Math.pow((47.4) - (input[6]), 2))) + (Math.pow((7.8278) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((358.0) - (input[9]), 2))) + (Math.pow((14.8) - (input[10]), 2))) + (Math.pow((390.86) - (input[11]), 2))) + (Math.pow((6.07) - (input[12]), 2))));
    }
    public static double subroutine337(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.19186) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((7.38) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.493) - (input[4]), 2))) + (Math.pow((6.431) - (input[5]), 2))) + (Math.pow((14.7) - (input[6]), 2))) + (Math.pow((5.4159) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((287.0) - (input[9]), 2))) + (Math.pow((19.6) - (input[10]), 2))) + (Math.pow((393.68) - (input[11]), 2))) + (Math.pow((5.08) - (input[12]), 2))));
    }
    public static double subroutine338(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.08447) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((4.05) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.51) - (input[4]), 2))) + (Math.pow((5.859) - (input[5]), 2))) + (Math.pow((68.7) - (input[6]), 2))) + (Math.pow((2.7019) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((296.0) - (input[9]), 2))) + (Math.pow((16.6) - (input[10]), 2))) + (Math.pow((393.23) - (input[11]), 2))) + (Math.pow((9.64) - (input[12]), 2))));
    }
    public static double subroutine339(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((5.09017) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.713) - (input[4]), 2))) + (Math.pow((6.297) - (input[5]), 2))) + (Math.pow((91.8) - (input[6]), 2))) + (Math.pow((2.3682) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((385.09) - (input[11]), 2))) + (Math.pow((17.27) - (input[12]), 2))));
    }
    public static double subroutine340(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((88.9762) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.671) - (input[4]), 2))) + (Math.pow((6.968) - (input[5]), 2))) + (Math.pow((91.9) - (input[6]), 2))) + (Math.pow((1.4165) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((17.21) - (input[12]), 2))));
    }
    public static double subroutine341(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((9.32909) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.713) - (input[4]), 2))) + (Math.pow((6.185) - (input[5]), 2))) + (Math.pow((98.7) - (input[6]), 2))) + (Math.pow((2.2616) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((18.13) - (input[12]), 2))));
    }
    public static double subroutine342(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.08265) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((13.92) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.437) - (input[4]), 2))) + (Math.pow((6.127) - (input[5]), 2))) + (Math.pow((18.4) - (input[6]), 2))) + (Math.pow((5.5027) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((289.0) - (input[9]), 2))) + (Math.pow((16.0) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((8.58) - (input[12]), 2))));
    }
    public static double subroutine343(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.05602) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((2.46) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.488) - (input[4]), 2))) + (Math.pow((7.831) - (input[5]), 2))) + (Math.pow((53.6) - (input[6]), 2))) + (Math.pow((3.1992) - (input[7]), 2))) + (Math.pow((3.0) - (input[8]), 2))) + (Math.pow((193.0) - (input[9]), 2))) + (Math.pow((17.8) - (input[10]), 2))) + (Math.pow((392.63) - (input[11]), 2))) + (Math.pow((4.45) - (input[12]), 2))));
    }
    public static double subroutine344(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((5.73116) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.532) - (input[4]), 2))) + (Math.pow((7.061) - (input[5]), 2))) + (Math.pow((77.0) - (input[6]), 2))) + (Math.pow((3.4106) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((395.28) - (input[11]), 2))) + (Math.pow((7.01) - (input[12]), 2))));
    }
    public static double subroutine345(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.85204) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((8.14) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.538) - (input[4]), 2))) + (Math.pow((5.965) - (input[5]), 2))) + (Math.pow((89.2) - (input[6]), 2))) + (Math.pow((4.0123) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((307.0) - (input[9]), 2))) + (Math.pow((21.0) - (input[10]), 2))) + (Math.pow((392.53) - (input[11]), 2))) + (Math.pow((13.83) - (input[12]), 2))));
    }
    public static double subroutine346(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.22876) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((8.56) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.52) - (input[4]), 2))) + (Math.pow((6.405) - (input[5]), 2))) + (Math.pow((85.4) - (input[6]), 2))) + (Math.pow((2.7147) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((384.0) - (input[9]), 2))) + (Math.pow((20.9) - (input[10]), 2))) + (Math.pow((70.8) - (input[11]), 2))) + (Math.pow((10.63) - (input[12]), 2))));
    }
    public static double subroutine347(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.21124) - (input[0]), 2)) + (Math.pow((12.5) - (input[1]), 2))) + (Math.pow((7.87) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.524) - (input[4]), 2))) + (Math.pow((5.631) - (input[5]), 2))) + (Math.pow((100.0) - (input[6]), 2))) + (Math.pow((6.0821) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((311.0) - (input[9]), 2))) + (Math.pow((15.2) - (input[10]), 2))) + (Math.pow((386.63) - (input[11]), 2))) + (Math.pow((29.93) - (input[12]), 2))));
    }
    public static double subroutine348(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.07503) - (input[0]), 2)) + (Math.pow((33.0) - (input[1]), 2))) + (Math.pow((2.18) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.472) - (input[4]), 2))) + (Math.pow((7.42) - (input[5]), 2))) + (Math.pow((71.9) - (input[6]), 2))) + (Math.pow((3.0992) - (input[7]), 2))) + (Math.pow((7.0) - (input[8]), 2))) + (Math.pow((222.0) - (input[9]), 2))) + (Math.pow((18.4) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((6.47) - (input[12]), 2))));
    }
    public static double subroutine349(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.21977) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((6.91) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.448) - (input[4]), 2))) + (Math.pow((5.602) - (input[5]), 2))) + (Math.pow((62.0) - (input[6]), 2))) + (Math.pow((6.0877) - (input[7]), 2))) + (Math.pow((3.0) - (input[8]), 2))) + (Math.pow((233.0) - (input[9]), 2))) + (Math.pow((17.9) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((16.2) - (input[12]), 2))));
    }
    public static double subroutine350(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.04294) - (input[0]), 2)) + (Math.pow((28.0) - (input[1]), 2))) + (Math.pow((15.04) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.464) - (input[4]), 2))) + (Math.pow((6.249) - (input[5]), 2))) + (Math.pow((77.3) - (input[6]), 2))) + (Math.pow((3.615) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((270.0) - (input[9]), 2))) + (Math.pow((18.2) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((10.59) - (input[12]), 2))));
    }
    public static double subroutine351(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((9.96654) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.74) - (input[4]), 2))) + (Math.pow((6.485) - (input[5]), 2))) + (Math.pow((100.0) - (input[6]), 2))) + (Math.pow((1.9784) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((386.73) - (input[11]), 2))) + (Math.pow((18.85) - (input[12]), 2))));
    }
    public static double subroutine352(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.09299) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((25.65) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.581) - (input[4]), 2))) + (Math.pow((5.961) - (input[5]), 2))) + (Math.pow((92.9) - (input[6]), 2))) + (Math.pow((2.0869) - (input[7]), 2))) + (Math.pow((2.0) - (input[8]), 2))) + (Math.pow((188.0) - (input[9]), 2))) + (Math.pow((19.1) - (input[10]), 2))) + (Math.pow((378.09) - (input[11]), 2))) + (Math.pow((17.93) - (input[12]), 2))));
    }
    public static double subroutine353(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.06263) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((11.93) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.573) - (input[4]), 2))) + (Math.pow((6.593) - (input[5]), 2))) + (Math.pow((69.1) - (input[6]), 2))) + (Math.pow((2.4786) - (input[7]), 2))) + (Math.pow((1.0) - (input[8]), 2))) + (Math.pow((273.0) - (input[9]), 2))) + (Math.pow((21.0) - (input[10]), 2))) + (Math.pow((391.99) - (input[11]), 2))) + (Math.pow((9.67) - (input[12]), 2))));
    }
    public static double subroutine354(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.05302) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((3.41) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.489) - (input[4]), 2))) + (Math.pow((7.079) - (input[5]), 2))) + (Math.pow((63.1) - (input[6]), 2))) + (Math.pow((3.4145) - (input[7]), 2))) + (Math.pow((2.0) - (input[8]), 2))) + (Math.pow((270.0) - (input[9]), 2))) + (Math.pow((17.8) - (input[10]), 2))) + (Math.pow((396.06) - (input[11]), 2))) + (Math.pow((5.7) - (input[12]), 2))));
    }
    public static double subroutine355(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.19657) - (input[0]), 2)) + (Math.pow((22.0) - (input[1]), 2))) + (Math.pow((5.86) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.431) - (input[4]), 2))) + (Math.pow((6.226) - (input[5]), 2))) + (Math.pow((79.2) - (input[6]), 2))) + (Math.pow((8.0555) - (input[7]), 2))) + (Math.pow((7.0) - (input[8]), 2))) + (Math.pow((330.0) - (input[9]), 2))) + (Math.pow((19.1) - (input[10]), 2))) + (Math.pow((376.14) - (input[11]), 2))) + (Math.pow((10.15) - (input[12]), 2))));
    }
    public static double subroutine356(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.63796) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((8.14) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.538) - (input[4]), 2))) + (Math.pow((6.096) - (input[5]), 2))) + (Math.pow((84.5) - (input[6]), 2))) + (Math.pow((4.4619) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((307.0) - (input[9]), 2))) + (Math.pow((21.0) - (input[10]), 2))) + (Math.pow((380.02) - (input[11]), 2))) + (Math.pow((10.26) - (input[12]), 2))));
    }
    public static double subroutine357(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.21161) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((8.56) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.52) - (input[4]), 2))) + (Math.pow((6.137) - (input[5]), 2))) + (Math.pow((87.4) - (input[6]), 2))) + (Math.pow((2.7147) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((384.0) - (input[9]), 2))) + (Math.pow((20.9) - (input[10]), 2))) + (Math.pow((394.47) - (input[11]), 2))) + (Math.pow((13.44) - (input[12]), 2))));
    }
    public static double subroutine358(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.13587) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((10.59) - (input[2]), 2))) + (Math.pow((1.0) - (input[3]), 2))) + (Math.pow((0.489) - (input[4]), 2))) + (Math.pow((6.064) - (input[5]), 2))) + (Math.pow((59.1) - (input[6]), 2))) + (Math.pow((4.2392) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((277.0) - (input[9]), 2))) + (Math.pow((18.6) - (input[10]), 2))) + (Math.pow((381.32) - (input[11]), 2))) + (Math.pow((14.66) - (input[12]), 2))));
    }
    public static double subroutine359(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.10959) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((11.93) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.573) - (input[4]), 2))) + (Math.pow((6.794) - (input[5]), 2))) + (Math.pow((89.3) - (input[6]), 2))) + (Math.pow((2.3889) - (input[7]), 2))) + (Math.pow((1.0) - (input[8]), 2))) + (Math.pow((273.0) - (input[9]), 2))) + (Math.pow((21.0) - (input[10]), 2))) + (Math.pow((393.45) - (input[11]), 2))) + (Math.pow((6.48) - (input[12]), 2))));
    }
    public static double subroutine360(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((8.05579) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.584) - (input[4]), 2))) + (Math.pow((5.427) - (input[5]), 2))) + (Math.pow((95.4) - (input[6]), 2))) + (Math.pow((2.4298) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((352.58) - (input[11]), 2))) + (Math.pow((18.14) - (input[12]), 2))));
    }
    public static double subroutine361(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((1.35472) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((8.14) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.538) - (input[4]), 2))) + (Math.pow((6.072) - (input[5]), 2))) + (Math.pow((100.0) - (input[6]), 2))) + (Math.pow((4.175) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((307.0) - (input[9]), 2))) + (Math.pow((21.0) - (input[10]), 2))) + (Math.pow((376.73) - (input[11]), 2))) + (Math.pow((13.04) - (input[12]), 2))));
    }
    public static double subroutine362(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.01501) - (input[0]), 2)) + (Math.pow((90.0) - (input[1]), 2))) + (Math.pow((1.21) - (input[2]), 2))) + (Math.pow((1.0) - (input[3]), 2))) + (Math.pow((0.401) - (input[4]), 2))) + (Math.pow((7.923) - (input[5]), 2))) + (Math.pow((24.8) - (input[6]), 2))) + (Math.pow((5.885) - (input[7]), 2))) + (Math.pow((1.0) - (input[8]), 2))) + (Math.pow((198.0) - (input[9]), 2))) + (Math.pow((13.6) - (input[10]), 2))) + (Math.pow((395.52) - (input[11]), 2))) + (Math.pow((3.16) - (input[12]), 2))));
    }
    public static double subroutine363(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.57529) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((6.2) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.507) - (input[4]), 2))) + (Math.pow((8.337) - (input[5]), 2))) + (Math.pow((73.3) - (input[6]), 2))) + (Math.pow((3.8384) - (input[7]), 2))) + (Math.pow((8.0) - (input[8]), 2))) + (Math.pow((307.0) - (input[9]), 2))) + (Math.pow((17.4) - (input[10]), 2))) + (Math.pow((385.91) - (input[11]), 2))) + (Math.pow((2.47) - (input[12]), 2))));
    }
    public static double subroutine364(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.03537) - (input[0]), 2)) + (Math.pow((34.0) - (input[1]), 2))) + (Math.pow((6.09) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.433) - (input[4]), 2))) + (Math.pow((6.59) - (input[5]), 2))) + (Math.pow((40.4) - (input[6]), 2))) + (Math.pow((5.4917) - (input[7]), 2))) + (Math.pow((7.0) - (input[8]), 2))) + (Math.pow((329.0) - (input[9]), 2))) + (Math.pow((16.1) - (input[10]), 2))) + (Math.pow((395.75) - (input[11]), 2))) + (Math.pow((9.5) - (input[12]), 2))));
    }
    public static double subroutine365(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.08707) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((12.83) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.437) - (input[4]), 2))) + (Math.pow((6.14) - (input[5]), 2))) + (Math.pow((45.8) - (input[6]), 2))) + (Math.pow((4.0905) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((398.0) - (input[9]), 2))) + (Math.pow((18.7) - (input[10]), 2))) + (Math.pow((386.96) - (input[11]), 2))) + (Math.pow((10.27) - (input[12]), 2))));
    }
    public static double subroutine366(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((7.99248) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.7) - (input[4]), 2))) + (Math.pow((5.52) - (input[5]), 2))) + (Math.pow((100.0) - (input[6]), 2))) + (Math.pow((1.5331) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((24.56) - (input[12]), 2))));
    }
    public static double subroutine367(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.36894) - (input[0]), 2)) + (Math.pow((22.0) - (input[1]), 2))) + (Math.pow((5.86) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.431) - (input[4]), 2))) + (Math.pow((8.259) - (input[5]), 2))) + (Math.pow((8.4) - (input[6]), 2))) + (Math.pow((8.9067) - (input[7]), 2))) + (Math.pow((7.0) - (input[8]), 2))) + (Math.pow((330.0) - (input[9]), 2))) + (Math.pow((19.1) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((3.54) - (input[12]), 2))));
    }
    public static double subroutine368(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.0566) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((3.41) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.489) - (input[4]), 2))) + (Math.pow((7.007) - (input[5]), 2))) + (Math.pow((86.3) - (input[6]), 2))) + (Math.pow((3.4217) - (input[7]), 2))) + (Math.pow((2.0) - (input[8]), 2))) + (Math.pow((270.0) - (input[9]), 2))) + (Math.pow((17.8) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((5.5) - (input[12]), 2))));
    }
    public static double subroutine369(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.02543) - (input[0]), 2)) + (Math.pow((55.0) - (input[1]), 2))) + (Math.pow((3.78) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.484) - (input[4]), 2))) + (Math.pow((6.696) - (input[5]), 2))) + (Math.pow((56.4) - (input[6]), 2))) + (Math.pow((5.7321) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((370.0) - (input[9]), 2))) + (Math.pow((17.6) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((7.18) - (input[12]), 2))));
    }
    public static double subroutine370(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.59005) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((21.89) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.624) - (input[4]), 2))) + (Math.pow((6.372) - (input[5]), 2))) + (Math.pow((97.9) - (input[6]), 2))) + (Math.pow((2.3274) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((437.0) - (input[9]), 2))) + (Math.pow((21.2) - (input[10]), 2))) + (Math.pow((385.76) - (input[11]), 2))) + (Math.pow((11.12) - (input[12]), 2))));
    }
    public static double subroutine371(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.25387) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((6.91) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.448) - (input[4]), 2))) + (Math.pow((5.399) - (input[5]), 2))) + (Math.pow((95.3) - (input[6]), 2))) + (Math.pow((5.87) - (input[7]), 2))) + (Math.pow((3.0) - (input[8]), 2))) + (Math.pow((233.0) - (input[9]), 2))) + (Math.pow((17.9) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((30.81) - (input[12]), 2))));
    }
    public static double subroutine372(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.10084) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((10.01) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.547) - (input[4]), 2))) + (Math.pow((6.715) - (input[5]), 2))) + (Math.pow((81.6) - (input[6]), 2))) + (Math.pow((2.6775) - (input[7]), 2))) + (Math.pow((6.0) - (input[8]), 2))) + (Math.pow((432.0) - (input[9]), 2))) + (Math.pow((17.8) - (input[10]), 2))) + (Math.pow((395.59) - (input[11]), 2))) + (Math.pow((10.16) - (input[12]), 2))));
    }
    public static double subroutine373(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.02009) - (input[0]), 2)) + (Math.pow((95.0) - (input[1]), 2))) + (Math.pow((2.68) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.4161) - (input[4]), 2))) + (Math.pow((8.034) - (input[5]), 2))) + (Math.pow((31.9) - (input[6]), 2))) + (Math.pow((5.118) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((224.0) - (input[9]), 2))) + (Math.pow((14.7) - (input[10]), 2))) + (Math.pow((390.55) - (input[11]), 2))) + (Math.pow((2.88) - (input[12]), 2))));
    }
    public static double subroutine374(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.22927) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((6.91) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.448) - (input[4]), 2))) + (Math.pow((6.03) - (input[5]), 2))) + (Math.pow((85.5) - (input[6]), 2))) + (Math.pow((5.6894) - (input[7]), 2))) + (Math.pow((3.0) - (input[8]), 2))) + (Math.pow((233.0) - (input[9]), 2))) + (Math.pow((17.9) - (input[10]), 2))) + (Math.pow((392.74) - (input[11]), 2))) + (Math.pow((18.8) - (input[12]), 2))));
    }
    public static double subroutine375(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((3.83684) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.77) - (input[4]), 2))) + (Math.pow((6.251) - (input[5]), 2))) + (Math.pow((91.1) - (input[6]), 2))) + (Math.pow((2.2955) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((350.65) - (input[11]), 2))) + (Math.pow((14.19) - (input[12]), 2))));
    }
    public static double subroutine376(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.1396) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((8.56) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.52) - (input[4]), 2))) + (Math.pow((6.167) - (input[5]), 2))) + (Math.pow((90.0) - (input[6]), 2))) + (Math.pow((2.421) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((384.0) - (input[9]), 2))) + (Math.pow((20.9) - (input[10]), 2))) + (Math.pow((392.69) - (input[11]), 2))) + (Math.pow((12.33) - (input[12]), 2))));
    }
    public static double subroutine377(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.02055) - (input[0]), 2)) + (Math.pow((85.0) - (input[1]), 2))) + (Math.pow((0.74) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.41) - (input[4]), 2))) + (Math.pow((6.383) - (input[5]), 2))) + (Math.pow((35.7) - (input[6]), 2))) + (Math.pow((9.1876) - (input[7]), 2))) + (Math.pow((2.0) - (input[8]), 2))) + (Math.pow((313.0) - (input[9]), 2))) + (Math.pow((17.3) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((5.77) - (input[12]), 2))));
    }
    public static double subroutine378(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.79041) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((9.9) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.544) - (input[4]), 2))) + (Math.pow((6.122) - (input[5]), 2))) + (Math.pow((52.8) - (input[6]), 2))) + (Math.pow((2.6403) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((304.0) - (input[9]), 2))) + (Math.pow((18.4) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((5.98) - (input[12]), 2))));
    }
    public static double subroutine379(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((9.59571) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.693) - (input[4]), 2))) + (Math.pow((6.404) - (input[5]), 2))) + (Math.pow((100.0) - (input[6]), 2))) + (Math.pow((1.639) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((376.11) - (input[11]), 2))) + (Math.pow((20.31) - (input[12]), 2))));
    }
    public static double subroutine380(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.02177) - (input[0]), 2)) + (Math.pow((82.5) - (input[1]), 2))) + (Math.pow((2.03) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.415) - (input[4]), 2))) + (Math.pow((7.61) - (input[5]), 2))) + (Math.pow((15.7) - (input[6]), 2))) + (Math.pow((6.27) - (input[7]), 2))) + (Math.pow((2.0) - (input[8]), 2))) + (Math.pow((348.0) - (input[9]), 2))) + (Math.pow((14.7) - (input[10]), 2))) + (Math.pow((395.38) - (input[11]), 2))) + (Math.pow((3.11) - (input[12]), 2))));
    }
    public static double subroutine381(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((9.72418) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.74) - (input[4]), 2))) + (Math.pow((6.406) - (input[5]), 2))) + (Math.pow((97.2) - (input[6]), 2))) + (Math.pow((2.0651) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((385.96) - (input[11]), 2))) + (Math.pow((19.52) - (input[12]), 2))));
    }
    public static double subroutine382(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.1403) - (input[0]), 2)) + (Math.pow((22.0) - (input[1]), 2))) + (Math.pow((5.86) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.431) - (input[4]), 2))) + (Math.pow((6.487) - (input[5]), 2))) + (Math.pow((13.0) - (input[6]), 2))) + (Math.pow((7.3967) - (input[7]), 2))) + (Math.pow((7.0) - (input[8]), 2))) + (Math.pow((330.0) - (input[9]), 2))) + (Math.pow((19.1) - (input[10]), 2))) + (Math.pow((396.28) - (input[11]), 2))) + (Math.pow((5.9) - (input[12]), 2))));
    }
    public static double subroutine383(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.06642) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((4.05) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.51) - (input[4]), 2))) + (Math.pow((6.86) - (input[5]), 2))) + (Math.pow((74.4) - (input[6]), 2))) + (Math.pow((2.9153) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((296.0) - (input[9]), 2))) + (Math.pow((16.6) - (input[10]), 2))) + (Math.pow((391.27) - (input[11]), 2))) + (Math.pow((6.92) - (input[12]), 2))));
    }
    public static double subroutine384(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.35233) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((21.89) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.624) - (input[4]), 2))) + (Math.pow((6.454) - (input[5]), 2))) + (Math.pow((98.4) - (input[6]), 2))) + (Math.pow((1.8498) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((437.0) - (input[9]), 2))) + (Math.pow((21.2) - (input[10]), 2))) + (Math.pow((394.08) - (input[11]), 2))) + (Math.pow((14.59) - (input[12]), 2))));
    }
    public static double subroutine385(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.01096) - (input[0]), 2)) + (Math.pow((55.0) - (input[1]), 2))) + (Math.pow((2.25) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.389) - (input[4]), 2))) + (Math.pow((6.453) - (input[5]), 2))) + (Math.pow((31.9) - (input[6]), 2))) + (Math.pow((7.3073) - (input[7]), 2))) + (Math.pow((1.0) - (input[8]), 2))) + (Math.pow((300.0) - (input[9]), 2))) + (Math.pow((15.3) - (input[10]), 2))) + (Math.pow((394.72) - (input[11]), 2))) + (Math.pow((8.23) - (input[12]), 2))));
    }
    public static double subroutine386(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.04527) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((11.93) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.573) - (input[4]), 2))) + (Math.pow((6.12) - (input[5]), 2))) + (Math.pow((76.7) - (input[6]), 2))) + (Math.pow((2.2875) - (input[7]), 2))) + (Math.pow((1.0) - (input[8]), 2))) + (Math.pow((273.0) - (input[9]), 2))) + (Math.pow((21.0) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((9.08) - (input[12]), 2))));
    }
    public static double subroutine387(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.03705) - (input[0]), 2)) + (Math.pow((20.0) - (input[1]), 2))) + (Math.pow((3.33) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.4429) - (input[4]), 2))) + (Math.pow((6.968) - (input[5]), 2))) + (Math.pow((37.2) - (input[6]), 2))) + (Math.pow((5.2447) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((216.0) - (input[9]), 2))) + (Math.pow((14.9) - (input[10]), 2))) + (Math.pow((392.23) - (input[11]), 2))) + (Math.pow((4.59) - (input[12]), 2))));
    }
    public static double subroutine388(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.03237) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((2.18) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.458) - (input[4]), 2))) + (Math.pow((6.998) - (input[5]), 2))) + (Math.pow((45.8) - (input[6]), 2))) + (Math.pow((6.0622) - (input[7]), 2))) + (Math.pow((3.0) - (input[8]), 2))) + (Math.pow((222.0) - (input[9]), 2))) + (Math.pow((18.7) - (input[10]), 2))) + (Math.pow((394.63) - (input[11]), 2))) + (Math.pow((2.94) - (input[12]), 2))));
    }
    public static double subroutine389(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.05497) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((5.19) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.515) - (input[4]), 2))) + (Math.pow((5.985) - (input[5]), 2))) + (Math.pow((45.4) - (input[6]), 2))) + (Math.pow((4.8122) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((224.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((9.74) - (input[12]), 2))));
    }
    public static double subroutine390(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.0837) - (input[0]), 2)) + (Math.pow((45.0) - (input[1]), 2))) + (Math.pow((3.44) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.437) - (input[4]), 2))) + (Math.pow((7.185) - (input[5]), 2))) + (Math.pow((38.9) - (input[6]), 2))) + (Math.pow((4.5667) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((398.0) - (input[9]), 2))) + (Math.pow((15.2) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((5.39) - (input[12]), 2))));
    }
    public static double subroutine391(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((6.96215) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.7) - (input[4]), 2))) + (Math.pow((5.713) - (input[5]), 2))) + (Math.pow((97.0) - (input[6]), 2))) + (Math.pow((1.9265) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((394.43) - (input[11]), 2))) + (Math.pow((17.11) - (input[12]), 2))));
    }
    public static double subroutine392(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.03932) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((3.41) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.489) - (input[4]), 2))) + (Math.pow((6.405) - (input[5]), 2))) + (Math.pow((73.9) - (input[6]), 2))) + (Math.pow((3.0921) - (input[7]), 2))) + (Math.pow((2.0) - (input[8]), 2))) + (Math.pow((270.0) - (input[9]), 2))) + (Math.pow((17.8) - (input[10]), 2))) + (Math.pow((393.55) - (input[11]), 2))) + (Math.pow((8.2) - (input[12]), 2))));
    }
    public static double subroutine393(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.54011) - (input[0]), 2)) + (Math.pow((20.0) - (input[1]), 2))) + (Math.pow((3.97) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.647) - (input[4]), 2))) + (Math.pow((7.203) - (input[5]), 2))) + (Math.pow((81.8) - (input[6]), 2))) + (Math.pow((2.1121) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((264.0) - (input[9]), 2))) + (Math.pow((13.0) - (input[10]), 2))) + (Math.pow((392.8) - (input[11]), 2))) + (Math.pow((9.59) - (input[12]), 2))));
    }
    public static double subroutine394(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((15.1772) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.74) - (input[4]), 2))) + (Math.pow((6.152) - (input[5]), 2))) + (Math.pow((100.0) - (input[6]), 2))) + (Math.pow((1.9142) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((9.32) - (input[11]), 2))) + (Math.pow((26.45) - (input[12]), 2))));
    }
    public static double subroutine395(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((11.9511) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.659) - (input[4]), 2))) + (Math.pow((5.608) - (input[5]), 2))) + (Math.pow((100.0) - (input[6]), 2))) + (Math.pow((1.2852) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((332.09) - (input[11]), 2))) + (Math.pow((12.13) - (input[12]), 2))));
    }
    public static double subroutine396(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.10469) - (input[0]), 2)) + (Math.pow((40.0) - (input[1]), 2))) + (Math.pow((6.41) - (input[2]), 2))) + (Math.pow((1.0) - (input[3]), 2))) + (Math.pow((0.447) - (input[4]), 2))) + (Math.pow((7.267) - (input[5]), 2))) + (Math.pow((49.0) - (input[6]), 2))) + (Math.pow((4.7872) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((254.0) - (input[9]), 2))) + (Math.pow((17.6) - (input[10]), 2))) + (Math.pow((389.25) - (input[11]), 2))) + (Math.pow((6.05) - (input[12]), 2))));
    }
    public static double subroutine397(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.07886) - (input[0]), 2)) + (Math.pow((80.0) - (input[1]), 2))) + (Math.pow((4.95) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.411) - (input[4]), 2))) + (Math.pow((7.148) - (input[5]), 2))) + (Math.pow((27.7) - (input[6]), 2))) + (Math.pow((5.1167) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((245.0) - (input[9]), 2))) + (Math.pow((19.2) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((3.56) - (input[12]), 2))));
    }
    public static double subroutine398(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((18.0846) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.679) - (input[4]), 2))) + (Math.pow((6.434) - (input[5]), 2))) + (Math.pow((100.0) - (input[6]), 2))) + (Math.pow((1.8347) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((27.25) - (input[11]), 2))) + (Math.pow((29.05) - (input[12]), 2))));
    }
    public static double subroutine399(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.08873) - (input[0]), 2)) + (Math.pow((21.0) - (input[1]), 2))) + (Math.pow((5.64) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.439) - (input[4]), 2))) + (Math.pow((5.963) - (input[5]), 2))) + (Math.pow((45.7) - (input[6]), 2))) + (Math.pow((6.8147) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((243.0) - (input[9]), 2))) + (Math.pow((16.8) - (input[10]), 2))) + (Math.pow((395.56) - (input[11]), 2))) + (Math.pow((13.45) - (input[12]), 2))));
    }
    public static double subroutine400(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.01432) - (input[0]), 2)) + (Math.pow((100.0) - (input[1]), 2))) + (Math.pow((1.32) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.411) - (input[4]), 2))) + (Math.pow((6.816) - (input[5]), 2))) + (Math.pow((40.5) - (input[6]), 2))) + (Math.pow((8.3248) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((256.0) - (input[9]), 2))) + (Math.pow((15.1) - (input[10]), 2))) + (Math.pow((392.9) - (input[11]), 2))) + (Math.pow((3.95) - (input[12]), 2))));
    }
    public static double subroutine401(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.01381) - (input[0]), 2)) + (Math.pow((80.0) - (input[1]), 2))) + (Math.pow((0.46) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.422) - (input[4]), 2))) + (Math.pow((7.875) - (input[5]), 2))) + (Math.pow((32.0) - (input[6]), 2))) + (Math.pow((5.6484) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((255.0) - (input[9]), 2))) + (Math.pow((14.4) - (input[10]), 2))) + (Math.pow((394.23) - (input[11]), 2))) + (Math.pow((2.97) - (input[12]), 2))));
    }
    public static double subroutine402(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((9.39063) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.74) - (input[4]), 2))) + (Math.pow((5.627) - (input[5]), 2))) + (Math.pow((93.9) - (input[6]), 2))) + (Math.pow((1.8172) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((22.88) - (input[12]), 2))));
    }
    public static double subroutine403(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((2.24236) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((19.58) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.605) - (input[4]), 2))) + (Math.pow((5.854) - (input[5]), 2))) + (Math.pow((91.8) - (input[6]), 2))) + (Math.pow((2.422) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((403.0) - (input[9]), 2))) + (Math.pow((14.7) - (input[10]), 2))) + (Math.pow((395.11) - (input[11]), 2))) + (Math.pow((11.64) - (input[12]), 2))));
    }
    public static double subroutine404(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.09252) - (input[0]), 2)) + (Math.pow((30.0) - (input[1]), 2))) + (Math.pow((4.93) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.428) - (input[4]), 2))) + (Math.pow((6.606) - (input[5]), 2))) + (Math.pow((42.2) - (input[6]), 2))) + (Math.pow((6.1899) - (input[7]), 2))) + (Math.pow((6.0) - (input[8]), 2))) + (Math.pow((300.0) - (input[9]), 2))) + (Math.pow((16.6) - (input[10]), 2))) + (Math.pow((383.78) - (input[11]), 2))) + (Math.pow((7.37) - (input[12]), 2))));
    }
    public static double subroutine405(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((9.82349) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.671) - (input[4]), 2))) + (Math.pow((6.794) - (input[5]), 2))) + (Math.pow((98.8) - (input[6]), 2))) + (Math.pow((1.358) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((21.24) - (input[12]), 2))));
    }
    public static double subroutine406(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.3494) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((9.9) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.544) - (input[4]), 2))) + (Math.pow((5.972) - (input[5]), 2))) + (Math.pow((76.7) - (input[6]), 2))) + (Math.pow((3.1025) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((304.0) - (input[9]), 2))) + (Math.pow((18.4) - (input[10]), 2))) + (Math.pow((396.24) - (input[11]), 2))) + (Math.pow((9.97) - (input[12]), 2))));
    }
    public static double subroutine407(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.27957) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((9.69) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.585) - (input[4]), 2))) + (Math.pow((5.926) - (input[5]), 2))) + (Math.pow((42.6) - (input[6]), 2))) + (Math.pow((2.3817) - (input[7]), 2))) + (Math.pow((6.0) - (input[8]), 2))) + (Math.pow((391.0) - (input[9]), 2))) + (Math.pow((19.2) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((13.59) - (input[12]), 2))));
    }
    public static double subroutine408(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.10328) - (input[0]), 2)) + (Math.pow((25.0) - (input[1]), 2))) + (Math.pow((5.13) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.453) - (input[4]), 2))) + (Math.pow((5.927) - (input[5]), 2))) + (Math.pow((47.2) - (input[6]), 2))) + (Math.pow((6.932) - (input[7]), 2))) + (Math.pow((8.0) - (input[8]), 2))) + (Math.pow((284.0) - (input[9]), 2))) + (Math.pow((19.7) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((9.22) - (input[12]), 2))));
    }
    public static double subroutine409(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.67191) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((8.14) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.538) - (input[4]), 2))) + (Math.pow((5.813) - (input[5]), 2))) + (Math.pow((90.3) - (input[6]), 2))) + (Math.pow((4.682) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((307.0) - (input[9]), 2))) + (Math.pow((21.0) - (input[10]), 2))) + (Math.pow((376.88) - (input[11]), 2))) + (Math.pow((14.81) - (input[12]), 2))));
    }
    public static double subroutine410(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((2.77974) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((19.58) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.871) - (input[4]), 2))) + (Math.pow((4.903) - (input[5]), 2))) + (Math.pow((97.8) - (input[6]), 2))) + (Math.pow((1.3459) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((403.0) - (input[9]), 2))) + (Math.pow((14.7) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((29.29) - (input[12]), 2))));
    }
    public static double subroutine411(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((5.66998) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((1.0) - (input[3]), 2))) + (Math.pow((0.631) - (input[4]), 2))) + (Math.pow((6.683) - (input[5]), 2))) + (Math.pow((96.8) - (input[6]), 2))) + (Math.pow((1.3567) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((375.33) - (input[11]), 2))) + (Math.pow((3.73) - (input[12]), 2))));
    }
    public static double subroutine412(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.84054) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((8.14) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.538) - (input[4]), 2))) + (Math.pow((5.599) - (input[5]), 2))) + (Math.pow((85.7) - (input[6]), 2))) + (Math.pow((4.4546) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((307.0) - (input[9]), 2))) + (Math.pow((21.0) - (input[10]), 2))) + (Math.pow((303.42) - (input[11]), 2))) + (Math.pow((16.51) - (input[12]), 2))));
    }
    public static double subroutine413(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((12.0482) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.614) - (input[4]), 2))) + (Math.pow((5.648) - (input[5]), 2))) + (Math.pow((87.6) - (input[6]), 2))) + (Math.pow((1.9512) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((291.55) - (input[11]), 2))) + (Math.pow((14.1) - (input[12]), 2))));
    }
    public static double subroutine414(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((6.65492) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.713) - (input[4]), 2))) + (Math.pow((6.317) - (input[5]), 2))) + (Math.pow((83.0) - (input[6]), 2))) + (Math.pow((2.7344) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((13.99) - (input[12]), 2))));
    }
    public static double subroutine415(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.1) - (input[0]), 2)) + (Math.pow((34.0) - (input[1]), 2))) + (Math.pow((6.09) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.433) - (input[4]), 2))) + (Math.pow((6.982) - (input[5]), 2))) + (Math.pow((17.7) - (input[6]), 2))) + (Math.pow((5.4917) - (input[7]), 2))) + (Math.pow((7.0) - (input[8]), 2))) + (Math.pow((329.0) - (input[9]), 2))) + (Math.pow((16.1) - (input[10]), 2))) + (Math.pow((390.43) - (input[11]), 2))) + (Math.pow((4.86) - (input[12]), 2))));
    }
    public static double subroutine416(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((1.62864) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((21.89) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.624) - (input[4]), 2))) + (Math.pow((5.019) - (input[5]), 2))) + (Math.pow((100.0) - (input[6]), 2))) + (Math.pow((1.4394) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((437.0) - (input[9]), 2))) + (Math.pow((21.2) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((34.41) - (input[12]), 2))));
    }
    public static double subroutine417(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.06617) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((3.24) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.46) - (input[4]), 2))) + (Math.pow((5.868) - (input[5]), 2))) + (Math.pow((25.8) - (input[6]), 2))) + (Math.pow((5.2146) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((430.0) - (input[9]), 2))) + (Math.pow((16.9) - (input[10]), 2))) + (Math.pow((382.44) - (input[11]), 2))) + (Math.pow((9.97) - (input[12]), 2))));
    }
    public static double subroutine418(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.25356) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((9.9) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.544) - (input[4]), 2))) + (Math.pow((5.705) - (input[5]), 2))) + (Math.pow((77.7) - (input[6]), 2))) + (Math.pow((3.945) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((304.0) - (input[9]), 2))) + (Math.pow((18.4) - (input[10]), 2))) + (Math.pow((396.42) - (input[11]), 2))) + (Math.pow((11.5) - (input[12]), 2))));
    }
    public static double subroutine419(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((2.44668) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((19.58) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.871) - (input[4]), 2))) + (Math.pow((5.272) - (input[5]), 2))) + (Math.pow((94.0) - (input[6]), 2))) + (Math.pow((1.7364) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((403.0) - (input[9]), 2))) + (Math.pow((14.7) - (input[10]), 2))) + (Math.pow((88.63) - (input[11]), 2))) + (Math.pow((16.14) - (input[12]), 2))));
    }
    public static double subroutine420(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.04462) - (input[0]), 2)) + (Math.pow((25.0) - (input[1]), 2))) + (Math.pow((4.86) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.426) - (input[4]), 2))) + (Math.pow((6.619) - (input[5]), 2))) + (Math.pow((70.4) - (input[6]), 2))) + (Math.pow((5.4007) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((281.0) - (input[9]), 2))) + (Math.pow((19.0) - (input[10]), 2))) + (Math.pow((395.63) - (input[11]), 2))) + (Math.pow((7.22) - (input[12]), 2))));
    }
    public static double subroutine421(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.34006) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((21.89) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.624) - (input[4]), 2))) + (Math.pow((6.458) - (input[5]), 2))) + (Math.pow((98.9) - (input[6]), 2))) + (Math.pow((2.1185) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((437.0) - (input[9]), 2))) + (Math.pow((21.2) - (input[10]), 2))) + (Math.pow((395.04) - (input[11]), 2))) + (Math.pow((12.6) - (input[12]), 2))));
    }
    public static double subroutine422(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.10659) - (input[0]), 2)) + (Math.pow((80.0) - (input[1]), 2))) + (Math.pow((1.91) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.413) - (input[4]), 2))) + (Math.pow((5.936) - (input[5]), 2))) + (Math.pow((19.5) - (input[6]), 2))) + (Math.pow((10.5857) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((334.0) - (input[9]), 2))) + (Math.pow((22.0) - (input[10]), 2))) + (Math.pow((376.04) - (input[11]), 2))) + (Math.pow((5.57) - (input[12]), 2))));
    }
    public static double subroutine423(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.17331) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((9.69) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.585) - (input[4]), 2))) + (Math.pow((5.707) - (input[5]), 2))) + (Math.pow((54.0) - (input[6]), 2))) + (Math.pow((2.3817) - (input[7]), 2))) + (Math.pow((6.0) - (input[8]), 2))) + (Math.pow((391.0) - (input[9]), 2))) + (Math.pow((19.2) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((12.01) - (input[12]), 2))));
    }
    public static double subroutine424(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.14103) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((13.92) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.437) - (input[4]), 2))) + (Math.pow((5.79) - (input[5]), 2))) + (Math.pow((58.0) - (input[6]), 2))) + (Math.pow((6.32) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((289.0) - (input[9]), 2))) + (Math.pow((16.0) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((15.84) - (input[12]), 2))));
    }
    public static double subroutine425(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.09178) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((4.05) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.51) - (input[4]), 2))) + (Math.pow((6.416) - (input[5]), 2))) + (Math.pow((84.1) - (input[6]), 2))) + (Math.pow((2.6463) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((296.0) - (input[9]), 2))) + (Math.pow((16.6) - (input[10]), 2))) + (Math.pow((395.5) - (input[11]), 2))) + (Math.pow((9.04) - (input[12]), 2))));
    }
    public static double subroutine426(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.07013) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((13.89) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.55) - (input[4]), 2))) + (Math.pow((6.642) - (input[5]), 2))) + (Math.pow((85.1) - (input[6]), 2))) + (Math.pow((3.4211) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((276.0) - (input[9]), 2))) + (Math.pow((16.4) - (input[10]), 2))) + (Math.pow((392.78) - (input[11]), 2))) + (Math.pow((9.69) - (input[12]), 2))));
    }
    public static double subroutine427(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.05735) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((4.49) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.449) - (input[4]), 2))) + (Math.pow((6.63) - (input[5]), 2))) + (Math.pow((56.1) - (input[6]), 2))) + (Math.pow((4.4377) - (input[7]), 2))) + (Math.pow((3.0) - (input[8]), 2))) + (Math.pow((247.0) - (input[9]), 2))) + (Math.pow((18.5) - (input[10]), 2))) + (Math.pow((392.3) - (input[11]), 2))) + (Math.pow((6.53) - (input[12]), 2))));
    }
    public static double subroutine428(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.01538) - (input[0]), 2)) + (Math.pow((90.0) - (input[1]), 2))) + (Math.pow((3.75) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.394) - (input[4]), 2))) + (Math.pow((7.454) - (input[5]), 2))) + (Math.pow((34.2) - (input[6]), 2))) + (Math.pow((6.3361) - (input[7]), 2))) + (Math.pow((3.0) - (input[8]), 2))) + (Math.pow((244.0) - (input[9]), 2))) + (Math.pow((15.9) - (input[10]), 2))) + (Math.pow((386.34) - (input[11]), 2))) + (Math.pow((3.11) - (input[12]), 2))));
    }
    public static double subroutine429(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.53412) - (input[0]), 2)) + (Math.pow((20.0) - (input[1]), 2))) + (Math.pow((3.97) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.647) - (input[4]), 2))) + (Math.pow((7.52) - (input[5]), 2))) + (Math.pow((89.4) - (input[6]), 2))) + (Math.pow((2.1398) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((264.0) - (input[9]), 2))) + (Math.pow((13.0) - (input[10]), 2))) + (Math.pow((388.37) - (input[11]), 2))) + (Math.pow((7.26) - (input[12]), 2))));
    }
    public static double subroutine430(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((2.36862) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((19.58) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.871) - (input[4]), 2))) + (Math.pow((4.926) - (input[5]), 2))) + (Math.pow((95.7) - (input[6]), 2))) + (Math.pow((1.4608) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((403.0) - (input[9]), 2))) + (Math.pow((14.7) - (input[10]), 2))) + (Math.pow((391.71) - (input[11]), 2))) + (Math.pow((29.53) - (input[12]), 2))));
    }
    public static double subroutine431(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.62356) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((6.2) - (input[2]), 2))) + (Math.pow((1.0) - (input[3]), 2))) + (Math.pow((0.507) - (input[4]), 2))) + (Math.pow((6.879) - (input[5]), 2))) + (Math.pow((77.7) - (input[6]), 2))) + (Math.pow((3.2721) - (input[7]), 2))) + (Math.pow((8.0) - (input[8]), 2))) + (Math.pow((307.0) - (input[9]), 2))) + (Math.pow((17.4) - (input[10]), 2))) + (Math.pow((390.39) - (input[11]), 2))) + (Math.pow((9.93) - (input[12]), 2))));
    }
    public static double subroutine432(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((11.0874) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.718) - (input[4]), 2))) + (Math.pow((6.411) - (input[5]), 2))) + (Math.pow((100.0) - (input[6]), 2))) + (Math.pow((1.8589) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((318.75) - (input[11]), 2))) + (Math.pow((15.02) - (input[12]), 2))));
    }
    public static double subroutine433(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.09068) - (input[0]), 2)) + (Math.pow((45.0) - (input[1]), 2))) + (Math.pow((3.44) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.437) - (input[4]), 2))) + (Math.pow((6.951) - (input[5]), 2))) + (Math.pow((21.5) - (input[6]), 2))) + (Math.pow((6.4798) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((398.0) - (input[9]), 2))) + (Math.pow((15.2) - (input[10]), 2))) + (Math.pow((377.68) - (input[11]), 2))) + (Math.pow((5.1) - (input[12]), 2))));
    }
    public static double subroutine434(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.24522) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((9.9) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.544) - (input[4]), 2))) + (Math.pow((5.782) - (input[5]), 2))) + (Math.pow((71.7) - (input[6]), 2))) + (Math.pow((4.0317) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((304.0) - (input[9]), 2))) + (Math.pow((18.4) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((15.94) - (input[12]), 2))));
    }
    public static double subroutine435(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.07978) - (input[0]), 2)) + (Math.pow((40.0) - (input[1]), 2))) + (Math.pow((6.41) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.447) - (input[4]), 2))) + (Math.pow((6.482) - (input[5]), 2))) + (Math.pow((32.1) - (input[6]), 2))) + (Math.pow((4.1403) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((254.0) - (input[9]), 2))) + (Math.pow((17.6) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((7.19) - (input[12]), 2))));
    }
    public static double subroutine436(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((4.55587) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.718) - (input[4]), 2))) + (Math.pow((3.561) - (input[5]), 2))) + (Math.pow((87.9) - (input[6]), 2))) + (Math.pow((1.6132) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((354.7) - (input[11]), 2))) + (Math.pow((7.12) - (input[12]), 2))));
    }
    public static double subroutine437(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((3.56868) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.58) - (input[4]), 2))) + (Math.pow((6.437) - (input[5]), 2))) + (Math.pow((75.0) - (input[6]), 2))) + (Math.pow((2.8965) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((393.37) - (input[11]), 2))) + (Math.pow((14.36) - (input[12]), 2))));
    }
    public static double subroutine438(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.2498) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((21.89) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.624) - (input[4]), 2))) + (Math.pow((5.857) - (input[5]), 2))) + (Math.pow((98.2) - (input[6]), 2))) + (Math.pow((1.6686) - (input[7]), 2))) + (Math.pow((4.0) - (input[8]), 2))) + (Math.pow((437.0) - (input[9]), 2))) + (Math.pow((21.2) - (input[10]), 2))) + (Math.pow((392.04) - (input[11]), 2))) + (Math.pow((21.32) - (input[12]), 2))));
    }
    public static double subroutine439(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((4.89822) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.631) - (input[4]), 2))) + (Math.pow((4.97) - (input[5]), 2))) + (Math.pow((100.0) - (input[6]), 2))) + (Math.pow((1.3325) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((375.52) - (input[11]), 2))) + (Math.pow((3.26) - (input[12]), 2))));
    }
    public static double subroutine440(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((2.01019) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((19.58) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.605) - (input[4]), 2))) + (Math.pow((7.929) - (input[5]), 2))) + (Math.pow((96.2) - (input[6]), 2))) + (Math.pow((2.0459) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((403.0) - (input[9]), 2))) + (Math.pow((14.7) - (input[10]), 2))) + (Math.pow((369.3) - (input[11]), 2))) + (Math.pow((3.7) - (input[12]), 2))));
    }
    public static double subroutine441(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.02498) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((1.89) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.518) - (input[4]), 2))) + (Math.pow((6.54) - (input[5]), 2))) + (Math.pow((59.7) - (input[6]), 2))) + (Math.pow((6.2669) - (input[7]), 2))) + (Math.pow((1.0) - (input[8]), 2))) + (Math.pow((422.0) - (input[9]), 2))) + (Math.pow((15.9) - (input[10]), 2))) + (Math.pow((389.96) - (input[11]), 2))) + (Math.pow((8.65) - (input[12]), 2))));
    }
    public static double subroutine442(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.12757) - (input[0]), 2)) + (Math.pow((30.0) - (input[1]), 2))) + (Math.pow((4.93) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.428) - (input[4]), 2))) + (Math.pow((6.393) - (input[5]), 2))) + (Math.pow((7.8) - (input[6]), 2))) + (Math.pow((7.0355) - (input[7]), 2))) + (Math.pow((6.0) - (input[8]), 2))) + (Math.pow((300.0) - (input[9]), 2))) + (Math.pow((16.6) - (input[10]), 2))) + (Math.pow((374.71) - (input[11]), 2))) + (Math.pow((5.19) - (input[12]), 2))));
    }
    public static double subroutine443(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((9.51363) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.713) - (input[4]), 2))) + (Math.pow((6.728) - (input[5]), 2))) + (Math.pow((94.1) - (input[6]), 2))) + (Math.pow((2.4961) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((6.68) - (input[11]), 2))) + (Math.pow((18.71) - (input[12]), 2))));
    }
    public static double subroutine444(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.52014) - (input[0]), 2)) + (Math.pow((20.0) - (input[1]), 2))) + (Math.pow((3.97) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.647) - (input[4]), 2))) + (Math.pow((8.398) - (input[5]), 2))) + (Math.pow((91.5) - (input[6]), 2))) + (Math.pow((2.2885) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((264.0) - (input[9]), 2))) + (Math.pow((13.0) - (input[10]), 2))) + (Math.pow((386.86) - (input[11]), 2))) + (Math.pow((5.91) - (input[12]), 2))));
    }
    public static double subroutine445(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.15038) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((25.65) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.581) - (input[4]), 2))) + (Math.pow((5.856) - (input[5]), 2))) + (Math.pow((97.0) - (input[6]), 2))) + (Math.pow((1.9444) - (input[7]), 2))) + (Math.pow((2.0) - (input[8]), 2))) + (Math.pow((188.0) - (input[9]), 2))) + (Math.pow((19.1) - (input[10]), 2))) + (Math.pow((370.31) - (input[11]), 2))) + (Math.pow((25.41) - (input[12]), 2))));
    }
    public static double subroutine446(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((5.29305) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.7) - (input[4]), 2))) + (Math.pow((6.051) - (input[5]), 2))) + (Math.pow((82.5) - (input[6]), 2))) + (Math.pow((2.1678) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((378.38) - (input[11]), 2))) + (Math.pow((18.76) - (input[12]), 2))));
    }
    public static double subroutine447(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.24103) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((7.38) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.493) - (input[4]), 2))) + (Math.pow((6.083) - (input[5]), 2))) + (Math.pow((43.7) - (input[6]), 2))) + (Math.pow((5.4159) - (input[7]), 2))) + (Math.pow((5.0) - (input[8]), 2))) + (Math.pow((287.0) - (input[9]), 2))) + (Math.pow((19.6) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((12.79) - (input[12]), 2))));
    }
    public static double subroutine448(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((9.33889) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((18.1) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.679) - (input[4]), 2))) + (Math.pow((6.38) - (input[5]), 2))) + (Math.pow((95.6) - (input[6]), 2))) + (Math.pow((1.9682) - (input[7]), 2))) + (Math.pow((24.0) - (input[8]), 2))) + (Math.pow((666.0) - (input[9]), 2))) + (Math.pow((20.2) - (input[10]), 2))) + (Math.pow((60.72) - (input[11]), 2))) + (Math.pow((24.08) - (input[12]), 2))));
    }
    public static double subroutine449(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.22212) - (input[0]), 2)) + (Math.pow((0.0) - (input[1]), 2))) + (Math.pow((10.01) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.547) - (input[4]), 2))) + (Math.pow((6.092) - (input[5]), 2))) + (Math.pow((95.4) - (input[6]), 2))) + (Math.pow((2.548) - (input[7]), 2))) + (Math.pow((6.0) - (input[8]), 2))) + (Math.pow((432.0) - (input[9]), 2))) + (Math.pow((17.8) - (input[10]), 2))) + (Math.pow((396.9) - (input[11]), 2))) + (Math.pow((17.09) - (input[12]), 2))));
    }
    public static double subroutine450(double[] input) {
        return Math.exp(((0) - (0.07692307692307693)) * (((((((((((((Math.pow((0.03548) - (input[0]), 2)) + (Math.pow((80.0) - (input[1]), 2))) + (Math.pow((3.64) - (input[2]), 2))) + (Math.pow((0.0) - (input[3]), 2))) + (Math.pow((0.392) - (input[4]), 2))) + (Math.pow((5.876) - (input[5]), 2))) + (Math.pow((19.1) - (input[6]), 2))) + (Math.pow((9.2203) - (input[7]), 2))) + (Math.pow((1.0) - (input[8]), 2))) + (Math.pow((315.0) - (input[9]), 2))) + (Math.pow((16.4) - (input[10]), 2))) + (Math.pow((395.18) - (input[11]), 2))) + (Math.pow((9.25) - (input[12]), 2))));
    }
}
