import numpy as np
def score(input):
    var0 = (0) - (0.25)
    var1 = np.exp((var0) * ((((np.power((6.0) - (input[0]), 2)) + (np.power((2.9) - (input[1]), 2))) + (np.power((4.5) - (input[2]), 2))) + (np.power((1.5) - (input[3]), 2))))
    var2 = np.exp((var0) * ((((np.power((5.4) - (input[0]), 2)) + (np.power((3.0) - (input[1]), 2))) + (np.power((4.5) - (input[2]), 2))) + (np.power((1.5) - (input[3]), 2))))
    var3 = np.exp((var0) * ((((np.power((6.1) - (input[0]), 2)) + (np.power((2.9) - (input[1]), 2))) + (np.power((4.7) - (input[2]), 2))) + (np.power((1.4) - (input[3]), 2))))
    var4 = np.exp((var0) * ((((np.power((5.6) - (input[0]), 2)) + (np.power((3.0) - (input[1]), 2))) + (np.power((4.5) - (input[2]), 2))) + (np.power((1.5) - (input[3]), 2))))
    var5 = np.exp((var0) * ((((np.power((6.2) - (input[0]), 2)) + (np.power((2.2) - (input[1]), 2))) + (np.power((4.5) - (input[2]), 2))) + (np.power((1.5) - (input[3]), 2))))
    var6 = np.exp((var0) * ((((np.power((5.0) - (input[0]), 2)) + (np.power((2.3) - (input[1]), 2))) + (np.power((3.3) - (input[2]), 2))) + (np.power((1.0) - (input[3]), 2))))
    var7 = np.exp((var0) * ((((np.power((6.5) - (input[0]), 2)) + (np.power((2.8) - (input[1]), 2))) + (np.power((4.6) - (input[2]), 2))) + (np.power((1.5) - (input[3]), 2))))
    var8 = np.exp((var0) * ((((np.power((5.9) - (input[0]), 2)) + (np.power((3.2) - (input[1]), 2))) + (np.power((4.8) - (input[2]), 2))) + (np.power((1.8) - (input[3]), 2))))
    var9 = np.exp((var0) * ((((np.power((6.3) - (input[0]), 2)) + (np.power((3.3) - (input[1]), 2))) + (np.power((4.7) - (input[2]), 2))) + (np.power((1.6) - (input[3]), 2))))
    var10 = np.exp((var0) * ((((np.power((5.0) - (input[0]), 2)) + (np.power((2.0) - (input[1]), 2))) + (np.power((3.5) - (input[2]), 2))) + (np.power((1.0) - (input[3]), 2))))
    var11 = np.exp((var0) * ((((np.power((6.7) - (input[0]), 2)) + (np.power((3.0) - (input[1]), 2))) + (np.power((5.0) - (input[2]), 2))) + (np.power((1.7) - (input[3]), 2))))
    var12 = np.exp((var0) * ((((np.power((7.0) - (input[0]), 2)) + (np.power((3.2) - (input[1]), 2))) + (np.power((4.7) - (input[2]), 2))) + (np.power((1.4) - (input[3]), 2))))
    var13 = np.exp((var0) * ((((np.power((4.9) - (input[0]), 2)) + (np.power((2.4) - (input[1]), 2))) + (np.power((3.3) - (input[2]), 2))) + (np.power((1.0) - (input[3]), 2))))
    var14 = np.exp((var0) * ((((np.power((6.3) - (input[0]), 2)) + (np.power((2.5) - (input[1]), 2))) + (np.power((4.9) - (input[2]), 2))) + (np.power((1.5) - (input[3]), 2))))
    var15 = np.exp((var0) * ((((np.power((6.0) - (input[0]), 2)) + (np.power((2.7) - (input[1]), 2))) + (np.power((5.1) - (input[2]), 2))) + (np.power((1.6) - (input[3]), 2))))
    var16 = np.exp((var0) * ((((np.power((6.7) - (input[0]), 2)) + (np.power((3.1) - (input[1]), 2))) + (np.power((4.7) - (input[2]), 2))) + (np.power((1.5) - (input[3]), 2))))
    var17 = np.exp((var0) * ((((np.power((6.0) - (input[0]), 2)) + (np.power((3.4) - (input[1]), 2))) + (np.power((4.5) - (input[2]), 2))) + (np.power((1.6) - (input[3]), 2))))
    var18 = np.exp((var0) * ((((np.power((6.8) - (input[0]), 2)) + (np.power((2.8) - (input[1]), 2))) + (np.power((4.8) - (input[2]), 2))) + (np.power((1.4) - (input[3]), 2))))
    var19 = np.exp((var0) * ((((np.power((5.1) - (input[0]), 2)) + (np.power((3.8) - (input[1]), 2))) + (np.power((1.9) - (input[2]), 2))) + (np.power((0.4) - (input[3]), 2))))
    var20 = np.exp((var0) * ((((np.power((5.7) - (input[0]), 2)) + (np.power((4.4) - (input[1]), 2))) + (np.power((1.5) - (input[2]), 2))) + (np.power((0.4) - (input[3]), 2))))
    var21 = np.exp((var0) * ((((np.power((4.3) - (input[0]), 2)) + (np.power((3.0) - (input[1]), 2))) + (np.power((1.1) - (input[2]), 2))) + (np.power((0.1) - (input[3]), 2))))
    var22 = np.exp((var0) * ((((np.power((4.5) - (input[0]), 2)) + (np.power((2.3) - (input[1]), 2))) + (np.power((1.3) - (input[2]), 2))) + (np.power((0.3) - (input[3]), 2))))
    var23 = np.exp((var0) * ((((np.power((5.8) - (input[0]), 2)) + (np.power((2.7) - (input[1]), 2))) + (np.power((5.1) - (input[2]), 2))) + (np.power((1.9) - (input[3]), 2))))
    var24 = np.exp((var0) * ((((np.power((6.3) - (input[0]), 2)) + (np.power((2.7) - (input[1]), 2))) + (np.power((4.9) - (input[2]), 2))) + (np.power((1.8) - (input[3]), 2))))
    var25 = np.exp((var0) * ((((np.power((6.0) - (input[0]), 2)) + (np.power((3.0) - (input[1]), 2))) + (np.power((4.8) - (input[2]), 2))) + (np.power((1.8) - (input[3]), 2))))
    var26 = np.exp((var0) * ((((np.power((6.3) - (input[0]), 2)) + (np.power((2.8) - (input[1]), 2))) + (np.power((5.1) - (input[2]), 2))) + (np.power((1.5) - (input[3]), 2))))
    var27 = np.exp((var0) * ((((np.power((6.1) - (input[0]), 2)) + (np.power((3.0) - (input[1]), 2))) + (np.power((4.9) - (input[2]), 2))) + (np.power((1.8) - (input[3]), 2))))
    var28 = np.exp((var0) * ((((np.power((7.7) - (input[0]), 2)) + (np.power((2.6) - (input[1]), 2))) + (np.power((6.9) - (input[2]), 2))) + (np.power((2.3) - (input[3]), 2))))
    var29 = np.exp((var0) * ((((np.power((6.9) - (input[0]), 2)) + (np.power((3.1) - (input[1]), 2))) + (np.power((5.1) - (input[2]), 2))) + (np.power((2.3) - (input[3]), 2))))
    var30 = np.exp((var0) * ((((np.power((6.3) - (input[0]), 2)) + (np.power((2.5) - (input[1]), 2))) + (np.power((5.0) - (input[2]), 2))) + (np.power((1.9) - (input[3]), 2))))
    var31 = np.exp((var0) * ((((np.power((6.1) - (input[0]), 2)) + (np.power((2.6) - (input[1]), 2))) + (np.power((5.6) - (input[2]), 2))) + (np.power((1.4) - (input[3]), 2))))
    var32 = np.exp((var0) * ((((np.power((6.5) - (input[0]), 2)) + (np.power((3.2) - (input[1]), 2))) + (np.power((5.1) - (input[2]), 2))) + (np.power((2.0) - (input[3]), 2))))
    var33 = np.exp((var0) * ((((np.power((6.3) - (input[0]), 2)) + (np.power((3.3) - (input[1]), 2))) + (np.power((6.0) - (input[2]), 2))) + (np.power((2.5) - (input[3]), 2))))
    var34 = np.exp((var0) * ((((np.power((4.9) - (input[0]), 2)) + (np.power((2.5) - (input[1]), 2))) + (np.power((4.5) - (input[2]), 2))) + (np.power((1.7) - (input[3]), 2))))
    var35 = np.exp((var0) * ((((np.power((5.9) - (input[0]), 2)) + (np.power((3.0) - (input[1]), 2))) + (np.power((5.1) - (input[2]), 2))) + (np.power((1.8) - (input[3]), 2))))
    var36 = np.exp((var0) * ((((np.power((5.6) - (input[0]), 2)) + (np.power((2.8) - (input[1]), 2))) + (np.power((4.9) - (input[2]), 2))) + (np.power((2.0) - (input[3]), 2))))
    var37 = np.exp((var0) * ((((np.power((6.0) - (input[0]), 2)) + (np.power((2.2) - (input[1]), 2))) + (np.power((5.0) - (input[2]), 2))) + (np.power((1.5) - (input[3]), 2))))
    var38 = np.exp((var0) * ((((np.power((6.5) - (input[0]), 2)) + (np.power((3.0) - (input[1]), 2))) + (np.power((5.2) - (input[2]), 2))) + (np.power((2.0) - (input[3]), 2))))
    var39 = np.exp((var0) * ((((np.power((7.9) - (input[0]), 2)) + (np.power((3.8) - (input[1]), 2))) + (np.power((6.4) - (input[2]), 2))) + (np.power((2.0) - (input[3]), 2))))
    var40 = np.exp((var0) * ((((np.power((7.2) - (input[0]), 2)) + (np.power((3.0) - (input[1]), 2))) + (np.power((5.8) - (input[2]), 2))) + (np.power((1.6) - (input[3]), 2))))
    return np.asarray([((((((((((((((((((((((-0.058273877784106996) + ((var1) * (-0.0))) + ((var2) * (-0.0))) + ((var3) * (-0.0))) + ((var4) * (-0.0))) + ((var5) * (-0.0))) + ((var6) * (-0.39827104823830767))) + ((var7) * (-0.0))) + ((var8) * (-0.0))) + ((var9) * (-0.0))) + ((var10) * (-0.0))) + ((var11) * (-0.1945483141137432))) + ((var12) * (-0.5731507539020576))) + ((var13) * (-1.0))) + ((var14) * (-0.0))) + ((var15) * (-0.0))) + ((var16) * (-0.0))) + ((var17) * (-0.0))) + ((var18) * (-0.0))) + ((var19) * (0.7232997964245547))) + ((var20) * (0.4426703198295538))) + ((var21) * (0.0))) + ((var22) * (1.0)), ((((((((((((((((((((((-0.1675575761469295) + ((var23) * (-0.0))) + ((var24) * (-0.0))) + ((var25) * (-0.0))) + ((var26) * (-0.0))) + ((var27) * (-0.0))) + ((var28) * (-0.42842234431180903))) + ((var29) * (-0.16142399554136144))) + ((var30) * (-0.0))) + ((var31) * (-0.0))) + ((var32) * (-0.0))) + ((var33) * (-0.11716468028552147))) + ((var34) * (-0.732591094590368))) + ((var35) * (-0.0))) + ((var36) * (-0.0))) + ((var37) * (-0.10069216545035711))) + ((var38) * (-0.0))) + ((var39) * (-0.4050989417293007))) + ((var40) * (-0.0))) + ((var19) * (0.0))) + ((var20) * (0.9603758754297508))) + ((var21) * (0.017307626578303974))) + ((var22) * (0.9677097199006631)), ((((((((((((((((((((((((((((((((((((-0.1690193167441151) + ((var23) * (-1.0))) + ((var24) * (-1.0))) + ((var25) * (-1.0))) + ((var26) * (-1.0))) + ((var27) * (-1.0))) + ((var28) * (-0.0))) + ((var29) * (-0.6997374221624343))) + ((var30) * (-1.0))) + ((var31) * (-0.5563222234148923))) + ((var32) * (-1.0))) + ((var33) * (-0.0))) + ((var34) * (-1.0))) + ((var35) * (-1.0))) + ((var36) * (-1.0))) + ((var37) * (-1.0))) + ((var38) * (-1.0))) + ((var39) * (-0.18584105901562897))) + ((var40) * (-0.4083559420777223))) + ((var1) * (1.0))) + ((var2) * (1.0))) + ((var3) * (1.0))) + ((var4) * (1.0))) + ((var5) * (1.0))) + ((var6) * (0.0))) + ((var7) * (1.0))) + ((var8) * (1.0))) + ((var9) * (1.0))) + ((var10) * (0.3840890619619074))) + ((var11) * (1.0))) + ((var12) * (0.021588961408824672))) + ((var13) * (0.0))) + ((var14) * (1.0))) + ((var15) * (1.0))) + ((var16) * (1.0))) + ((var17) * (0.4445786232999459))) + ((var18) * (1.0))])
