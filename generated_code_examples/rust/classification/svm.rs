fn score(input: Vec<f64>) -> Vec<f64> {
    let var0: f64;
    var0 = f64::exp(-0.06389634699048878_f64 * (f64::powf(5.1_f64 - input[0], 2.0_f64) + f64::powf(2.5_f64 - input[1], 2.0_f64) + f64::powf(3.0_f64 - input[2], 2.0_f64) + f64::powf(1.1_f64 - input[3], 2.0_f64)));
    let var1: f64;
    var1 = f64::exp(-0.06389634699048878_f64 * (f64::powf(4.9_f64 - input[0], 2.0_f64) + f64::powf(2.4_f64 - input[1], 2.0_f64) + f64::powf(3.3_f64 - input[2], 2.0_f64) + f64::powf(1.0_f64 - input[3], 2.0_f64)));
    let var2: f64;
    var2 = f64::exp(-0.06389634699048878_f64 * (f64::powf(6.3_f64 - input[0], 2.0_f64) + f64::powf(2.5_f64 - input[1], 2.0_f64) + f64::powf(4.9_f64 - input[2], 2.0_f64) + f64::powf(1.5_f64 - input[3], 2.0_f64)));
    let var3: f64;
    var3 = f64::exp(-0.06389634699048878_f64 * (f64::powf(5.4_f64 - input[0], 2.0_f64) + f64::powf(3.0_f64 - input[1], 2.0_f64) + f64::powf(4.5_f64 - input[2], 2.0_f64) + f64::powf(1.5_f64 - input[3], 2.0_f64)));
    let var4: f64;
    var4 = f64::exp(-0.06389634699048878_f64 * (f64::powf(6.2_f64 - input[0], 2.0_f64) + f64::powf(2.2_f64 - input[1], 2.0_f64) + f64::powf(4.5_f64 - input[2], 2.0_f64) + f64::powf(1.5_f64 - input[3], 2.0_f64)));
    let var5: f64;
    var5 = f64::exp(-0.06389634699048878_f64 * (f64::powf(5.6_f64 - input[0], 2.0_f64) + f64::powf(2.9_f64 - input[1], 2.0_f64) + f64::powf(3.6_f64 - input[2], 2.0_f64) + f64::powf(1.3_f64 - input[3], 2.0_f64)));
    let var6: f64;
    var6 = f64::exp(-0.06389634699048878_f64 * (f64::powf(6.7_f64 - input[0], 2.0_f64) + f64::powf(3.0_f64 - input[1], 2.0_f64) + f64::powf(5.0_f64 - input[2], 2.0_f64) + f64::powf(1.7_f64 - input[3], 2.0_f64)));
    let var7: f64;
    var7 = f64::exp(-0.06389634699048878_f64 * (f64::powf(5.0_f64 - input[0], 2.0_f64) + f64::powf(2.3_f64 - input[1], 2.0_f64) + f64::powf(3.3_f64 - input[2], 2.0_f64) + f64::powf(1.0_f64 - input[3], 2.0_f64)));
    let var8: f64;
    var8 = f64::exp(-0.06389634699048878_f64 * (f64::powf(6.0_f64 - input[0], 2.0_f64) + f64::powf(2.7_f64 - input[1], 2.0_f64) + f64::powf(5.1_f64 - input[2], 2.0_f64) + f64::powf(1.6_f64 - input[3], 2.0_f64)));
    let var9: f64;
    var9 = f64::exp(-0.06389634699048878_f64 * (f64::powf(5.9_f64 - input[0], 2.0_f64) + f64::powf(3.2_f64 - input[1], 2.0_f64) + f64::powf(4.8_f64 - input[2], 2.0_f64) + f64::powf(1.8_f64 - input[3], 2.0_f64)));
    let var10: f64;
    var10 = f64::exp(-0.06389634699048878_f64 * (f64::powf(5.7_f64 - input[0], 2.0_f64) + f64::powf(2.6_f64 - input[1], 2.0_f64) + f64::powf(3.5_f64 - input[2], 2.0_f64) + f64::powf(1.0_f64 - input[3], 2.0_f64)));
    let var11: f64;
    var11 = f64::exp(-0.06389634699048878_f64 * (f64::powf(5.0_f64 - input[0], 2.0_f64) + f64::powf(3.0_f64 - input[1], 2.0_f64) + f64::powf(1.6_f64 - input[2], 2.0_f64) + f64::powf(0.2_f64 - input[3], 2.0_f64)));
    let var12: f64;
    var12 = f64::exp(-0.06389634699048878_f64 * (f64::powf(5.4_f64 - input[0], 2.0_f64) + f64::powf(3.4_f64 - input[1], 2.0_f64) + f64::powf(1.7_f64 - input[2], 2.0_f64) + f64::powf(0.2_f64 - input[3], 2.0_f64)));
    let var13: f64;
    var13 = f64::exp(-0.06389634699048878_f64 * (f64::powf(5.7_f64 - input[0], 2.0_f64) + f64::powf(3.8_f64 - input[1], 2.0_f64) + f64::powf(1.7_f64 - input[2], 2.0_f64) + f64::powf(0.3_f64 - input[3], 2.0_f64)));
    let var14: f64;
    var14 = f64::exp(-0.06389634699048878_f64 * (f64::powf(4.8_f64 - input[0], 2.0_f64) + f64::powf(3.4_f64 - input[1], 2.0_f64) + f64::powf(1.9_f64 - input[2], 2.0_f64) + f64::powf(0.2_f64 - input[3], 2.0_f64)));
    let var15: f64;
    var15 = f64::exp(-0.06389634699048878_f64 * (f64::powf(4.5_f64 - input[0], 2.0_f64) + f64::powf(2.3_f64 - input[1], 2.0_f64) + f64::powf(1.3_f64 - input[2], 2.0_f64) + f64::powf(0.3_f64 - input[3], 2.0_f64)));
    let var16: f64;
    var16 = f64::exp(-0.06389634699048878_f64 * (f64::powf(5.7_f64 - input[0], 2.0_f64) + f64::powf(4.4_f64 - input[1], 2.0_f64) + f64::powf(1.5_f64 - input[2], 2.0_f64) + f64::powf(0.4_f64 - input[3], 2.0_f64)));
    let var17: f64;
    var17 = f64::exp(-0.06389634699048878_f64 * (f64::powf(5.1_f64 - input[0], 2.0_f64) + f64::powf(3.8_f64 - input[1], 2.0_f64) + f64::powf(1.9_f64 - input[2], 2.0_f64) + f64::powf(0.4_f64 - input[3], 2.0_f64)));
    let var18: f64;
    var18 = f64::exp(-0.06389634699048878_f64 * (f64::powf(5.1_f64 - input[0], 2.0_f64) + f64::powf(3.3_f64 - input[1], 2.0_f64) + f64::powf(1.7_f64 - input[2], 2.0_f64) + f64::powf(0.5_f64 - input[3], 2.0_f64)));
    let var19: f64;
    var19 = f64::exp(-0.06389634699048878_f64 * (f64::powf(6.2_f64 - input[0], 2.0_f64) + f64::powf(2.8_f64 - input[1], 2.0_f64) + f64::powf(4.8_f64 - input[2], 2.0_f64) + f64::powf(1.8_f64 - input[3], 2.0_f64)));
    let var20: f64;
    var20 = f64::exp(-0.06389634699048878_f64 * (f64::powf(7.2_f64 - input[0], 2.0_f64) + f64::powf(3.0_f64 - input[1], 2.0_f64) + f64::powf(5.8_f64 - input[2], 2.0_f64) + f64::powf(1.6_f64 - input[3], 2.0_f64)));
    let var21: f64;
    var21 = f64::exp(-0.06389634699048878_f64 * (f64::powf(6.1_f64 - input[0], 2.0_f64) + f64::powf(3.0_f64 - input[1], 2.0_f64) + f64::powf(4.9_f64 - input[2], 2.0_f64) + f64::powf(1.8_f64 - input[3], 2.0_f64)));
    let var22: f64;
    var22 = f64::exp(-0.06389634699048878_f64 * (f64::powf(6.0_f64 - input[0], 2.0_f64) + f64::powf(3.0_f64 - input[1], 2.0_f64) + f64::powf(4.8_f64 - input[2], 2.0_f64) + f64::powf(1.8_f64 - input[3], 2.0_f64)));
    let var23: f64;
    var23 = f64::exp(-0.06389634699048878_f64 * (f64::powf(4.9_f64 - input[0], 2.0_f64) + f64::powf(2.5_f64 - input[1], 2.0_f64) + f64::powf(4.5_f64 - input[2], 2.0_f64) + f64::powf(1.7_f64 - input[3], 2.0_f64)));
    let var24: f64;
    var24 = f64::exp(-0.06389634699048878_f64 * (f64::powf(7.9_f64 - input[0], 2.0_f64) + f64::powf(3.8_f64 - input[1], 2.0_f64) + f64::powf(6.4_f64 - input[2], 2.0_f64) + f64::powf(2.0_f64 - input[3], 2.0_f64)));
    let var25: f64;
    var25 = f64::exp(-0.06389634699048878_f64 * (f64::powf(5.6_f64 - input[0], 2.0_f64) + f64::powf(2.8_f64 - input[1], 2.0_f64) + f64::powf(4.9_f64 - input[2], 2.0_f64) + f64::powf(2.0_f64 - input[3], 2.0_f64)));
    let var26: f64;
    var26 = f64::exp(-0.06389634699048878_f64 * (f64::powf(6.0_f64 - input[0], 2.0_f64) + f64::powf(2.2_f64 - input[1], 2.0_f64) + f64::powf(5.0_f64 - input[2], 2.0_f64) + f64::powf(1.5_f64 - input[3], 2.0_f64)));
    let var27: f64;
    var27 = f64::exp(-0.06389634699048878_f64 * (f64::powf(6.3_f64 - input[0], 2.0_f64) + f64::powf(2.8_f64 - input[1], 2.0_f64) + f64::powf(5.1_f64 - input[2], 2.0_f64) + f64::powf(1.5_f64 - input[3], 2.0_f64)));
    vec![0.11172510039290856_f64 + var0 * -0.8898986041811555_f64 + var1 * -0.8898986041811555_f64 + var2 * -0.0_f64 + var3 * -0.0_f64 + var4 * -0.0_f64 + var5 * -0.756413813553974_f64 + var6 * -0.0_f64 + var7 * -0.8898986041811555_f64 + var8 * -0.0_f64 + var9 * -0.0_f64 + var10 * -0.8898986041811555_f64 + var11 * 0.04218875216876044_f64 + var12 * 0.7142250613852136_f64 + var13 * 0.0_f64 + var14 * 0.8898986041811555_f64 + var15 * 0.8898986041811555_f64 + var16 * 0.0_f64 + var17 * 0.8898986041811555_f64 + var18 * 0.8898986041811555_f64, -0.04261957451303831_f64 + var19 * -0.37953658977037247_f64 + var20 * -0.0_f64 + var21 * -0.0_f64 + var22 * -0.37953658977037247_f64 + var23 * -0.37953658977037247_f64 + var24 * -0.26472396872040066_f64 + var25 * -0.3745962010653211_f64 + var26 * -0.10077618026650095_f64 + var27 * -0.0_f64 + var11 * 0.0_f64 + var12 * 0.0_f64 + var13 * 0.37953658977037247_f64 + var14 * 0.37953658977037247_f64 + var15 * 0.3044555865539922_f64 + var16 * 0.05610417372785803_f64 + var17 * 0.37953658977037247_f64 + var18 * 0.37953658977037247_f64, 1.8136162062461285_f64 + var19 * -110.34516826676301_f64 + var20 * -13.999391039896215_f64 + var21 * -108.44329471899991_f64 + var22 * -110.34516826676301_f64 + var23 * -22.21095753342801_f64 + var24 * -0.0_f64 + var25 * -0.0_f64 + var26 * -65.00217641452454_f64 + var27 * -110.34516826676301_f64 + var0 * 0.0_f64 + var1 * 0.0_f64 + var2 * 110.34516826676301_f64 + var3 * 62.115561183470184_f64 + var4 * 37.19509025661546_f64 + var5 * 0.0_f64 + var6 * 110.34516826676301_f64 + var7 * 0.0_f64 + var8 * 110.34516826676301_f64 + var9 * 110.34516826676301_f64 + var10 * 0.0_f64]
}
